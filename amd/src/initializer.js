/* eslint-disable no-console */
/* eslint-disable max-len */
import { getAddCustomElements, getAddValidElements, getAdditionalCss, getWidgetDict } from './options';
import * as cfg from 'core/config';
import jQuery from 'jquery';
import ContextProperties from './context_properties';

/**
 * @param {TinyMCE} editor
 */
export function initializer(editor) {
    // Before setting the first content, we must extend the number of valid HTML tags
    editor.once('BeforeSetContent', () => {
        // Prevent the editor from removing certain tags
        // Allow custom elements, e.g., script tag and SVG in the editor.
        const validElem = getAddValidElements(editor);
        editor.schema.addValidElements(validElem);
        const addElem = getAddCustomElements(editor);
        editor.schema.addCustomElements(addElem);
    });
    // To remove editor.once('SetContent', () => {});
    // Add the bootstrap, CSS, etc... into the editor's iframe
    editor.on('init', () => {
        // On init editor.dom is ready
        // Inject css all generated by Moodle into the editor's iframe
        // http://localhost:4141/theme/styles.php/boost/1721728984_1/all
        // TODO: Missing themesubrevision
        const subversion = 1;
        const allCss = `${cfg.wwwroot}/theme/styles.php/${cfg.theme}/${cfg.themerev}_${subversion}/all`;
        editor.dom.loadCSS(allCss);

        // Inject styles and Javascript into the editor's iframe
        // editor.dom.loadCSS(`${baseUrl}/libs/fontawesome/css/font-awesome.min.css`);
        // Discover the jQuery version
        const jQueryVersion = jQuery.fn.jquery ?? '3.6.1';
        const scriptJQ = editor.dom.create("script", { src: `https://code.jquery.com/jquery-${jQueryVersion}.min.js` });
        const head = editor.getDoc().querySelector("head");
        scriptJQ.onload = () => {
            // Cannot load BS until JQ is fully loaded
            const bsVersion = jQuery.fn.tooltip?.Constructor?.VERSION ?? '4.6.2';
            const scriptBS = editor.dom.create("script",
                { src: `https://cdn.jsdelivr.net/npm/bootstrap@${bsVersion}/dist/js/bootstrap.bundle.min.js` });
            head.appendChild(scriptBS);

            // Activate popover and tooltips
            scriptBS.onload = () => {
                const scriptInitBS = editor.dom.create("script");
                scriptInitBS.innerHTML = `
                $(document).ready(function() {
                    $('body').tooltip({
                        selector: '[data-toggle="tooltip"]',
                        trigger: 'hover'
                    });
                    $('body').popover({
                        selector: '[data-toggle="popover"]',
                        trigger: 'hover'
                    });
                });`;
                head.appendChild(scriptInitBS);
            };
            // Initialize contextmenu when editor is ready
            // ContextMenu.getInstance(editor);

            /**
         * @param {HTMLElement} elem
         * @param {string | string[]} selectors
         * @returns {boolean}
         */
            const matchesSelectors = function (elem, selectors) {
                let selector = selectors;
                let extraQuery = [];
                if (Array.isArray(selectors)) {
                    selector = selectors[0];
                    if (selectors.length > 1) {
                        extraQuery = selectors.slice(1);
                    }
                }
                let match = elem.matches(selector);
                if (match) {
                    extraQuery.forEach(e => {
                        match = match && elem.querySelector(e);
                    });
                }
                return match;
            };

            const widgetList = Object.values(getWidgetDict(editor));

            /**
             * @param {HTMLElement} clickedElem
             * @returns {PathResult}
             */
            const findWidgetOnEventPath = function(clickedElem) {
                const result = {
                    clickedElem: clickedElem
                };
                let elem = clickedElem;
                const componentsLength = widgetList.length;
                while (elem !== null && elem !== undefined && elem.getAttribute("name") !== "BODY" && result.snpt === undefined) {
                    let i = 0;
                    while (i < componentsLength && result.snpt === undefined) {
                        if (matchesSelectors(elem, widgetList[i].selectors)) {
                            result.snpt = widgetList[i];
                            result.elem = elem;
                        }
                        i++;
                    }
                    elem = elem.parentElement;
                }
                return result;
            };

            editor.ui.registry.addIcon('gear', '<svg xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 512 512"><path d="M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160 80 80 0 1 0 0 160z"/></svg>');
            editor.ui.registry.addIcon('arrow-up-from-bracket', '<svg xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 448 512"><path d="M246.6 9.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 109.3 192 320c0 17.7 14.3 32 32 32s32-14.3 32-32l0-210.7 73.4 73.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-128-128zM64 352c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 64c0 53 43 96 96 96l256 0c53 0 96-43 96-96l0-64c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 64c0 17.7-14.3 32-32 32L96 448c-17.7 0-32-14.3-32-32l0-64z"/></svg>');

            editor.ui.registry.addButton('edit1', {
                icon: 'gear',
                tooltip: 'Properties',
                onAction: function (api) {
                    console.log("edit", api);
                    const currentContext = findWidgetOnEventPath(editor.selection.getNode());
                    console.log('must look for the closest widget from this node', currentContext);
                    if (!currentContext.snpt) {
                        return;
                    }
                    new ContextProperties(editor).show(currentContext);
                    // Display dialog on this result
                }
            });
            editor.ui.registry.addButton('unpack1', {
                icon: 'arrow-up-from-bracket',
                tooltip: 'Unwrap',
                onAction: function (api) {
                    console.log("unpack", api);
                }
            });
            editor.ui.registry.addContextToolbar('contexttb1', {
                predicate: function (node) {
                    return node.matches('div.alert');
                },
                items: 'edit1 | unpack1',
                position: 'node'
            });

        };
        head.appendChild(scriptJQ);
        // Inject css from site Admin
        const adminCss = getAdditionalCss(editor) || '';
        if (adminCss.trim()) {
            editor.dom.addStyle(adminCss);
        }
    });
}