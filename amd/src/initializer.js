import {getAddCustomElements, getAddValidElements, getAdditionalCss} from './options';
import * as cfg from 'core/config';
import jQuery from 'jquery';

/**
 * @param {TinyMCE} editor
 */
export function initializer(editor) {
    // Before setting the first content, we must extend the number of valid HTML tags
    editor.once('BeforeSetContent', () => {
        // Prevent the editor from removing certain tags
        // Allow custom elements, e.g., script tag and SVG in the editor.
        const validElem = getAddValidElements(editor);
        editor.schema.addValidElements(validElem);
        const addElem = getAddCustomElements(editor);
        editor.schema.addCustomElements(addElem);
    });
    // To remove editor.once('SetContent', () => {});
    // Add the bootstrap, CSS, etc... into the editor's iframe
    editor.on('init', () => {
        // On init editor.dom is ready
        // Inject css all generated by Moodle into the editor's iframe
        // http://localhost:4141/theme/styles.php/boost/1721728984_1/all
        // TODO: Missing themesubrevision
        const subversion = 1;
        const allCss = `${cfg.wwwroot}/theme/styles.php/${cfg.theme}/${cfg.themerev}_${subversion}/all`;
        editor.dom.loadCSS(allCss);

        // Inject styles and Javascript into the editor's iframe
        // editor.dom.loadCSS(`${baseUrl}/libs/fontawesome/css/font-awesome.min.css`);
        // Discover the jQuery version
        const jQueryVersion = jQuery.fn.jquery ?? '3.6.1';
        const scriptJQ = editor.dom.create("script", {src: `https://code.jquery.com/jquery-${jQueryVersion}.min.js`});
        const head = editor.getDoc().querySelector("head");
        scriptJQ.onload = () => {
            // Cannot load BS until JQ is fully loaded
            const bsVersion = jQuery.fn.tooltip?.Constructor?.VERSION ?? '4.6.2';
            const scriptBS = editor.dom.create("script",
                {src: `https://cdn.jsdelivr.net/npm/bootstrap@${bsVersion}/dist/js/bootstrap.bundle.min.js`});
            head.appendChild(scriptBS);

            // Activate popover and tooltips
            scriptBS.onload = () => {
                const scriptInitBS = editor.dom.create("script");
                scriptInitBS.innerHTML = `
                $(document).ready(function() {
                    $('body').tooltip({
                        selector: '[data-toggle="tooltip"]',
                        trigger: 'hover'
                    });
                    $('body').popover({
                        selector: '[data-toggle="popover"]',
                        trigger: 'hover'
                    });
                });`;
                head.appendChild(scriptInitBS);
            };
            // Initialize contextmenu when editor is ready
            // ContextMenu.getInstance(editor);

            editor.ui.registry.addButton('edit1', {
                icon: 'edit',
                tooltip: 'Edit',
                onAction: function() {
                    alert('Edit');
                }
            });
            editor.ui.registry.addButton('unpack1', {
                icon: 'code-sample',
                tooltip: 'Unpack',
                onAction: function() {
                    alert('Unpack');
                }
            });
            editor.ui.registry.addContextToolbar('contexttb1', {
                predicate: function(node) {
                    return node.matches('div.alert');
                },
                items: 'edit1 unpack1',
                position: 'node'
            });

        };
        head.appendChild(scriptJQ);
        // Inject css from site Admin
        const adminCss = getAdditionalCss(editor) || '';
        if (adminCss.trim()) {
            editor.dom.addStyle(adminCss);
        }
    });
}