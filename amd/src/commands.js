
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Tiny WidgetHub plugin.
 *
 * @module      tiny_widgethub/plugin
 * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>
 * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

import {displayFilepicker, getButtonImage} from 'editor_tiny/utils';
import {get_string as getString} from 'core/str';
import Common from './common';
import * as cfg from 'core/config';
import {DIContainer} from './container';
import {initContextActions} from './contextInit';
import {EditorOptions, getAdditionalCss} from './options';
import {getFilePicker} from 'editor_tiny/options';
import {FormCtrl} from './controller/formCtrl';
import {WidgetParamsCtrl} from './controller/widgetParamsCtrl';
import {WidgetPickerCtrl} from './controller/widgetPickerCtrl';
import WidgetPropertiesCtrl from './controller/widgetPropertiesCtrl';
import {DomSrv} from './service/domSrv';
import {ModalSrv} from './service/modalSrv';
import {TemplateSrv} from './service/templateSrv';
import {UserStorageSrv} from './service/userStorageSrv';
import {applyWidgetFilterFactory} from './util';
import * as coreStr from "core/str";
import jQuery from "jquery";
import Mustache from 'core/mustache';

export const getSetup = async() => {
    // Get some translations
    const [widgetNameTitle, buttonImage] = await Promise.all([
        // @ts-ignore
        getString('settings', Common.component),
        getButtonImage('icon', Common.component),
    ]);

    /** @param {import('./plugin').TinyMCE} editor */
    return (editor) => {
        // Register the Icon.
        editor.ui.registry.addIcon(Common.icon, buttonImage.html);

        const defaultAction = () => {
            const container = DIContainer.init(editor);
            const widgetPickCtrl = container.get("widgetPickCtrl");
            widgetPickCtrl.handleAction();
        };

        // Register the Toolbar Button.
        editor.ui.registry.addButton(Common.component, {
            icon: Common.icon,
            tooltip: widgetNameTitle,
            onAction: defaultAction,
        });

        // Add the Menu Item.
        // This allows it to be added to a standard menu, or a context menu.
        editor.ui.registry.addMenuItem(Common.component, {
            icon: Common.icon,
            text: widgetNameTitle,
            onAction: defaultAction,
        });

        // Initialize context menus, styles and scripts into editor's iframe
        initializer(editor);
    };
};


/**
 * Inject styles and scripts into editor's iframe
 * @param {import('./plugin').TinyMCE} editor
 */
function initializer(editor) {
    // Add the bootstrap, CSS, etc... into the editor's iframe
    editor.on('init', () => {
        const jQuery = DIContainer.get("jQuery");
        // On init editor.dom is ready
        // Inject css all generated by Moodle into the editor's iframe
        // http://localhost:4141/theme/styles.php/boost/1721728984_1/all
        // TODO: Missing themesubrevision
        const subversion = 1;
        // @ts-ignore
        const allCss = `${cfg.wwwroot}/theme/styles.php/${cfg.theme}/${cfg.themerev}_${subversion}/all`;
        editor.dom.loadCSS(allCss);

        // Inject styles and Javascript into the editor's iframe
        // editor.dom.loadCSS(`${baseUrl}/libs/fontawesome/css/font-awesome.min.css`);
        // Discover the jQuery version
        const jQueryVersion = jQuery.fn.jquery ?? '3.6.1';
        const scriptJQ = editor.dom.create("script", {src: `https://code.jquery.com/jquery-${jQueryVersion}.min.js`});
        const head = editor.getDoc().querySelector("head");
        scriptJQ.onload = () => {
            // Cannot load BS until JQ is fully loaded on editor's iframe
            // @ts-ignore
            const bsVersion = jQuery.fn.tooltip?.Constructor?.VERSION ?? '4.6.2';
            const scriptBS = editor.dom.create("script",
                {src: `https://cdn.jsdelivr.net/npm/bootstrap@${bsVersion}/dist/js/bootstrap.bundle.min.js`});
            head.appendChild(scriptBS);

            // Activate popover and tooltips
            scriptBS.onload = () => {
                const scriptInitBS = editor.dom.create("script");
                scriptInitBS.innerHTML = `
                $(document).ready(function() {
                    $('body').tooltip({
                        selector: '[data-toggle="tooltip"]',
                        trigger: 'hover'
                    });
                    $('body').popover({
                        selector: '[data-toggle="popover"]',
                        trigger: 'hover'
                    });
                });`;
                head.appendChild(scriptInitBS);
            };
            // Initialize context toolbars and menus
            initContextActions(editor);
        };

        head.appendChild(scriptJQ);
        // Inject css from site Admin
        const adminCss = getAdditionalCss(editor) || '';
        if (adminCss.trim()) {
            editor.dom.addStyle(adminCss);
        }
    });
}

export class FileSrv {
    /**
     * @param {import('./plugin').TinyMCE} editor
     */
    constructor(editor) {
        this.editor = editor;
    }
    getImagePicker() {
        return getFilePicker(this.editor, 'image');
    }
    displayImagePicker() {
        return displayFilepicker(this.editor, 'image');
    }
}

/**
 * Load on demand the template engine EJS
 * @typedef {Object} EJS
 * @property {(template: string, ctx: Object.<string,any>) => string} render
 */
/** @type {EJS | undefined} */
let _ejs;
export const ejsLoader = () => {
    if (_ejs) {
        return Promise.resolve(_ejs);
    }
    return new Promise((resolve, reject) => {
        // @ts-ignore
        window.require(['tiny_widgethub/ejs-lazy'], (ejsModule) => {
            _ejs = ejsModule;
            if (_ejs) {
                resolve(_ejs);
            } else {
                reject();
            }
        }, reject);
    });
};

// Setup container for usage
/** @typedef {{localStorage: Storage, sessionStorage: Storage}} IStorage */
DIContainer.registerSingleton("jQuery", jQuery);
DIContainer.registerSingleton("coreStr", coreStr);
DIContainer.registerSingleton("modalSrv", ModalSrv);
DIContainer.registerSingleton("mustache", Mustache);
DIContainer.registerSingleton("ejsLoader", ejsLoader);
DIContainer.registerSingleton("iStorage", {localStorage, sessionStorage});
DIContainer.registerSingleton("domSrv", DomSrv, "jQuery");
DIContainer.registerSingleton("templateSrv", TemplateSrv, "mustache, ejsLoader");
DIContainer.registerSingleton("userStorage", UserStorageSrv, "editorOptions, iStorage");
DIContainer.registerSingleton("applyWidgetFilter", applyWidgetFilterFactory, "editor, coreStr");

DIContainer.registerFactory("widgetParamsFactory", WidgetParamsCtrl, "editor, userStorage, templateSrv, modalSrv, formCtrl");
DIContainer.registerService("editorOptions", EditorOptions, "editor");
DIContainer.registerService("widgetPickCtrl", WidgetPickerCtrl,
    "editor, editorOptions, widgetParamsFactory, modalSrv, templateSrv, userStorage");
DIContainer.registerService("widgetPropertiesCtrl", WidgetPropertiesCtrl, "editor, formCtrl, modalSrv");
DIContainer.registerService("formCtrl", FormCtrl, "editor, userStorage, templateSrv, fileSrv, jQuery");
DIContainer.registerService("fileSrv", FileSrv, "editor");