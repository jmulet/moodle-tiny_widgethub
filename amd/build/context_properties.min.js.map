{"version":3,"file":"context_properties.min.js","sources":["../src/context_properties.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-bitwise */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pmulet@iedib.net>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {IBContextModal} from './modal';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {createControlHTML, getParametersFromForm, applyFieldWatchers} from './uiParams';\nimport {parseBinding} from './util';\n\n\n// TODO implement me!\nconst hasBindings = () => true;\n\n// Create a generic editor dialogue class based on editor field of widget definition\nexport default class ContextProperties {\n    /**\n     * @member {any} editor\n     */\n    editor;\n\n    constructor(editor) {\n        this.editor = editor;\n    }\n\n    async show(currentContext) {\n        const edSnpt = currentContext.snpt;\n        const hostId = this.editor.id;\n\n        if (!hasBindings(edSnpt)) {\n            console.error(\"Invalid genericEditor widget definition \", edSnpt);\n            return;\n        }\n\n        // Create bindings\n        const bindingsDOM = {};\n        // Extract param values from DOM\n        const paramValues = {};\n        edSnpt.parameters.filter(param => param.bind).forEach((param) => {\n            const binding = parseBinding(param.bind, currentContext.elem, typeof (param.value));\n            if (binding) {\n                bindingsDOM[param.name] = binding;\n                paramValues[param.name] = binding.getValue();\n            }\n        });\n        console.log(\"DETECTED FROM DOM PARAMS \", paramValues);\n\n        // Create parameters form controls\n        // Filter only those parameters which have default Values\n        const controls = [];\n        edSnpt.parameters.filter(param => param.bind).forEach((param) => {\n            controls.push(createControlHTML(hostId, param, paramValues[param.name]));\n        });\n        console.log(\"The generated controls are \", controls);\n\n        const data = {\n            name: edSnpt.name,\n            controls: controls\n        };\n\n        // Create the modal\n        this.modal = await ModalFactory.create({\n            type: IBContextModal.TYPE,\n            templateContext: data,\n            large: true,\n        });\n        this.modal.getRoot().on(ModalEvents.hidden, () => {\n            this.modal.destroy();\n        });\n        // Applying watchers to the form elements\n        applyFieldWatchers(this.modal.body, paramValues, edSnpt, false);\n\n        // Bind accept action to modal\n        this.modal.footer.find(\"button.btn-secondary\").on(\"click\", () => {\n            this.modal.destroy();\n        });\n        this.modal.footer.find(\"button.btn-primary\").on(\"click\", () => {\n            const form = this.modal.body.find(\"form\");\n            const updatedValues = getParametersFromForm(edSnpt, form, null);\n            this.modal.destroy();\n            // Set Param Values To DOM\n            Object.keys(bindingsDOM).forEach(key => {\n                bindingsDOM[key].setValue(updatedValues[key]);\n            });\n        });\n        console.log(\"Showing the modal\");\n        this.modal.show();\n    }\n}\n"],"names":["constructor","editor","currentContext","edSnpt","snpt","hostId","this","id","bindingsDOM","paramValues","parameters","filter","param","bind","forEach","binding","elem","value","name","getValue","console","log","controls","push","data","modal","ModalFactory","create","type","IBContextModal","TYPE","templateContext","large","getRoot","on","ModalEvents","hidden","destroy","body","footer","find","form","updatedValues","Object","keys","key","setValue","show"],"mappings":"kfA0CIA,YAAYC,6KACHA,OAASA,kBAGPC,sBACDC,OAASD,eAAeE,KACxBC,OAASC,KAAKL,OAAOM,SAQrBC,YAAc,GAEdC,YAAc,GACpBN,OAAOO,WAAWC,QAAOC,OAASA,MAAMC,OAAMC,SAASF,cAC7CG,SAAU,sBAAaH,MAAMC,KAAMX,eAAec,YAAcJ,MAAMK,OACxEF,UACAP,YAAYI,MAAMM,MAAQH,QAC1BN,YAAYG,MAAMM,MAAQH,QAAQI,eAG1CC,QAAQC,IAAI,4BAA6BZ,mBAInCa,SAAW,GACjBnB,OAAOO,WAAWC,QAAOC,OAASA,MAAMC,OAAMC,SAASF,QACnDU,SAASC,MAAK,+BAAkBlB,OAAQO,MAAOH,YAAYG,MAAMM,WAErEE,QAAQC,IAAI,8BAA+BC,gBAErCE,KAAO,CACTN,KAAMf,OAAOe,KACbI,SAAUA,eAITG,YAAcC,uBAAaC,OAAO,CACnCC,KAAMC,sBAAeC,KACrBC,gBAAiBP,KACjBQ,OAAO,SAENP,MAAMQ,UAAUC,GAAGC,sBAAYC,QAAQ,UACnCX,MAAMY,8CAGI/B,KAAKmB,MAAMa,KAAM7B,YAAaN,QAAQ,QAGpDsB,MAAMc,OAAOC,KAAK,wBAAwBN,GAAG,SAAS,UAClDT,MAAMY,kBAEVZ,MAAMc,OAAOC,KAAK,sBAAsBN,GAAG,SAAS,WAC/CO,KAAOnC,KAAKmB,MAAMa,KAAKE,KAAK,QAC5BE,eAAgB,mCAAsBvC,OAAQsC,KAAM,WACrDhB,MAAMY,UAEXM,OAAOC,KAAKpC,aAAaM,SAAQ+B,MAC7BrC,YAAYqC,KAAKC,SAASJ,cAAcG,YAGhDzB,QAAQC,IAAI,0BACPI,MAAMsB"}