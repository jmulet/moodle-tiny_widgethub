{"version":3,"file":"context_init.min.js","sources":["../src/context_init.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable max-len */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ContextPropsModal from \"./context_props_modal\";\nimport {getWidgetDict} from \"./options\";\nimport jQuery from 'jquery';\n// eslint-disable-next-line no-unused-vars\nimport {WidgetWrapper} from \"./util\";\n\n/**\n * @param {HTMLElement} elem\n * @param {string | string[]} [selectors]\n * @returns {boolean}\n */\nconst matchesSelectors = function(elem, selectors) {\n    if (!selectors) {\n        return false;\n    }\n    /** @type {string} **/\n    let selector;\n    /** @type {string[]} **/\n    let extraQuery = [];\n    if (Array.isArray(selectors)) {\n        selector = selectors[0];\n        if (selectors.length > 1) {\n            extraQuery = selectors.slice(1);\n        }\n    } else {\n        selector = selectors;\n    }\n    /* @type {boolean} */\n    let match = elem.matches(selector);\n    if (match) {\n        extraQuery.forEach(e => {\n            match = match && elem.querySelector(e) !== null;\n        });\n    }\n    return match;\n};\n\n/**\n * Defines the type PathResult\n * @typedef {Object} PathResult\n * @property {HTMLElement} selectedElement - The DOM element from which the search starts.\n * @property {HTMLElement=} elem - Indicates the element corresponding to the selector of the widget found\n * @property {WidgetWrapper=} widget - The current widget definition associated with the elem\n */\n/**\n * Walks the DOM tree up from the selectedElement and tries\n * to find the first element that matches the selector of\n * some widget.\n * @param {WidgetWrapper[]} widgetList - The list of widgets\n * @param {HTMLElement} selectedElement - The starting element in the search\n * @returns {PathResult} The element and widget found in the search.\n */\nconst findWidgetOnEventPath = function(widgetList, selectedElement) {\n    /** @type {PathResult} */\n    const res = {\n        selectedElement: selectedElement\n    };\n    /** @type {HTMLElement | null} */\n    let elem = selectedElement;\n    const n = widgetList.length;\n    while (elem !== null && elem !== undefined && elem !== null &&\n           elem.getAttribute(\"name\") !== \"BODY\" && res.widget === undefined) {\n        let i = 0;\n        while (i < n && res.widget === undefined) {\n            if (matchesSelectors(elem, widgetList[i].selectors)) {\n                res.widget = widgetList[i];\n                res.elem = elem;\n            }\n            i++;\n        }\n        elem = elem.parentElement;\n    }\n    return res;\n};\n\n/**\n * @typedef {Object} ICONS\n * @property {string} gear\n * @property {string} arrowUpFromBracket\n */\nconst ICONS = {\n    gear: 'gear',\n    arrowUpFromBracket: 'arrow-up-from-bracket'\n};\n\n/**\n * Define icons used in the editor\n * @param {import(\"./plugin\").TinyMCE} editor - The tinyMCE editor instance\n */\nconst defineIcons = function(editor) {\n    editor.ui.registry.addIcon(ICONS.gear, '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 512 512\"><path d=\"M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160 80 80 0 1 0 0 160z\"/></svg>');\n    editor.ui.registry.addIcon(ICONS.arrowUpFromBracket, '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 448 512\"><path d=\"M246.6 9.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 109.3 192 320c0 17.7 14.3 32 32 32s32-14.3 32-32l0-210.7 73.4 73.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-128-128zM64 352c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 64c0 53 43 96 96 96l256 0c53 0 96-43 96-96l0-64c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 64c0 17.7-14.3 32-32 32L96 448c-17.7 0-32-14.3-32-32l0-64z\"/></svg>');\n};\n\n\n/**\n * Decides if a widget needs some kind of context menu or toolbar\n * @param {WidgetWrapper} widget - The widget\n * @returns {boolean}\n */\nconst needsContextMenu = function(widget) {\n    return widget.hasBindings() || (widget.unwrap ?? '').trim().length > 0;\n};\n\nconst PredefinedActions = {\n    /**\n     * Unwraps the contents of a widget\n     * @param {PathResult} context\n     */\n    unwrap: (context) => {\n        if (!context?.elem || !context?.widget?.unwrap) {\n            return;\n        }\n        const $elem = jQuery(context.elem);\n        const toUnpack = $elem.find(context.widget.unwrap);\n        $elem.replaceWith(toUnpack);\n    }\n};\n\n/**\n * Looks for widgets that need to display context toolbars or menus\n * and binds the corresponding actions.\n * @param {import(\"./plugin\").TinyMCE} editor\n */\nexport const initContextActions = function(editor) {\n    /** @type {WidgetWrapper[]} */\n    const widgetList = Object.values(getWidgetDict(editor));\n\n    // Define icons\n    defineIcons(editor);\n\n    // Keep track of the last found context\n    /** @type {PathResult | undefined} */\n    let currentContext;\n\n    const contextPropsModal = new ContextPropsModal(editor);\n    // Generic button action for opening the properties modal\n    editor.ui.registry.addButton('widgethub_modal_btn', {\n        icon: ICONS.gear,\n        tooltip: 'Properties',\n        onAction: async function() {\n            const ctx = findWidgetOnEventPath(widgetList, editor.selection.getNode());\n            if (!ctx.widget) {\n                return;\n            }\n            // Display modal dialog on this context\n            await contextPropsModal.show(ctx);\n        }\n    });\n    editor.ui.registry.addMenuItem('widgethub_modal_item', {\n        icon: ICONS.gear,\n        text: 'Properties',\n        onAction: async function() {\n            if (!currentContext?.widget) {\n                currentContext = findWidgetOnEventPath(widgetList, editor.selection.getNode());\n                if (!currentContext.widget) {\n                    return;\n                }\n            }\n            // Display modal dialog on this context\n            await contextPropsModal.show(currentContext);\n    }\n    });\n\n    // Generic button action for unwrapping those widgets that support this feature\n    editor.ui.registry.addButton('widgethub_unwrap_btn', {\n        icon: ICONS.arrowUpFromBracket,\n        tooltip: 'Unwrap',\n        onAction: function() {\n            const ctx = findWidgetOnEventPath(widgetList, editor.selection.getNode());\n            if (!ctx.widget) {\n                return;\n            }\n            PredefinedActions.unwrap(ctx);\n        }\n    });\n    editor.ui.registry.addMenuItem('widgethub_unwrap_item', {\n        icon: ICONS.arrowUpFromBracket,\n        text: 'Unwrap',\n        onAction: function() {\n            if (!currentContext?.widget) {\n                currentContext = findWidgetOnEventPath(widgetList, editor.selection.getNode());\n                if (!currentContext.widget) {\n                    return;\n                }\n            }\n            PredefinedActions.unwrap(currentContext);\n        }\n    });\n\n    console.log(\"Registry addContextMenu\");\n    editor.ui.registry.addContextMenu('tiny_widgethub', {\n        /** @param {HTMLElement} element */\n        update: (element) => {\n            console.log(\"update contextmenu \", element);\n            // Look for a context\n            currentContext = findWidgetOnEventPath(widgetList, element);\n            if (!currentContext.widget || currentContext.widget.prop('contexttoolbar')) {\n                return '';\n            }\n            const widget = currentContext.widget;\n            const menuItems = [];\n            if (widget.hasBindings()) {\n                menuItems.push('modal');\n            }\n            if (widget.unwrap) {\n                menuItems.push('unwrap');\n            }\n            return menuItems.map(e => `widgethub_${e}_item`).join(' ');\n        }\n    });\n\n    // Look for widgets that need context toolbar or menu\n    widgetList.filter(widget => needsContextMenu(widget)).forEach(widget => {\n        const items = [];\n        if (widget.hasBindings()) {\n            items.push('modal');\n        }\n        if (widget.unwrap) {\n            items.push('unwrap');\n        }\n        if (widget.prop('contexttoolbar')) {\n            editor.ui.registry.addContextToolbar(`widgethub_ctb_${widget.key}`, {\n                /** @param {HTMLElement} node */\n                predicate: function(node) {\n                    return matchesSelectors(node, widget.selectors);\n                },\n                items: items.map(e => `widgethub_${e}_btn`).join(' '),\n                position: 'node'\n            });\n        }\n    });\n\n\n    // Dump all information\n    console.log(\"All ui registries-->\", editor.ui.registry.getAll());\n};"],"names":["matchesSelectors","elem","selectors","selector","extraQuery","Array","isArray","length","slice","match","matches","forEach","e","querySelector","findWidgetOnEventPath","widgetList","selectedElement","res","n","getAttribute","undefined","widget","i","parentElement","ICONS","PredefinedActions","context","_context$widget","unwrap","$elem","toUnpack","find","replaceWith","editor","Object","values","currentContext","ui","registry","addIcon","defineIcons","contextPropsModal","ContextPropsModal","addButton","icon","tooltip","onAction","async","ctx","selection","getNode","show","addMenuItem","text","_currentContext","_currentContext2","console","log","addContextMenu","update","element","prop","menuItems","hasBindings","push","map","join","filter","trim","needsContextMenu","items","addContextToolbar","key","predicate","node","position","getAll"],"mappings":"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"}