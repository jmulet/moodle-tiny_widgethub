define("tiny_widgethub/uiParams",["exports","core/modal_factory","./modal","core/modal_events","./util","./options","./uiPick","editor_tiny/utils","editor_tiny/options","jquery"],(function(_exports,_modal_factory,_modal,_modal_events,_util,_options,_uiPick,_utils,_options2,_jquery){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Tiny WidgetHub plugin.
   *
   * @module      tiny_widgethub/plugin
   * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.getParametersFromForm=_exports.createControlHTML=_exports.attachImagePickers=_exports.applyFieldWatchers=_exports.UiParamsCtrl=void 0,_modal_factory=_interopRequireDefault(_modal_factory),_modal_events=_interopRequireDefault(_modal_events),_jquery=_interopRequireDefault(_jquery);const questionPopover='{{#tooltip}}<a href="javascript:void(0)" data-toggle="popover" data-trigger="hover" data-content="{{tooltip}}"><i class="fa fas fa-question-circle text-info"></i></a>{{/tooltip}}',Templates={FIELDTEMPLATE:`<div id="{{elementid}}" class="form-group row{{#hidden}} tiny_widgethub-hidden{{/hidden}}"><label class="col-sm-5 col-form-label" for="{{elementid}}_ftmpl" title="{{varname}}">{{vartitle}} ${questionPopover}</label>\n   <div class="col-sm-7"><input type="text" id="{{elementid}}_ftmpl" class="form-control" data-bar="{{varname}}" {{#disabled}}disabled{{/disabled}} value="{{defaultvalue}}"/></div>\n   </div>`,IMAGETEMPLATE:`<div id="{{elementid}}" class="form-group row{{#hidden}} tiny_widgethub-hidden{{/hidden}}"><label class="col-sm-5 col-form-label" for="{{elementid}}_ftmpl" title="{{varname}}">{{vartitle}} ${questionPopover}</label>\n   <div class="col-sm-7">\n   <input type="text" id="{{elementid}}_ftmpl" class="form-control d-inline-block w-75" data-bar="{{varname}}" {{#disabled}}disabled{{/disabled}} value="{{defaultvalue}}"/>\n   <button class="whb-image-picker btn btn-sm btn-secondary d-inline-block" title="Search"><i class="fas fa fa-search"></i></button>\n   </div>\n   </div>`,NUMERICTEMPLATE:`<div id="{{elementid}}" class="form-group row{{#hidden}} tiny_widgethub-hidden{{/hidden}}"><label class="col-sm-5 col-form-label"  for="{{elementid}}_fntmpl" title="{{varname}}">{{vartitle}} ${questionPopover}</label>\n   <div class="col-sm-7"><input type="number" id="{{elementid}}_fntmpl" class="form-control" data-bar="{{varname}}" {{{minMax}}} {{#disabled}}disabled{{/disabled}} value="{{defaultvalue}}"/></div>\n   </div>`,COLORTEMPLATE:`<div id="{{elementid}}" class="form-group row{{#hidden}} tiny_widgethub-hidden{{/hidden}}"><label class="col-sm-5 col-form-label"  for="{{elementid}}_fntmpl" title="{{varname}}">{{vartitle}} ${questionPopover}</label>\n   <div class="col-sm-7"><input type="color" id="{{elementid}}_fntmpl" class="form-control" data-bar="{{varname}}" {{#disabled}}disabled{{/disabled}} value="{{defaultvalue}}"/></div>\n   </div>`,TEXTAREATEMPLATE:`<div id="{{elementid}}" class="form-group{{#hidden}} tiny_widgethub-hidden{{/hidden}}"><label for="{{elementid}}_tatmpl" title="{{varname}}">{{vartitle}} ${questionPopover}</label>\n   <textarea id="{{elementid}}_tatmpl" rows="3" class="form-control" data-bar="{{varname}}" {{#disabled}}disabled{{/disabled}} {{#tooltip}}title="{{tooltip}}"{{/tooltip}}>{{defaultvalue}}</textarea>\n   </div>`,CHECKBOXTEMPLATE:`<div id="{{elementid}}" class="d-table w-75 m-2{{#hidden}} tiny_widgethub-hidden{{/hidden}}">\n   <label>\n   <input title="{{varname}}" id="{{elementid}}_cbtmpl" {{#disabled}}disabled{{/disabled}} type="checkbox" data-bar="{{varname}}" value="{{defaultvalue}}" {{#defaultvalue}}checked{{/defaultvalue}}/></span>\n   {{vartitle}}</label> <span>&nbsp;&nbsp;  ${questionPopover}</span>\n   </div>`,SELECTTEMPLATE:`<div id="{{elementid}}" class="form-group row{{#hidden}} tiny_widgethub-hidden{{/hidden}}">\n   <label class="col-sm-5 col-form-label" for="{{elementid}}_stmpl" title="{{varname}}">{{vartitle}} ${questionPopover}</label>\n   <div class="col-sm-7">\n   <select id="{{elementid}}_stmpl" class="form-control" data-bar="{{varname}}" {{#if disabled}}disabled{{/if}} {{#if tooltip}}title="{{tooltip}}"{{/if}}>\n   {{#options}}\n   <option value="{{optionValue}}"{{#selected}} selected{{/selected}}>{{optionLabel}}</option>\n   {{/options}}\n   </select>\n   </div>\n   </div>`};_exports.UiParamsCtrl=class{uiPickCtrl;widget;editor;constructor(uiPickCtrl,widget){this.uiPickCtrl=uiPickCtrl,this.widget=widget,this.editor=uiPickCtrl.editor,this.userStorage=_util.UserStorage.getInstance((0,_options.getUserId)(this.editor),(0,_options.getCourseId)(this.editor))}async handleAction(){const data=await createParametersContext(this.editor,this.widget,this.userStorage),modal=await _modal_factory.default.create({type:_modal.IBParamsModal.TYPE,templateContext:data,large:!0});this.modal=modal,modal.getRoot().on(_modal_events.default.hidden,(()=>{modal.destroy()})),modal.body.find(`a[href="#${data.idTabpane}_1"`).on("click",(async()=>{const ctxFromDialogue=getParametersFromForm(this.widget,modal.body.find("form"),null);await this.updatePreview(data.idTabpane,ctxFromDialogue)})),attachImagePickers(this.editor,modal.body),modal.footer.show(),modal.footer.find("button.btn-secondary").on("click",(async()=>{modal.destroy(),await this.uiPickCtrl.handleAction()})),modal.footer.find("button.btn-primary").on("click",(async()=>{const ctxFromDialogue=getParametersFromForm(this.widget,modal.body.find("form"),this.userStorage);modal.hide(),await this.insertWidget(ctxFromDialogue),modal.destroy()}));const selectMode=""!=this.editor.selection.getContent().trim();applyFieldWatchers(modal.body,this.widget.defaults,this.widget,selectMode),modal.show()}destroy(){this.modal&&this.modal.destroy()}async generateInterpolatedCode(ctxFromDialogue){const sel=this.editor.selection.getContent();console.log("Selection",this.editor.selection,sel);let interpoledComponentCode=await this.widget.render(ctxFromDialogue);if(sel.trim()&&this.widget.insertquery){let query=this.widget.insertquery.trim(),replaceMode=query.startsWith("r!");replaceMode&&(query=query.substring(2).trim());const tmpDiv=document.createElement("div");tmpDiv.innerHTML=interpoledComponentCode;const insertPoint=tmpDiv.querySelector(this.widget.insertquery);insertPoint&&(replaceMode?insertPoint.outerHTML=sel:insertPoint.innerHTML=sel,interpoledComponentCode=tmpDiv.innerHTML)}return interpoledComponentCode}async updatePreview(idTabpane,ctxFromDialogue){const interpoledCode=await this.generateInterpolatedCode(ctxFromDialogue);this.modal.body.find(`#${idTabpane}_1`).html(interpoledCode)}async insertWidget(ctxFromDialogue){const recentWidgets=this.userStorage.getFromSession("recentsnpt","").split(",").filter((e=>e.trim())),pos=recentWidgets.indexOf(this.widget.key);if(pos>=0&&recentWidgets.splice(pos,1),recentWidgets.unshift(this.widget.key),recentWidgets.length>4&&recentWidgets.splice(5,recentWidgets.length-4),this.userStorage.setToSession("recentsnpt",recentWidgets.join(","),!0),this.widget.isFilter())return void(0,_util.applyWidgetFilter)(this.editor,this.widget.template||"",!1,ctxFromDialogue);const interpoledCode=await this.generateInterpolatedCode(ctxFromDialogue);this.editor.selection.setContent(interpoledCode),this.editor.focus()}};const createParametersContext=async(editor,widget,userStorage)=>{const mustSaveAll=userStorage.getFromLocal("saveall",!1),saveAllData=userStorage.getFromLocal("saveall_data",{}),valors=userStorage.getFromLocal("valors",{}),defaults=widget.defaults,controls=widget.parameters.map((param=>createControlHTML(editor.id,param,function(param){const sname=widget.name,pname=param.name;let currentval=defaults[pname];var _saveAllData$sname;return mustSaveAll&&null!=(null===(_saveAllData$sname=saveAllData[sname])||void 0===_saveAllData$sname?void 0:_saveAllData$sname[pname])&&(currentval=saveAllData[sname][pname]),pname.startsWith("$")&&valors[pname]&&(currentval=valors[pname]),currentval}(param))));return{idTabpane:(0,_util.genID)(),selectMode:editor.selection.getContent().trim().length>0,name:widget.name,instructions:widget.instructions,filter:widget.isFilter(),controls:controls}},createControlHTML=function(hostId,param,defaultValue){let template="";const pname=(0,_util.cleanParameterName)(param.name),generalCtx={elementid:hostId+"_"+pname,varname:pname,vartitle:param.title,defaultvalue:defaultValue,tooltip:param.tip||param.tooltip,disabled:!1===param.editable,hidden:!0===param.hidden};if("textarea"===param.type)template=(0,_util.templateRendererMustache)(Templates.TEXTAREATEMPLATE,generalCtx);else if("numeric"===param.type){let minMax="";param.min&&(minMax+=`min="${param.min}"`),param.max&&(minMax+=` max="${param.max}"`),template=(0,_util.templateRendererMustache)(Templates.NUMERICTEMPLATE,{minMax:minMax,...generalCtx})}else if("checkbox"===param.type)template=(0,_util.templateRendererMustache)(Templates.CHECKBOXTEMPLATE,generalCtx);else if("select"===param.type){const options=(param.options??[]).map((opt=>{let label,value;return"string"==typeof opt?(label=(0,_util.capitalize)(opt),value=opt):(label=opt.l,value=opt.v),{optionLabel:label,optionValue:value,selected:value===defaultValue}}));template=(0,_util.templateRendererMustache)(Templates.SELECTTEMPLATE,{options:options,...generalCtx})}else"color"===param.type?(generalCtx.defaultvalue=(0,_util.toHexColor)(generalCtx.defaultvalue),template=(0,_util.templateRendererMustache)(Templates.COLORTEMPLATE,generalCtx)):template="image"===param.type?(0,_util.templateRendererMustache)(Templates.IMAGETEMPLATE,generalCtx):(0,_util.templateRendererMustache)(Templates.FIELDTEMPLATE,generalCtx);return template};_exports.createControlHTML=createControlHTML;const getParametersFromForm=(widget,form,userStorage)=>{const ctx={},toPersist={},defaults=widget.defaults;if(widget.parameters.forEach((param=>{const pname=param.name,cleanPname=(0,_util.cleanParameterName)(pname),$elem=form.find(`[data-bar="${cleanPname}"]`);if(!$elem.length)return void(ctx[pname]=defaults[pname]);let value=$elem.val()||"";"INPUT"===$elem.prop("tagName")&&"checkbox"===$elem.attr("type")?value=$elem.is(":checked"):param.transform&&(value=(0,_util.stream)(param.transform).reduce(value)),ctx[pname]=value,pname.trim().startsWith("$")&&(toPersist[pname]=value)})),userStorage){Object.keys(toPersist).length&&userStorage.setToLocal("valors",toPersist,!0);if(userStorage.getFromLocal("saveall",!1)){const previousAllData=userStorage.getFromLocal("saveall_data",{});previousAllData[widget.name]={...ctx},userStorage.setToLocal("saveall_data",previousAllData,!0)}}return ctx};_exports.getParametersFromForm=getParametersFromForm;const attachImagePickers=function(editor,body){const canShowFilePicker=void 0!==(0,_options2.getFilePicker)(editor,"image"),picker=body.find("button.whb-image-picker").prop("disabled",!canShowFilePicker);canShowFilePicker&&picker.on("click",(async evt=>{evt.preventDefault();try{const params=await(0,_utils.displayFilepicker)(editor,"image");null!=params&&params.url&&(0,_jquery.default)(evt.currentTarget).parent().find("input").val(params.url)}catch(ex){console.error(ex)}}))};_exports.attachImagePickers=attachImagePickers;const applyFieldWatchers=function($formElem,defaultsData,widget,selectMode){const watchedvars=[],updatableComponents=[],regex=/\{{2}([^}]*)\}{2}/gm;for(let indx=0,len=widget.parameters.length;indx<len;indx++){const varobj=widget.parameters[indx];if(varobj.when){const condition=varobj.when,t=varobj.type,control=$formElem.find(`[data-bar="${(0,_util.cleanParameterName)(varobj.name)}"]`);if(!control.length||!t)continue;updatableComponents.push({condition:condition.replace(/[{}]{2}/g,""),component:control,indx:indx,type:t});const varsInvolved=condition.match(regex);null==varsInvolved||varsInvolved.forEach((evar=>{evar=evar.replace(/[{}]*/g,"").trim(),console.log("evar",evar,defaultsData),watchedvars.indexOf(evar)<0&&null!=defaultsData[evar]&&(console.log("ADDED AS WATCH"),watchedvars.push(evar))}))}watchedvars.push(varobj.name)}console.log(watchedvars),console.log(updatableComponents);const doUpdateVisibilities=()=>{updatableComponents.forEach((cc=>{console.log("Amagant ",cc);const condicio=cc.condition,novesVariables=getParametersFromForm(widget,$formElem,null);console.log("Obtained the new variables from the form ",novesVariables),novesVariables.SELECT_MODE=selectMode;const showme=(0,_util.evalInContext)(novesVariables,condicio);let theComponent=cc.component;theComponent&&(theComponent=theComponent.parent(),"checkbox"===cc.type&&(theComponent=theComponent.parent()),console.log("Changing visibilities of ",theComponent," condition ",condicio," evals to ",showme),theComponent.attr("data-amagat")||(showme?theComponent.show():theComponent.hide()))}))};widget.parameters.forEach((varobj=>{const control=$formElem.find(`[data-bar="${(0,_util.cleanParameterName)(varobj.name)}"]`);if(watchedvars.indexOf(varobj.name)<0||!control)return;console.log("that must be watched",varobj);let evtName="change";"textfield"!==varobj.type&&"textarea"!==varobj.type||(evtName="keyup"),control.on(evtName,(e=>{console.log(e),doUpdateVisibilities()}))})),doUpdateVisibilities()};_exports.applyFieldWatchers=applyFieldWatchers}));

//# sourceMappingURL=uiParams.min.js.map