{"version":3,"file":"container.min.js","sources":["../src/container.js"],"sourcesContent":["import { WidgetParamsCtrl } from \"./controller/widgetParamsCtrl\";\nimport { WidgetPickerCtrl } from \"./controller/widgetPickerCtrl\";\nimport { FormCtrl } from \"./controller/formCtrl\";\nimport {ModalSrv} from \"./service/modalSrv\";\nimport Mustache from \"core/mustache\";\nimport {TemplateSrv} from \"./service/templateSrv\";\nimport {UserStorageSrv} from \"./service/userStorageSrv\";\nimport jQuery from \"jquery\";\nimport { displayFilepicker } from \"editor_tiny/utils\";\nimport { getFilePicker } from \"editor_tiny/options\";\nimport WidgetPropertiesCtrl from \"./controller/widgetPropertiesCtrl\";\nimport { EditorOptions } from \"./options\";\nimport { initContextActions } from \"./contextInit\";\n\nexport class FileSrv {\n    /**\n     * @param {import('./plugin').TinyMCE} editor\n     */\n    constructor(editor) {\n        this.editor = editor;\n    }\n    getImagePicker() {\n        return getFilePicker(this.editor, 'image');\n    }\n    displayImagePicker() {\n        return displayFilepicker(this.editor, 'image');\n    }\n}\n\n/**\n * Load on demand the template engine EJS\n * @typedef {Object} EJS\n * @property {(template: string, ctx: Object.<string,any>) => string} render\n */\n/** @type {EJS | undefined} */\nlet _ejs;\nexport const ejsLoader = () => {\n    if (_ejs) {\n        return Promise.resolve(_ejs);\n    }\n    return new Promise((resolve, reject) => {\n        // @ts-ignore\n        window.require(['tiny_widgethub/ejs-lazy'], (ejsModule) => {\n            _ejs = ejsModule;\n            if (_ejs) {\n                resolve(_ejs);\n            } else {\n                reject();\n            }\n        }, reject);\n    });\n};\n\n/**\n * Determines if something is a class or not\n * @param {*} obj\n * @returns {boolean}\n */\nfunction isClass(obj) {\n    const isCtorClass = obj.constructor?.toString()?.substring(0, 5) === 'class';\n    if (obj.prototype === undefined) {\n        return isCtorClass;\n    }\n    const isPrototypeCtorClass = obj.prototype?.constructor?.toString()?.substring(0, 5) === 'class';\n    return isCtorClass || isPrototypeCtorClass;\n}\n\n/**\n * Container for dependency injection\n * @typedef {{name: string, type: 'singleton' | 'service' | 'factory', obj: *, deps: string[]}} DIRegistryEntry\n */\nexport class DIContainer {\n    /**\n     * @type {Map<string, DIRegistryEntry>}\n     */\n    static #registry = new Map();\n    /**\n     * @type {Map<string, *>}\n     */\n    static #singletonInstances = new Map();\n    /**\n     * @type {Map<string, *>}\n     */\n    #serviceInstances = new Map();\n\n    /**\n     * @param {string=} dependencies\n     * @returns {string[]}\n     */\n    static #parseDeps(dependencies) {\n        if (!dependencies?.trim()) {\n            return [];\n        }\n        return dependencies.split(',').map(e => e.trim());\n    }\n\n    /**\n     * @param {string} name\n     * @param {*} obj\n     * @param {string=} dependencies\n     */\n    static registerSingleton(name, obj, dependencies) {\n        this.#registry.set(name, { name, type: 'singleton', obj, deps: DIContainer.#parseDeps(dependencies) });\n    }\n\n    /**\n     * @param {string} name\n     * @param {*} obj\n     * @param {string=} dependencies\n     */\n    static registerService(name, obj, dependencies) {\n        this.#registry.set(name, { name, type: 'service', obj, deps: DIContainer.#parseDeps(dependencies) });\n    }\n\n    /**\n    * @param {string} name\n    * @param {*} obj\n    * @param {string=} dependencies\n    */\n    static registerFactory(name, obj, dependencies) {\n        this.#registry.set(name, { name, type: 'factory', obj, deps: DIContainer.#parseDeps(dependencies) });\n    }\n\n    /**\n     * Register a instance in the container\n     * @param {string} name\n     * @param {*} obj\n     */\n    registerInstance(name, obj) {\n        this.#serviceInstances.set(name, obj);\n    }\n\n    /**\n     * @param {string} name\n     * @returns {*} - An instance of the \"name\" in the correct scope\n     */\n    get(name) {\n        if (name.indexOf(\",\") > 0) {\n            return name.split(\",\").map(e => this.get(e.trim()));\n        }\n        // Check if already exists an instance with this name.\n        if (this.#serviceInstances.has(name)) {\n            return this.#serviceInstances.get(name);\n        }\n        const reg = DIContainer.#registry.get(name);\n        if (!reg) {\n            throw new Error(`Cannot find a registry for dependency ${name}`);\n        }\n        switch (reg.type) {\n            case ('singleton'): return this.#getInstance(DIContainer.#singletonInstances, reg);\n            case ('service'): return this.#getInstance(this.#serviceInstances, reg);\n            case ('factory'): {\n                const deps = (reg.deps ?? []).map(name => this.get(name));\n                if (isClass(reg.obj)) {\n                    // Has to instantiate a class.\n                    /** @param {*[]} args */\n                    return (...args) => {\n                        return new reg.obj(...deps, ...args);\n                    };\n                } else if (typeof (reg.obj) === 'function') {\n                    // Has to call the function.\n                    /** @param {*[]} args */\n                    return (...args) => {\n                        return reg.obj(...deps, ...args);\n                    };\n                }\n            }\n        }\n        throw new Error(`Invalid registry type ${reg.type}`);\n    }\n\n    /**\n     * @param {Map<string, *>} map\n     * @param {DIRegistryEntry} reg\n     * @returns {*}\n     */\n    #getInstance(map, reg) {\n        if (map.has(reg.name)) {\n            return map.get(reg.name);\n        }\n        // Create an instance\n        const instance = this.#createInstance(reg);\n        map.set(reg.name, instance);\n        return instance;\n    }\n\n    /**\n     * @param {DIRegistryEntry} reg\n     * @returns {*}\n     */\n    #createInstance(reg) {\n        // Need to get all the dependencies.\n        const deps = (reg.deps ?? []).map(name => this.get(name));\n        if (isClass(reg.obj)) {\n            // Has to instantiate a class.\n            return new reg.obj(...deps);\n        } else if (typeof (reg.obj) === 'function' && deps.length) {\n            // Prevent from calling functions like jQuery if no dependencies are passed\n            // Has to call the function.\n            return reg.obj(...deps);\n        } else {\n            // Return directly.\n            return reg.obj;\n        }\n    }\n}\n\n/** @typedef {{localStorage: Storage, sessionStorage: Storage}} IStorage */\n\nDIContainer.registerSingleton(\"jQuery\", jQuery);\nDIContainer.registerService(\"editorOptions\", EditorOptions, \"editor\");\nDIContainer.registerFactory(\"widgetParamsFactory\", WidgetParamsCtrl, \"editor, userStorage, templateSrv, modalSrv, formCtrl\");\nDIContainer.registerService(\"widgetPickCtrl\", WidgetPickerCtrl,\n    \"editor, editorOptions, widgetParamsFactory, modalSrv, templateSrv, userStorage\");\nDIContainer.registerService(\"widgetPropertiesCtrl\", WidgetPropertiesCtrl, \"editor, formCtrl, modalSrv\");\nDIContainer.registerService(\"formCtrl\", FormCtrl, \"editor, userStorage, templateSrv, fileSrv, jQuery\");\nDIContainer.registerSingleton(\"modalSrv\", ModalSrv);\nDIContainer.registerSingleton(\"mustache\", Mustache);\nDIContainer.registerSingleton(\"ejsLoader\", ejsLoader);\nDIContainer.registerSingleton(\"templateSrv\", TemplateSrv, \"mustache, ejsLoader\");\nDIContainer.registerSingleton(\"iStorage\", { localStorage, sessionStorage });\nDIContainer.registerSingleton(\"userStorage\", UserStorageSrv, \"editorOptions, iStorage\");\nDIContainer.registerService(\"fileSrv\", FileSrv, \"editor\");\nDIContainer.registerFactory(\"initContextActions\", initContextActions, \"editor, editorOptions, widgetPropertiesCtrl, jQuery\");"],"names":["FileSrv","constructor","editor","getImagePicker","this","displayImagePicker","_ejs","ejsLoader","Promise","resolve","reject","window","require","ejsModule","isClass","obj","isCtorClass","toString","substring","undefined","prototype","isPrototypeCtorClass","DIContainer","Map","dependencies","trim","split","map","e","name","registry","set","type","deps","parseDeps","registerInstance","serviceInstances","get","indexOf","has","reg","Error","getInstance","singletonInstances","args","instance","createInstance","length","registerSingleton","jQuery","registerService","EditorOptions","registerFactory","WidgetParamsCtrl","WidgetPickerCtrl","WidgetPropertiesCtrl","FormCtrl","ModalSrv","Mustache","TemplateSrv","localStorage","sessionStorage","UserStorageSrv","initContextActions"],"mappings":"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"}