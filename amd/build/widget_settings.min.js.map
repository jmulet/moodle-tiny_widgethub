{"version":3,"file":"widget_settings.min.js","sources":["../src/widget_settings.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-alert */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport jQuery from 'jquery';\nimport {YmlEditor, YAML} from './libs/ymleditor-lazy';\n// eslint-disable-next-line camelcase\nimport {get_strings as getStrings, get_string} from 'core/str';\nimport {getTemplateSrv} from './service/template_service';\nimport {applyPartials} from './options';\nimport common from './common';\n\n/**\n * Does a key name of the yaml file requires a block format?\n * @param {string} str\n * @returns {boolean}\n */\nfunction needsBlock(str) {\n  return typeof str === 'string' && str.includes('\\n');\n}\n\nconst {component} = common;\nconst templateSrv = getTemplateSrv();\nconst DEFAULT_DOC =\n    `key: username_sample-key\nname: Minimal sample widget\ncategory: Examples\ntemplate: |\n  <p><br></p>\n  <p>Write your template {{greeting}}</p>\n  <p><br></p>\nparameters:\n  - name: greeting\n    value: Hello world!\nauthor: Your name <email@site.com>\nversion: 1.0.0`;\n\n/**\n * Checks whether HTML tags are balanced, ignoring EJS blocks like <% %>.\n * @param {string} input The HTML+EJS string.\n * @returns {string[]} Stack of tags not closing.\n */\nfunction unbalancedHTMLWithEJS(input) {\n    // Remove EJS tags.\n    const withoutEJS = input.replace(/<%[\\s\\S]*?%>/g, '');\n\n    // HTML self-closing tags.\n    const selfClosing = new Set([\n        'area', 'base', 'br', 'col', 'embed', 'hr', 'img',\n        'input', 'link', 'meta', 'source', 'track', 'wbr'\n    ]);\n\n    const tagRegex = /<\\/?([a-zA-Z][a-zA-Z0-9]*)\\b[^>]*>/g;\n    const stack = [];\n    let match;\n\n    while ((match = tagRegex.exec(withoutEJS)) !== null) {\n        const fullTag = match[0];\n        const tagName = match[1].toLowerCase();\n        const isClosing = fullTag.startsWith('</');\n\n        // Skip self-closing\n        if (selfClosing.has(tagName) || fullTag.endsWith('/>')) {\n            continue;\n        }\n\n        if (!isClosing) {\n            stack.push(tagName);\n        } else {\n            if (stack.length === 0 || stack.pop() !== tagName) {\n                if (stack.length === 0) {\n                    stack.push(tagName);\n                }\n                return stack;\n            }\n        }\n    }\n    return stack;\n}\n\n/**\n * Replaces placeholders \"@i\" from 1 to n in the str\n * @param {string} str\n * @param  {...string} comodins\n * @returns {string}\n */\nfunction replacePlaceholders(str, ...comodins) {\n    return str.replace(/@(\\d+)/g, (match, index) => {\n        const i = parseInt(index, 10);\n        return comodins[i - 1] !== undefined ? comodins[i - 1] : match;\n    });\n}\n\n/**\n * @class\n * @member {any[]} presetdata\n * */\nexport default {\n    /**\n     * @param {number} id\n     * @returns {{\n     *     $ymlArea: JQuery<HTMLTextAreaElement>,\n     *     $jsonArea: JQuery<HTMLTextAreaElement>,\n     *     $partialInput: JQuery<HTMLInputElement>,\n     * }}\n     */\n    getAreas: function(id) {\n        /** @type {*} */\n        const $ymlArea = jQuery(`#id_s_${component}_defyml_${id}`);\n        /** @type {*} */\n        const $jsonArea = jQuery(`#id_s_${component}_def_${id}`);\n        /** @type {*} */\n        const $partialInput = jQuery(`#id_s_${component}_partials_${id}`);\n        return {\n            $ymlArea, $jsonArea, $partialInput\n        };\n    },\n    /**\n     * @param {number} id\n     * @param {*} codeProEditor\n     * @returns\n     */\n    updateYaml: function(id, codeProEditor) {\n        const {$jsonArea} = this.getAreas(id);\n        const json = (($jsonArea.val() ?? '') + '').trim();\n        if (!json) {\n            if (id) {\n                codeProEditor.setValue('');\n            } else {\n                codeProEditor.setValue(DEFAULT_DOC);\n            }\n            return;\n        }\n        try {\n            const _obj = JSON.parse(json);\n            const blockKeys = {\n                template: 'BLOCK_LITERAL',\n                filter: 'BLOCK_LITERAL',\n                instructions: 'BLOCK_FOLDED',\n            };\n\n            for (const [key, style] of Object.entries(blockKeys)) {\n                if (needsBlock(_obj[key])) {\n                    /** @type {any} */\n                    const scalar = new YAML.Scalar(_obj[key]);\n                    scalar.type = style;\n                    if (style === 'BLOCK_FOLDED') {\n                        scalar.chomping = 'CLIP';\n                    }\n                    _obj[key] = scalar;\n                }\n            }\n            if (Array.isArray(_obj.parameters)) {\n                for (const param of _obj.parameters) {\n                    if (param.bind && typeof param.bind === 'object') {\n                    ['get', 'set'].forEach(key => {\n                        if (needsBlock(param.bind[key])) {\n                            param.bind[key] = new YAML.Scalar(param.bind[key]);\n                            param.bind[key].type = 'BLOCK_LITERAL';\n                        }\n                    });\n                    }\n                }\n            }\n            const yml = YAML.stringify(_obj, {indent: 2});\n            codeProEditor.setValue(yml);\n        } catch (ex) {\n            console.error(ex);\n            $jsonArea.val('');\n            codeProEditor.setValue('');\n        }\n    },\n    /**\n     * @param {string} yml\n     * @param {{id: number, keys: string[]}} opts\n     * @param {Record<string, *>} partials\n     * @returns {Promise<{msg: string, json?: string, html?: string}>}\n     */\n    // eslint-disable-next-line complexity\n    validate: async function(yml, opts, partials) {\n        /**\n         * @type {{\n         *     msg: string,\n         *     html: string,\n         *     json: string | undefined\n         * }}\n         * */\n        const validation = {msg: '', html: '', json: undefined};\n        try {\n            // Check if the code is a valid Yaml\n            /** @type {import('./options').RawWidget} */\n            let jsonObj;\n            try {\n                jsonObj = YAML.parse(yml);\n            } catch (ex) {\n                validation.msg = await get_string('erryaml', component) + ':: ' + ex;\n                return validation;\n            }\n            validation.json = JSON.stringify(jsonObj, null, 0);\n\n            // Check if the structure is correct\n            if (!jsonObj?.key) {\n                validation.msg = await get_string('errproprequired', component, \"'key'\") + ' ';\n            } else if (jsonObj.key === 'partials') {\n                // Do not apply validation on partials file\n                return validation;\n            } else if (jsonObj.key !== 'partials') {\n                if (!jsonObj.name) {\n                    validation.msg += await get_string('errproprequired', component, \"'name'\") + ' ';\n                } else if (!(jsonObj.template || jsonObj.filter)) {\n                    validation.msg += await get_string('errproprequired', component, \"'template' | 'filter'\") + ' ';\n                } else if (jsonObj.template && jsonObj.filter) {\n                    validation.msg += await get_string('errpropincompatible', component, \"'template' & 'filter'\") + ' ';\n                } else if (!jsonObj.author || !jsonObj.version) {\n                    validation.msg += await get_string('errproprequired', component, \"'author' & 'version'\") + ' ';\n                }\n            }\n            // Check for duplicated keys (TODO: also check for key renaming when id > 0)\n            if (opts.id === 0 && jsonObj?.key) {\n                const keys = opts.keys || [];\n                if (keys.includes(jsonObj.key)) {\n                    validation.msg += await get_string('errkeyinuse', component, jsonObj.key) + ' ';\n                }\n            }\n            // Handle partials in parameters.\n            applyPartials(jsonObj, partials);\n            // Tests on template.\n            if (jsonObj.template) {\n                // Check if open and close tags are balanced.\n                const stack = unbalancedHTMLWithEJS(jsonObj.template);\n                if (stack.length > 0) {\n                    validation.msg += await get_string('errunbalancedhtml', component) + ': ' + stack;\n                    return validation;\n                }\n                // Try to parse the template with the correct renderer.\n                const translations = jsonObj?.I18n ?? {};\n                /** @type {Object.<string, any>} */\n                const ctx = {};\n                (jsonObj.parameters ?? []).forEach(param => {\n                    ctx[param.name] = param.value;\n                });\n                const engine = jsonObj?.engine;\n                try {\n                    const html = await templateSrv.render(jsonObj?.template || '', ctx, translations, engine);\n                    validation.html = html;\n                } catch (ex0) {\n                    validation.msg = await get_string('errpreview', component) + ':: ' + ex0;\n                }\n            }\n\n            // Check parameters\n            if (jsonObj.parameters) {\n                // Select types\n                const errStr1 = await get_string('errparamtype', component);\n                const errStr2 = await get_string('errparamvalue', component);\n                jsonObj.parameters\n                    .filter(p => p.type === 'select' || p.type === 'autocomplete' || p.options)\n                    .forEach(p => {\n                        if (!p.options || !Array.isArray(p.options)) {\n                            validation.msg += replacePlaceholders(errStr1, p.name + '.options', 'Array');\n                            return;\n                        }\n                        if (p.type === 'select') {\n                            const options = p.options.map(o => typeof (o) === 'string' ? o : o.v);\n                            if (!p.value || options.indexOf(p.value) < 0) {\n                                validation.msg += replacePlaceholders(errStr2, p.name + '.value', 'in options');\n                                return;\n                            }\n                        }\n                    });\n            }\n        } catch (ex) {\n            validation.msg = await get_string('errunexpected', component) + ':: ' + ex;\n        }\n        return validation;\n    },\n\n    /**\n     * Load all widgets\n     * @param {{id: number, keys: string[]}} opts\n     * @returns\n     */\n    init: async function(opts) {\n        const {$ymlArea, $jsonArea, $partialInput} = this.getAreas(opts.id);\n        $ymlArea.css({\n            \"border\": \"1px solid gray\"\n        });\n        $ymlArea.addClass(component + '-loader');\n        const i18n = await getStrings([\n            {key: 'confirmdelete', component: component},\n            {key: 'delete', component: component},\n            {key: 'preview', component: component},\n            {key: 'savechanges', component: component}\n        ]);\n        const [confirmdeleteStr, deleteStr, previewStr, savechangesStr] = i18n;\n\n        // Partials are passed through a hidden input element\n        const partials = JSON.parse($partialInput.val() || '{}');\n\n        // Hide the control that handles JSON and it is actually saved\n        $jsonArea.css(\"display\", \"none\");\n        const $target = $jsonArea.parent();\n        const $form = $jsonArea.closest(\"form\");\n        // Hide any submit button if found\n        $form.find('button[type=\"submit\"], input[type=\"submit\"]').hide();\n        // Add submit buttons and manually trigger form submit.\n        const $formButtons = jQuery(`<div class=\"row\"><div class=\"form-buttons offset-sm-3 col-sm-3\">\n            <button type=\"button\" class=\"btn btn-primary form-submit\">${savechangesStr}</button></div></div>`);\n        $form.append($formButtons);\n        const $saveBtn = $formButtons.find(\"button\");\n\n        // Create a preview panel\n        const $previewPanel = jQuery(`<div id=\"${component}_pp_${opts.id}\" class=\"${component}-previewpanel d-none\"></div>`);\n        $target.append($previewPanel);\n\n        const $previewBtn = jQuery(`<button type=\"button\" class=\"btn btn-secondary m-1\">\n            <i class=\"fas fa fa-magnifying-glass\"></i> ${previewStr}</button>`);\n        $previewBtn.on('click', async() => {\n            const yml = ymleditor.getValue();\n            const validation = await this.validate(yml, opts, partials);\n            if (validation.json && JSON.parse(validation.json).key === 'partials') {\n                // Cannot preview the partials file.\n                return;\n            }\n            if (validation.msg) {\n                alert(validation.msg);\n            } else if (validation.html) {\n                $previewPanel.removeClass('d-none');\n                $jsonArea.trigger('focusin');\n                $jsonArea.val(validation.json ?? '');\n                $jsonArea.trigger('change');\n                $previewPanel.html(validation.html);\n            }\n        });\n        $target.append($previewBtn);\n\n        if (opts.id > 0) {\n            // Only show delete button on saved widgets (id=0 is reserved for new ones)\n            const $deleteBtn = jQuery(`<button type=\"button\" class=\"btn btn-outline-danger m-1\">\n                <i class=\"fas fa fa-trash\"></i> ${deleteStr}</button>`);\n            $deleteBtn.on('click', async() => {\n                // Ask confirmation\n                const answer = confirm(confirmdeleteStr);\n                if (!answer) {\n                    return;\n                }\n                // Clear all the controls\n                $jsonArea.trigger('focusin');\n                $jsonArea.val('');\n                $jsonArea.trigger('change');\n                $ymlArea.val('');\n                $previewPanel.html('');\n                // Send form by skipping validation\n                $form.trigger('submit');\n            });\n            $target.append($deleteBtn);\n        }\n\n        const ymleditor = new YmlEditor($ymlArea[0]);\n\n        $saveBtn.on(\"click\",\n            async() => {\n                // Must update the content from the Yaml control\n                const yml = ymleditor.getValue();\n                // First validate the definition of the widget\n                const validation = await this.validate(yml, opts, partials);\n                if (validation.msg) {\n                    alert(validation.msg);\n                } else {\n                    // Ensure that there is a change in the form value to force\n                    // the set_updatedcallback to be called\n                    $jsonArea.trigger('focusin');\n                    $jsonArea.val((validation.json ?? '') + ' ');\n                    $jsonArea.trigger('change');\n                    // Submit form\n                    $form.trigger('submit');\n                }\n            });\n\n        this.updateYaml(opts.id, ymleditor);\n        $ymlArea.removeClass(component + '-loader');\n    }\n};\n"],"names":["needsBlock","str","includes","component","common","templateSrv","replacePlaceholders","comodins","replace","match","index","i","parseInt","undefined","getAreas","id","$ymlArea","$jsonArea","$partialInput","updateYaml","codeProEditor","this","json","val","trim","_obj","JSON","parse","blockKeys","template","filter","instructions","key","style","Object","entries","scalar","YAML","Scalar","type","chomping","Array","isArray","parameters","param","bind","forEach","yml","stringify","indent","setValue","ex","console","error","validate","async","opts","partials","validation","msg","html","jsonObj","_jsonObj","name","author","version","_jsonObj2","keys","stack","input","withoutEJS","selfClosing","Set","tagRegex","exec","fullTag","tagName","toLowerCase","isClosing","startsWith","has","endsWith","length","pop","push","unbalancedHTMLWithEJS","translations","I18n","ctx","value","engine","_jsonObj4","render","ex0","errStr1","errStr2","p","options","map","o","v","indexOf","init","css","addClass","i18n","confirmdeleteStr","deleteStr","previewStr","savechangesStr","$target","parent","$form","closest","find","hide","$formButtons","append","$saveBtn","$previewPanel","$previewBtn","on","ymleditor","getValue","alert","removeClass","trigger","$deleteBtn","confirm","YmlEditor"],"mappings":"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"}