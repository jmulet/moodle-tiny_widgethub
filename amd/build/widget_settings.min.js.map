{"version":3,"file":"widget_settings.min.js","sources":["../src/widget_settings.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-alert */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport jQuery from 'jquery';\nimport YmlEditor from './libs/ymleditor-lazy';\nimport {load, dump} from './libs/js_yaml-lazy';\n// eslint-disable-next-line camelcase\nimport {get_strings as getStrings, get_string} from 'core/str';\nimport {getTemplateSrv} from './service/template_service';\nimport {applyPartials} from './options';\n\nconst templateSrv = getTemplateSrv();\nconst DEFAULT_DOC =\n`key: minimal-sample-key\nname: Minimal sample widget\ncategory: Examples\ntemplate: |\n  <p><br></p>\n  <p>Write your template {{greeting}}</p>\n  <p><br></p>\nparameters:\n  - name: greeting\n    value: Hello world!\nauthor: Your name <email@site.com>\nversion: 1.0.0`;\n\n/**\n * @class\n * @member {any[]} presetdata\n * */\nexport default {\n    /**\n     * @param {number} id\n     * @returns {{\n     *     $ymlArea: JQuery<HTMLTextAreaElement>,\n     *     $jsonArea: JQuery<HTMLTextAreaElement>,\n     *     $partialInput: JQuery<HTMLInputElement>,\n     * }}\n     */\n    getAreas: function(id) {\n        /** @type {*} */\n        const $ymlArea = jQuery(`#id_s_tiny_widgethub_defyml_${id}`);\n        /** @type {*} */\n        const $jsonArea = jQuery(`#id_s_tiny_widgethub_def_${id}`);\n        /** @type {*} */\n        const $partialInput = jQuery(`#id_s_tiny_widgethub_partials_${id}`);\n        return {\n            $ymlArea, $jsonArea, $partialInput\n        };\n    },\n    /**\n     * @param {number} id\n     * @param {*} codeProEditor\n     * @returns\n     */\n    updateYaml: function(id, codeProEditor) {\n        const {$jsonArea} = this.getAreas(id);\n        const json = (($jsonArea.val() ?? '') + '').trim();\n        if (!json) {\n            if (id) {\n                codeProEditor.setValue('');\n            } else {\n                codeProEditor.setValue(DEFAULT_DOC);\n            }\n            return;\n        }\n        try {\n            const obj = JSON.parse(json);\n            const yml = dump(obj, {});\n            codeProEditor.setValue(yml);\n        } catch (ex) {\n            console.error(ex);\n            $jsonArea.val('');\n            codeProEditor.setValue('');\n        }\n    },\n    /**\n     * @param {string} yml\n     * @param {{id: number, keys: string[]}} opts\n     * @param {Record<string, *>} partials\n     * @returns {Promise<{msg: string, json?: string, html?: string}>}\n     */\n    // eslint-disable-next-line complexity\n    validate: async function(yml, opts, partials) {\n        /**\n         * @type {{\n         *     msg: string,\n         *     html: string,\n         *     json: string | undefined\n         * }}\n         * */\n        const validation = {msg: '', html: '', json: undefined};\n        try {\n            // Check if the code is a valid Yaml\n            /** @type {import('./options').RawWidget} */\n            let jsonObj;\n            try {\n                jsonObj = load(yml, null) ?? {};\n            } catch (ex) {\n                validation.msg = await get_string('erryaml', 'tiny_widgethub') + ':: ' + ex;\n                return validation;\n            }\n            validation.json = JSON.stringify(jsonObj, null, 0);\n\n            // Check if the structure is correct\n            if (!jsonObj?.key) {\n                validation.msg = await get_string('errproprequired', 'tiny_widgethub', \"'key'\") + ' ';\n            } else if (jsonObj.key === 'partials') {\n                return validation;\n            } else if (jsonObj.key !== 'partials') {\n                if (!jsonObj.name) {\n                    validation.msg += await get_string('errproprequired', 'tiny_widgethub', \"'name'\") + ' ';\n                } else if (!(jsonObj.template || jsonObj.filter)) {\n                    validation.msg += await get_string('errproprequired', 'tiny_widgethub', \"'template' | 'filter'\") + ' ';\n                } else if (jsonObj.template && jsonObj.filter) {\n                    validation.msg += await get_string('errpropincompatible', 'tiny_widgethub', \"'template' & 'filter'\") + ' ';\n                } else if (!jsonObj.author || !jsonObj.version) {\n                    validation.msg += await get_string('errproprequired', 'tiny_widgethub', \"'author' & 'version'\") + ' ';\n                }\n            }\n            // Check for duplicated keys\n            if (opts.id === 0 && jsonObj?.key) {\n                const keys = opts.keys || [];\n                if (keys.includes(jsonObj.key)) {\n                    validation.msg += await get_string('errkeyinuse', 'tiny_widgethub', jsonObj.key) + ' ';\n                }\n            }\n            // Handle partials in parameters\n            applyPartials(jsonObj, partials);\n            // Try to parse the template with the correct renderer\n            const translations = jsonObj?.I18n ?? {};\n            /** @type {Object.<string, any>} */\n            const ctx = {};\n            (jsonObj.parameters ?? []).forEach(param => {\n                ctx[param.name] = param.value;\n            });\n            const engine = jsonObj?.engine;\n            const html = await templateSrv.render(jsonObj?.template || '', ctx, translations, engine);\n            validation.html = html;\n        } catch (ex) {\n            validation.msg = await get_string('errpreview', 'tiny_widgethub') + ':: ' + ex;\n        }\n        return validation;\n    },\n\n    /**\n     * Load all widgets\n     * @param {{id: number, keys: string[]}} opts\n     * @returns\n     */\n    init: async function(opts) {\n        const i18n = await getStrings([\n            {key: 'confirmdelete', component: 'tiny_widgethub'},\n            {key: 'delete', component: 'tiny_widgethub'},\n            {key: 'preview', component: 'tiny_widgethub'},\n            {key: 'savechanges', component: 'tiny_widgethub'}\n        ]);\n        const [confirmdeleteStr, deleteStr, previewStr, savechangesStr] = i18n;\n\n        const {$ymlArea, $jsonArea, $partialInput} = this.getAreas(opts.id);\n        $ymlArea.css({\n            \"min-height\": \"200px\",\n            \"border\": \"1px solid gray\"\n        });\n        // Partials are passed through a hidden input element\n        const partials = JSON.parse($partialInput.val() || '{}');\n\n        // Hide the control that handles JSON and it is actually saved\n        $jsonArea.css(\"display\", \"none\");\n        const $target = $jsonArea.parent();\n        const $form = $jsonArea.closest(\"form\");\n        // Hide any submit button if found\n        $form.find('button[type=\"submit\"], input[type=\"submit\"]').hide();\n        // Add submit buttons and manually trigger form submit.\n        const $formButtons = jQuery(`<div class=\"row\"><div class=\"form-buttons offset-sm-3 col-sm-3\">\n            <button type=\"button\" class=\"btn btn-primary form-submit\">${savechangesStr}</button></div></div>`);\n        $form.append($formButtons);\n        const $saveBtn = $formButtons.find(\"button\");\n\n        // Create a preview panel\n        const $previewPanel = jQuery(`<div id=\"tiny_widgethub_pp_${opts.id}\" class=\"tiny_widgethub-previewpanel d-none\"></div>`);\n        $target.append($previewPanel);\n\n        const $previewBtn = jQuery(`<button type=\"button\" class=\"btn btn-secondary m-1\">\n            <i class=\"fas fa fa-magnifying-glass\"></i> ${previewStr}</button>`);\n        $previewBtn.on('click', async() => {\n            const yml = ymleditor.getValue();\n            const validation = await this.validate(yml, opts, partials);\n            if (validation.msg) {\n                alert(validation.msg);\n            } else if (validation.html) {\n                $previewPanel.removeClass('d-none');\n                $jsonArea.trigger('focusin');\n                $jsonArea.val(validation.json ?? '');\n                $jsonArea.trigger('change');\n                $previewPanel.html(validation.html);\n            }\n        });\n        $target.append($previewBtn);\n\n        if (opts.id > 0) {\n            // Only show delete button on saved widgets (id=0 is reserved for new ones)\n            const $deleteBtn = jQuery(`<button type=\"button\" class=\"btn btn-danger m-1\">\n                <i class=\"fas fa fa-trash\"></i> ${deleteStr}</button>`);\n            $deleteBtn.on('click', async() => {\n                // Ask confirmation\n                const answer = confirm(confirmdeleteStr);\n                if (!answer) {\n                    return;\n                }\n                // Clear all the controls\n                $jsonArea.trigger('focusin');\n                $jsonArea.val('');\n                $jsonArea.trigger('change');\n                $ymlArea.val('');\n                $previewPanel.html('');\n                // Send form by skipping validation\n                $form.trigger('submit');\n            });\n            $target.append($deleteBtn);\n        }\n\n        const ymleditor = new YmlEditor($ymlArea[0]);\n\n        $saveBtn.on(\"click\",\n            async() => {\n            // Must update the content from the Yaml control\n            const yml = ymleditor.getValue();\n            // First validate the definition of the widget\n            const validation = await this.validate(yml, opts, partials);\n            if (validation.msg) {\n                alert(validation.msg);\n            } else {\n                // Ensure that there is a change in the form value to force\n                // the set_updatedcallback to be called\n                $jsonArea.trigger('focusin');\n                $jsonArea.val((validation.json ?? '') + ' ');\n                $jsonArea.trigger('change');\n                // Submit form\n                $form.trigger('submit');\n            }\n        });\n\n        this.updateYaml(opts.id, ymleditor);\n    }\n};\n"],"names":["templateSrv","getAreas","id","$ymlArea","$jsonArea","$partialInput","updateYaml","codeProEditor","this","json","val","trim","obj","JSON","parse","yml","setValue","ex","console","error","validate","async","opts","partials","validation","msg","html","undefined","jsonObj","stringify","_jsonObj","key","name","template","filter","author","version","_jsonObj2","keys","includes","translations","I18n","ctx","parameters","forEach","param","value","engine","_jsonObj4","render","init","i18n","component","confirmdeleteStr","deleteStr","previewStr","savechangesStr","css","$target","parent","$form","closest","find","hide","$formButtons","append","$saveBtn","$previewPanel","$previewBtn","on","ymleditor","getValue","alert","removeClass","trigger","$deleteBtn","confirm","YmlEditor"],"mappings":"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"}