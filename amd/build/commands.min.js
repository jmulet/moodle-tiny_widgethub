define("tiny_widgethub/commands",["exports","editor_tiny/utils","core/str","./uiPick","./common","./options"],(function(_exports,_utils,_str,_uiPick,_common,_options){var obj;function _classPrivateFieldInitSpec(obj,privateMap,value){!function(obj,privateCollection){if(privateCollection.has(obj))throw new TypeError("Cannot initialize the same private elements twice on an object")}(obj,privateMap),privateMap.set(obj,value)}function _classPrivateFieldSet(receiver,privateMap,value){return function(receiver,descriptor,value){if(descriptor.set)descriptor.set.call(receiver,value);else{if(!descriptor.writable)throw new TypeError("attempted to set read only private field");descriptor.value=value}}(receiver,_classExtractFieldDescriptor(receiver,privateMap,"set"),value),value}function _classPrivateFieldGet(receiver,privateMap){return function(receiver,descriptor){if(descriptor.get)return descriptor.get.call(receiver);return descriptor.value}(receiver,_classExtractFieldDescriptor(receiver,privateMap,"get"))}function _classExtractFieldDescriptor(receiver,privateMap,action){if(!privateMap.has(receiver))throw new TypeError("attempted to "+action+" private field on non-instance");return privateMap.get(receiver)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.getSetup=_exports.WidgetPlugin=void 0,_common=(obj=_common)&&obj.__esModule?obj:{default:obj};var _pickCtrl=new WeakMap;class WidgetPlugin{constructor(editor){!function(obj,key,value){key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value}(this,"editor",void 0),_classPrivateFieldInitSpec(this,_pickCtrl,{writable:!0,value:void 0}),this.editor=editor}get pickCtrl(){return _classPrivateFieldGet(this,_pickCtrl)||_classPrivateFieldSet(this,_pickCtrl,new _uiPick.UiPickCtrl(this)),_classPrivateFieldGet(this,_pickCtrl)}}_exports.WidgetPlugin=WidgetPlugin;_exports.getSetup=async()=>{const[widgetNameTitle,buttonImage]=await Promise.all([(0,_str.get_string)("settings",_common.default.component),(0,_utils.getButtonImage)("icon",_common.default.component)]);return editor=>{const widgetPlugin=new WidgetPlugin(editor);(0,_options.isPluginVisible)(editor)&&(editor.ui.registry.addIcon(_common.default.icon,buttonImage.html),editor.ui.registry.addButton(_common.default.component,{icon:_common.default.icon,tooltip:widgetNameTitle,onAction:()=>widgetPlugin.pickCtrl.handleAction()}),editor.ui.registry.addMenuItem(_common.default.component,{icon:_common.default.icon,text:widgetNameTitle,onAction:()=>widgetPlugin.pickCtrl.handleAction()}))}}}));

//# sourceMappingURL=commands.min.js.map