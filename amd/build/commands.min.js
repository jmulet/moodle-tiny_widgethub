define("tiny_widgethub/commands",["exports","editor_tiny/utils","core/str","./uiPick","./common","./options"],(function(_exports,_utils,_str,_uiPick,_common,_options){function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.getSetup=void 0;class WidgetPlugin{constructor(editor){_defineProperty(this,"editor",void 0),_defineProperty(this,"_pickCtrl",void 0),this.editor=editor}get pickCtrl(){return this._pickCtrl||(this._pickCtrl=new _uiPick.UiPickCtrl(this)),this._pickCtrl}}_exports.getSetup=async()=>{const[widgetNameTitle,buttonImage]=await Promise.all([(0,_str.get_string)("settings",_common.component),(0,_utils.getButtonImage)("icon",_common.component)]);return editor=>{console.log(editor,(0,_options.isPluginVisible)(editor));const widgetPlugin=new WidgetPlugin(editor);(0,_options.isPluginVisible)(editor)&&(editor.ui.registry.addIcon(_common.icon,buttonImage.html),editor.ui.registry.addButton(_common.component,{icon:_common.icon,tooltip:widgetNameTitle,onAction:()=>widgetPlugin.pickCtrl.handleAction()}),editor.ui.registry.addMenuItem(_common.component,{icon:_common.icon,text:widgetNameTitle,onAction:()=>widgetPlugin.pickCtrl.handleAction()}))}}}));

//# sourceMappingURL=commands.min.js.map