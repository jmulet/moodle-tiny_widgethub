{"version":3,"file":"contextinit.min.js","sources":["../src/contextinit.js"],"sourcesContent":["/* eslint-disable max-len */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {getWidgetDict} from './options';\nimport {getDomSrv} from './service/dom_service';\nimport {getWidgetPropertiesCtrl} from './controller/widgetproperties_ctrl';\nimport {getMenuItemProviders, getListeners} from './extension';\nimport Common from './common';\n// eslint-disable-next-line camelcase\nimport {get_strings} from 'core/str';\n\nconst {component, componentName} = Common;\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Defines the type PathResult\n * @typedef {Object} PathResult\n * @property {Element} selectedElement - The DOM element from which the search starts.\n * @property {Element} [elem] - Indicates the element corresponding to the selector of the widget found\n * @property {Element | null | undefined} [targetElement] - Indicates the element corresponding the intermediate selector\n * @property {import('./options').Widget=} widget - The current widget definition associated with the elem\n */\n\n/**\n * @typedef {Object} ICONS\n * @property {string} gear\n * @property {string} arrowUpFromBracket\n * @property {string} arrowUp\n * @property {string} arrowDown\n * @property {string} arrowLeft\n * @property {string} arrowRight\n * @property {string} remove\n * @property {string} clone\n */\nconst ICONS = {\n    gear: 'gear',\n    arrowUpFromBracket: 'arrow-up-from-bracket',\n    arrowUp: 'arrow-up',\n    arrowDown: 'arrow-down',\n    arrowLeft: 'arrow-left',\n    arrowRight: 'arrow-right',\n    remove: 'remove',\n    clone: 'clone'\n};\n\n/**\n * Define icons used by the context menus. Source: FontAwesome 6\n * <!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->\n * @param {import(\"./plugin\").TinyMCE} editor - The tinyMCE editor instance\n */\nconst defineIcons = function(editor) {\n    editor.ui.registry.addIcon(ICONS.gear, '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 512 512\"><path d=\"M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160 80 80 0 1 0 0 160z\"/></svg>');\n    editor.ui.registry.addIcon(ICONS.arrowUpFromBracket, '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 448 512\"><path d=\"M246.6 9.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 109.3 192 320c0 17.7 14.3 32 32 32s32-14.3 32-32l0-210.7 73.4 73.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-128-128zM64 352c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 64c0 53 43 96 96 96l256 0c53 0 96-43 96-96l0-64c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 64c0 17.7-14.3 32-32 32L96 448c-17.7 0-32-14.3-32-32l0-64z\"/></svg>');\n    editor.ui.registry.addIcon(ICONS.arrowUp, '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 384 512\"><path d=\"M214.6 41.4c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 141.2 160 448c0 17.7 14.3 32 32 32s32-14.3 32-32l0-306.7L329.4 246.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-160-160z\"/></svg>');\n    editor.ui.registry.addIcon(ICONS.arrowDown, '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 384 512\"><path d=\"M169.4 470.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 370.8 224 64c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 306.7L54.6 265.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z\"/></svg>');\n    editor.ui.registry.addIcon(ICONS.arrowLeft, '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 448 512\"><path d=\"M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z\"/></svg>');\n    editor.ui.registry.addIcon(ICONS.arrowRight, '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 448 512\"><path d=\"M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z\"/></svg>');\n    editor.ui.registry.addIcon(ICONS.clone, '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20\" width=\"20\" viewBox=\"0 0 512 512\"><path d=\"M64 464l224 0c8.8 0 16-7.2 16-16l0-64 48 0 0 64c0 35.3-28.7 64-64 64L64 512c-35.3 0-64-28.7-64-64L0 224c0-35.3 28.7-64 64-64l64 0 0 48-64 0c-8.8 0-16 7.2-16 16l0 224c0 8.8 7.2 16 16 16zM224 304l224 0c8.8 0 16-7.2 16-16l0-224c0-8.8-7.2-16-16-16L224 48c-8.8 0-16 7.2-16 16l0 224c0 8.8 7.2 16 16 16zm-64-16l0-224c0-35.3 28.7-64 64-64L448 0c35.3 0 64 28.7 64 64l0 224c0 35.3-28.7 64-64 64l-224 0c-35.3 0-64-28.7-64-64z\"/></svg>');\n};\n\n/**\n * @param {import('./options').Widget} widget\n * @returns {boolean}\n */\nfunction hasBindings(widget) {\n    return widget.parameters?.some(param => {\n        if (param.type === 'repeatable') {\n            const hasFieldBindings = param.fields?.some(f => f.bind !== undefined);\n            return typeof param.bind === 'object' || (hasFieldBindings && typeof param.item_selector === 'string');\n        } else {\n            return param.bind !== undefined;\n        }\n    });\n}\n\n/**\n * Decides if a widget needs some kind of context menu or toolbar\n * @param {import('./options').Widget} widget - The widget\n * @returns {boolean}\n */\nconst needsContextMenu = function(widget) {\n    return widget.hasBindings() || (widget.unwrap ?? '').trim().length > 0;\n};\n\n/**\n * @param {string | RegExp | (() => boolean) | undefined} condition\n * @param {string} key\n * @returns {boolean}\n */\nconst matchesCondition = function(condition, key) {\n    if (typeof condition === 'string') {\n        return condition.split(',').map(e => e.trim()).includes(key);\n    } else if (condition instanceof RegExp) {\n        return condition.test(key);\n    } else if (typeof condition === 'function') {\n        return condition();\n    }\n    return false;\n};\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @param {import('./service/dom_service').DomSrv} domSrv\n */\nconst predefinedActionsFactory = function(editor, domSrv) {\n    /** @type {Record<string, Function>} */\n    const factory = {\n        /**\n         * Unwraps or destroys the contents of a widget\n         * @param {PathResult} context\n         */\n        unwrap: (context) => {\n            if (!context?.elem || !context?.widget?.unwrap) {\n                return;\n            }\n            /** @type {NodeListOf<Node>} */\n            const nodes = context.elem.querySelectorAll(context.widget.unwrap);\n\n            const parent = context.elem.parentNode;\n            if (!parent) {\n                return;\n            }\n\n            if (nodes.length === 0) {\n                // Fallback: single text node\n                const textNode = document.createTextNode(context.elem.textContent);\n                context.elem.replaceWith(textNode);\n            } else if (nodes.length === 1) {\n                // Only one node: normal unwrap\n                context.elem.replaceWith(nodes[0]);\n            } else {\n                // More than one node: wrap in DocumentFragment to replace\n                const fragment = document.createDocumentFragment();\n                nodes.forEach(node => fragment.appendChild(node));\n                context.elem.replaceWith(fragment);\n            }\n\n            // Call any subscribers\n            getListeners('widgetRemoved').forEach(listener => listener(editor, context.widget));\n        },\n        /**\n         * Moves the selected element above in the parent container\n         * unless it is the first one\n         * Only on tabbed widgets!\n         * If elem or any of its descendants references another element in\n         * the widget, then it also must be moved before its sibling\n         * @param {PathResult} context\n         */\n        movebefore: (context) => {\n            const el = context?.targetElement;\n            const root = context?.elem;\n            if (!el || !root) {\n                return;\n            }\n            const prev = el.previousElementSibling;\n            if (prev) {\n                // Swap el and prev (move el before prev)\n                el.parentNode?.insertBefore(el, prev);\n                if (prev.closest(\".nav\")) {\n                    domSrv.findReferences(el, root).forEach(ref => {\n                        const prev2 = ref.previousElementSibling;\n                        if (prev2) {\n                            ref.parentNode?.insertBefore(ref, prev2);\n                        }\n                    });\n                }\n            }\n        },\n        /**\n         * Moves the selected element above in the parent container\n         * unless it is the first one\n         * Only on tabbed widgets!\n         * If elem or any of its descendants references another element in\n         * the widget, then it also must be moved after its sibling\n         * @param {PathResult} context\n         */\n        moveafter: (context) => {\n            const el = context?.targetElement;\n            const root = context?.elem;\n            if (!el || !root) {\n                return;\n            }\n\n            const next = el.nextElementSibling;\n            if (next) {\n                // Move `el` after `next` (swap their order)\n                next.parentNode?.insertBefore(next, el);\n\n                // If inside a `.nav` ancestor, reorder references too\n                if (next.closest(\".nav\")) {\n                    domSrv.findReferences(el, root).forEach(ref => {\n                        const next2 = ref.nextElementSibling;\n                        if (next2) {\n                            next2.parentNode?.insertBefore(next2, ref);\n                        }\n                    });\n                }\n            }\n        },\n        /**\n         * Inserts a clone of the selected element after it\n         * @param {PathResult} context\n         */\n        insertafter: (context) => {\n            const el = context?.targetElement;\n            const root = context?.elem;\n            if (!el || !root) {\n                return;\n            }\n\n            /** @type {Record<string, string>} */\n            const idMap = {};\n            const clone = domSrv.smartClone(el, root, idMap);\n\n            // Insert the clone *after* the original element\n            el.parentNode?.insertBefore(clone, el.nextSibling);\n\n            // Remove \"active\" and \"show\" classes\n            clone.classList.remove(\"active\", \"show\");\n        },\n        /**\n         * Removes the selected element\n         * @param {PathResult} context\n         */\n        remove: (context) => {\n            const el = context?.targetElement;\n            const root = context?.elem;\n            if (!el || !root) {\n                return;\n            }\n\n            // Remove any references inside the widget\n            domSrv.findReferences(el, root).forEach(ref => ref.remove());\n\n            // Remove the element itself\n            const parent = el.parentNode;\n            el?.remove();\n\n            // If parent is now empty, remove the root widget\n            if (parent && parent.children.length === 0) {\n                root.remove();\n            }\n        },\n        /**\n         * Toggles a snippet as printable or not\n         * @param {PathResult} context\n         */\n        printable: (context) => {\n            const el = context?.elem;\n            if (!el) {\n                return;\n            }\n            el.classList.toggle('d-print-none');\n        }\n    };\n    factory.moveup = factory.movebefore;\n    factory.movedown = factory.moveafter;\n    // Alias.\n    factory.moveleft = factory.movebefore;\n    factory.moveright = factory.moveafter;\n    return factory;\n};\n\n/**\n * @typedef {{editor: import('./plugin').TinyMCE, path?: PathResult, actionPaths: Record<string, PathResult>}} ItemMenuContext\n */\n\n/**\n * Looks for widgets that need to display context toolbars or menus\n * and binds the corresponding actions.\n * @param {import(\"./plugin\").TinyMCE} editor\n */\nexport async function initContextActions(editor) {\n    // Setup context shared by the entire structure of menus\n    /**\n     * Keep track of the last context found\n     * @type {ItemMenuContext}\n     */\n    const ctx = {\n        actionPaths: {},\n        editor: editor\n    };\n\n    // Define icons\n    defineIcons(editor);\n\n    // Get translations\n    const [\n        strProperties, strUnwrap, strMoveUp, strMoveDown, strMoveAfter, strMoveBefore,\n        strInsert, strRemove, strPrintable\n    ] = await get_strings([\n        {key: 'properties', component},\n        {key: 'unwrap', component},\n        {key: 'moveup', component},\n        {key: 'movedown', component},\n        {key: 'moveafter', component},\n        {key: 'movebefore', component},\n        {key: 'insert', component},\n        {key: 'remove', component},\n        {key: 'printable', component}\n    ]);\n\n    const widgetList = Object.values(getWidgetDict(editor));\n    const domSrv = getDomSrv();\n\n    /** @type {Record<string, Function>} */\n    const predefinedActions = predefinedActionsFactory(editor, domSrv);\n\n    const showPropertiesAction = async() => {\n        const path = domSrv.findWidgetOnEventPath(widgetList, editor.selection.getNode());\n        ctx.path = path;\n        if (!path.widget) {\n            return;\n        }\n        // Display modal dialog on this context\n        const widgetPropertiesCtrl = getWidgetPropertiesCtrl(editor);\n        await widgetPropertiesCtrl.show(path);\n    };\n\n    // Generic button action for opening the properties modal\n    editor.ui.registry.addButton(`${componentName}_modal_btn`, {\n        icon: ICONS.gear,\n        tooltip: strProperties,\n        onAction: showPropertiesAction\n    });\n    editor.ui.registry.addMenuItem(`${componentName}_modal_item`, {\n        icon: ICONS.gear,\n        text: strProperties,\n        onAction: showPropertiesAction\n    });\n\n    /**\n     * Defines a generic action\n     * @param {string} name\n     */\n    function genericAction(name) {\n        return function() {\n            if (!ctx.path?.widget) {\n                ctx.path = domSrv.findWidgetOnEventPath(widgetList, editor.selection.getNode());\n                if (!ctx.path?.widget) {\n                    return;\n                }\n            }\n            const action = predefinedActions[name];\n            if (action) {\n                action(ctx.path);\n                // Call any subscriber\n                getListeners('ctxAction').forEach(listener => listener(editor, ctx.path?.widget));\n            }\n        };\n    }\n\n    // Generic button action for unwrapping those widgets that support this feature\n    editor.ui.registry.addButton(`${componentName}_unwrap_btn`, {\n        icon: ICONS.arrowUpFromBracket,\n        tooltip: strUnwrap,\n        onAction: genericAction('unwrap')\n    });\n    editor.ui.registry.addMenuItem(`${componentName}_unwrap_item`, {\n        icon: ICONS.arrowUpFromBracket,\n        text: strUnwrap,\n        onAction: genericAction('unwrap')\n    });\n    editor.ui.registry.addMenuItem(`${componentName}_moveup_item`, {\n        icon: ICONS.arrowUp,\n        text: strMoveUp,\n        onAction: genericAction('movebefore')\n    });\n    editor.ui.registry.addMenuItem(`${componentName}_movedown_item`, {\n        icon: ICONS.arrowDown,\n        text: strMoveDown,\n        onAction: genericAction('moveafter')\n    });\n   editor.ui.registry.addMenuItem('widgethub_movebefore_item', {\n        icon: ICONS.arrowLeft,\n        text: strMoveBefore,\n        onAction: genericAction('movebefore')\n    });\n    editor.ui.registry.addMenuItem('widgethub_moveafter_item', {\n        icon: ICONS.arrowRight,\n        text: strMoveAfter,\n        onAction: genericAction('moveafter')\n    });\n    editor.ui.registry.addMenuItem(`${componentName}_insertafter_item`, {\n        icon: ICONS.clone,\n        text: strInsert,\n        onAction: genericAction('insertafter')\n    });\n    editor.ui.registry.addMenuItem(`${componentName}_remove_item`, {\n        icon: ICONS.remove,\n        text: strRemove,\n        onAction: genericAction('remove')\n    });\n    editor.ui.registry.addToggleMenuItem(`${componentName}_printable_item`, {\n        icon: 'print',\n        text: strPrintable,\n        onAction: genericAction('printable'),\n        onSetup: (/** @type {*} */ api) => {\n            let toggleState = true;\n            if (ctx.path?.elem?.classList?.contains('d-print-none')) {\n                toggleState = false;\n            }\n            api.setActive(toggleState);\n            return () => ({});\n        }\n    });\n\n    // Let extensions to register additional menuItem and nestedMenuItem\n    /** @type {import('./extension').UserDefinedItem[]} */\n    const widgetsWithExtensions = getMenuItemProviders().flatMap(provider => provider(ctx));\n    widgetsWithExtensions.forEach(menuItem => {\n        if (menuItem.subMenuItems) {\n                // It is a nested menu.\n                editor.ui.registry.addNestedMenuItem(`${componentName}_${menuItem.name}`, {\n                    icon: menuItem.icon,\n                    text: menuItem.title,\n                    getSubmenuItems: menuItem.subMenuItems\n                });\n            } else if (menuItem.onAction) {\n                // It is a simple menu item.\n                editor.ui.registry.addMenuItem(`${componentName}_${menuItem.name}`, {\n                    icon: menuItem.icon,\n                    text: menuItem.title,\n                    onAction: menuItem.onAction\n                });\n            }\n    });\n\n    editor.ui.registry.addContextMenu(component, {\n        /** @param {HTMLElement} element */\n        update: (element) => {\n            // Look for a context\n            ctx.path = domSrv.findWidgetOnEventPath(widgetList, element);\n            if (!ctx.path?.widget || ctx.path.widget.prop(\"contexttoolbar\")) {\n                // Widget not found in the searchPath or it must be displayed as toolbar\n                return '';\n            }\n            const widget = ctx.path.widget;\n            /** @type {string[]} */\n            let menuItems = [];\n            if (hasBindings(widget)) {\n                menuItems.push('modal');\n            }\n            // Does this widget bubble?\n            /** @type {PathResult | null} */\n            let parentPath = null;\n            if (widget.prop('bubbles')) {\n                const parentElem = ctx.path?.elem?.parentElement;\n                if (parentElem) {\n                    const p = domSrv.findWidgetOnEventPath(widgetList, parentElem);\n                    if (p && p.widget?.key === widget.prop('bubbles')) {\n                        parentPath = p;\n                    }\n                }\n            }\n\n            const populateMenuItems = function(/** @type {PathResult} **/ path) {\n                // Now look for contextmenu property in widget definition\n                /** @type {{predicate: string, actions: string}[] | undefined} */\n                let contextmenu = path.widget?.prop('contextmenu');\n                if (!contextmenu) {\n                    return;\n                }\n                if (!Array.isArray(contextmenu)) {\n                    contextmenu = [contextmenu];\n                }\n                contextmenu.forEach(cm => {\n                    // Does the element matches the predicate?\n                    /** @type {Element | null} */\n                    let targetElem = null;\n                    // If predicate is unset then use the widget root elem\n                    if (!cm.predicate) {\n                        targetElem = path?.elem ?? null;\n                    } else if (element.matches(cm.predicate)) {\n                        targetElem = element;\n                    } else {\n                        targetElem = element.closest(cm.predicate);\n                    }\n                    if (!targetElem) {\n                        return;\n                    }\n                    const newActionsToAdd = cm.actions.split(' ')\n                        .map(e => e.trim())\n                        // Moveleft/right should be mapped into movebefore/moveafter\n                        .map(action => {\n                            if (action === 'moveleft') {\n                                return 'movebefore';\n                            }\n                            if (action === 'moveright') {\n                                return 'moveafter';\n                            }\n                            return action;\n                        })\n                        // Never duplicate actions from different sources.\n                        .filter(e => e === '|' || !menuItems.includes(e));\n                    menuItems.push(...newActionsToAdd);\n\n                    // Register the new paths of every action\n                    newActionsToAdd.filter(e => e !== '|').forEach((/** @type {string} */ e) => {\n                        path.targetElement = targetElem;\n                        ctx.actionPaths[e] = {...path};\n                    });\n                });\n            };\n\n            if (parentPath) {\n                // Give precedence to the parent menus.\n                populateMenuItems(parentPath);\n            }\n            populateMenuItems(ctx.path);\n\n            menuItems = menuItems.map(e => e === '|' ? '|' : `${componentName}_${e}_item`);\n            // Check if the current widget has any action registered by extensions\n            const actionNames = widgetsWithExtensions\n                .filter(e => matchesCondition(e.condition, widget.key))\n                .map(e => `${componentName}_${e.name}`);\n            menuItems.push(...actionNames);\n\n            // Unwrap action always to the end\n            if (widget.unwrap) {\n                menuItems.push(`${componentName}_unwrap_item`);\n            }\n            return menuItems.join(' ');\n        }\n    });\n\n    // Look for widgets that need context toolbar\n    widgetList.filter(widget => needsContextMenu(widget)).forEach(widget => {\n        const items = [];\n        if (hasBindings(widget)) {\n            items.push('modal');\n        }\n        if (widget.unwrap) {\n            items.push('unwrap');\n        }\n        if (widget.prop(\"contexttoolbar\")) {\n            editor.ui.registry.addContextToolbar(`${componentName}_ctb_${widget.key}`, {\n                /** @param {HTMLElement} node */\n                predicate: function(node) {\n                    return domSrv.matchesSelectors(node, widget.selectors);\n                },\n                items: items.map(e => `${componentName}_${e}_btn`).join(' '),\n                position: 'node'\n            });\n        }\n    });\n}"],"names":["editor","ctx","actionPaths","ui","registry","addIcon","ICONS","defineIcons","strProperties","strUnwrap","strMoveUp","strMoveDown","strMoveAfter","strMoveBefore","strInsert","strRemove","strPrintable","key","component","widgetList","Object","values","domSrv","predefinedActions","factory","unwrap","context","elem","widget","_context$widget","nodes","querySelectorAll","parentNode","length","textNode","document","createTextNode","textContent","replaceWith","fragment","createDocumentFragment","forEach","node","appendChild","listener","movebefore","el","targetElement","root","prev","previousElementSibling","insertBefore","closest","findReferences","ref","prev2","moveafter","next","nextElementSibling","next2","insertafter","idMap","clone","smartClone","nextSibling","classList","remove","parent","children","printable","toggle","moveup","movedown","moveleft","moveright","predefinedActionsFactory","showPropertiesAction","async","path","findWidgetOnEventPath","selection","getNode","widgetPropertiesCtrl","show","genericAction","name","_ctx$path","_ctx$path2","action","_ctx$path3","addButton","componentName","icon","tooltip","onAction","addMenuItem","text","addToggleMenuItem","onSetup","api","toggleState","_ctx$path4","_ctx$path4$elem","_ctx$path4$elem$class","contains","setActive","widgetsWithExtensions","flatMap","provider","menuItem","subMenuItems","addNestedMenuItem","title","getSubmenuItems","addContextMenu","update","element","_ctx$path5","prop","menuItems","hasBindings","push","parentPath","parentElem","_ctx$path6","_ctx$path6$elem","parentElement","p","populateMenuItems","contextmenu","_path$widget","Array","isArray","cm","targetElem","predicate","matches","newActionsToAdd","actions","split","map","e","trim","filter","includes","actionNames","condition","RegExp","test","matchesCondition","join","needsContextMenu","items","addContextToolbar","matchesSelectors","selectors","position","Common","parameters","_widget$parameters","some","param","type","hasFieldBindings","fields","_param$fields","f","undefined","bind","item_selector"],"mappings":"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"}