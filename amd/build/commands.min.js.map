{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport * as coreStr from 'core/str';\nimport Common from './common';\nimport * as cfg from 'core/config';\nimport {initContextActions} from './contextinit';\nimport {getAdditionalCss, getGlobalConfig, getWidgetDict, isPluginVisible, Shared, getEditorOptions, isShareCss} from './options';\nimport jQuery from \"jquery\";\nimport {getWidgetPickCtrl} from './controller/widgetpicker_ctrl';\nimport {getListeners} from './extension';\nimport {getUserStorage} from './service/userstorage_service';\nimport {applyWidgetFilterFactory, findVariableByName, removeRndFromCtx, searchComp} from './util';\n\nexport const getSetup = async() => {\n    // Get some translations\n    const [widgetNameTitle, buttonImage] = await Promise.all([\n        coreStr.get_string('settings', Common.component),\n        getButtonImage('icon', Common.component),\n    ]);\n\n    /** @param {import('./plugin').TinyMCE} editor */\n    return (editor) => {\n        // Check if the option visible is set.\n        if (!isPluginVisible(editor)) {\n            // No capabilities required.\n            return;\n        }\n\n        // Check if there is a config option to disable the plugin for the current page.\n        const page = Shared.currentScope;\n        const disableList = getGlobalConfig(editor, \"disable.plugin.pages\", \"\")\n            .split(\",\")\n            .map(p => p.trim())\n            .filter(Boolean);\n\n        if (disableList.includes(page)) {\n            console.warn(\"WidgetHub plugin is disabled on this page.\");\n            return;\n        }\n\n        const regexPattern = getGlobalConfig(editor, \"disable.plugin.pages.regex\", \"\");\n        if (regexPattern) {\n            try {\n                const regex = new RegExp(regexPattern);\n                if (regex.test(page)) {\n                    console.warn(\"WidgetHub plugin is disabled on this page.\");\n                    return;\n                }\n            } catch (/** @type {any} */ ex) {\n                console.error(\"Please check disable.plugin.pages.regex: Invalid regular expression:\", ex.message);\n            }\n        }\n\n        // Register the Icon.\n        editor.ui.registry.addIcon(Common.icon, buttonImage.html);\n\n        const storage = getUserStorage(editor);\n        const widgetsDict = getWidgetDict(editor);\n\n        // Register the Toolbar Button or SplitButton - including recently used widgets\n        const defaultAction = () => {\n            const widgetPickCtrl = getWidgetPickCtrl(editor);\n            widgetPickCtrl.handleAction();\n        };\n        const toolbarButtonSpec = {\n            icon: Common.icon,\n            tooltip: widgetNameTitle,\n            onAction: defaultAction\n        };\n        const splitButtonBehavior = getGlobalConfig(editor, 'insert.splitbutton.behavior', 'lastused');\n        if (splitButtonBehavior === 'none') {\n            editor.ui.registry.addButton(Common.component, toolbarButtonSpec);\n        } else {\n            editor.ui.registry.addSplitButton(Common.component, {\n                ...toolbarButtonSpec,\n                columns: 1,\n                fetch: (/** @type ((items: *[]) => void) */callback) => {\n                    const isSelectMode = editor.selection.getContent().trim().length > 0;\n                    const items = storage.getRecentUsed()\n                    .filter(e => {\n                        const widget = widgetsDict[e.key];\n                        if (!widget?.name) {\n                            return false;\n                        }\n                        return !isSelectMode || (isSelectMode && widget.isSelectCapable());\n                    })\n                    .map(e => ({\n                        type: 'choiceitem',\n                        text: widgetsDict[e.key]?.name,\n                        value: e.key\n                    }));\n                    callback(items);\n                },\n                onItemAction: (/** @type {*} */ api, /** @type {string} */ key) => {\n                    const widgetPickCtrl = getWidgetPickCtrl(editor);\n                    const widget = widgetsDict[key];\n                    if (!widget) {\n                        return;\n                    }\n                    /** @type {Record<string, *>} */\n                    let ctx = widget.defaultsWithRepeatable(true) || {};\n                    if (splitButtonBehavior === 'lastused') {\n                        // Use stored preferences if any stored\n                        const ctxStored = storage.getRecentUsed().find(e => e.key === key)?.p || {};\n                        ctx = {...ctx, ...removeRndFromCtx(ctxStored, widget.parameters)};\n                    }\n                    widgetPickCtrl.handlePickModalAction(widget, true, ctx);\n                }\n            });\n        }\n\n        // Add the Menu Item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addMenuItem(Common.component, {\n            icon: Common.icon,\n            text: widgetNameTitle,\n            onAction: defaultAction,\n        });\n\n        const getMatchedWidgets = (/** @type {string} */ pattern) => {\n            return Object.values(widgetsDict).filter((w) => searchComp(w.name, pattern));\n        };\n\n        // Add an Autocompleter @<search widget name>.\n        const autoCompleteBehavior = getGlobalConfig(editor, 'insert.autocomplete.behavior', 'lastused');\n        const autoCompleteTrigger = getGlobalConfig(editor, 'insert.autocomplete.symbol', '@');\n        if (autoCompleteBehavior !== 'none' && autoCompleteTrigger) {\n            editor.ui.registry.addAutocompleter(Common.component + '_autocompleter', {\n                trigger: autoCompleteTrigger,\n                columns: 1,\n                minChars: 3,\n                fetch: (/** @type {string}*/ pattern) => {\n                        /** @type {{type: string, value: string, text: string}[]} */\n                        const results = [];\n                        getMatchedWidgets(pattern).forEach((/** @type {import('./options').Widget} */ w) => {\n                            const varname = w.prop('autocomplete')?.trim();\n                            const param = findVariableByName(varname, w.parameters);\n                            if (!param?.options) {\n                                results.push({\n                                    type: 'autocompleteitem',\n                                    value: w.key,\n                                    text: w.name\n                                });\n                            } else {\n                                param.options.forEach(opt => {\n                                    let value = opt;\n                                    let label = opt;\n                                    if (typeof opt === 'object') {\n                                        value = opt.v;\n                                        label = opt.l;\n                                    }\n                                    results.push({\n                                        type: 'autocompleteitem',\n                                        value: `${w.key}|${varname}:${value}`,\n                                        text: w.name + \" \" + label\n                                    });\n                                });\n                            }\n                        });\n                        return Promise.resolve(results);\n                },\n                onAction: (/** @type {*}*/ api, /** @type {Range}*/ rng, /** @type {string}*/ value) => {\n                    api.hide();\n                    rng = rng || api.getRange();\n                    const pair = value.split('|');\n                    const key = pair[0].trim();\n                    const widget = widgetsDict[key];\n                    if (!widget) {\n                        return;\n                    }\n                    /** @type {Record<string, *>} */\n                    let ctx = widget.defaultsWithRepeatable(true) || {};\n                    // Should it load recently used values?\n                    if (autoCompleteBehavior === 'lastused') {\n                        const ctxStored = storage.getRecentUsed().find(e => e.key === key)?.p || {};\n                        ctx = {...ctx, ...removeRndFromCtx(ctxStored, widget.parameters)};\n                    }\n                    if (pair.length === 2) {\n                        const [varname, value] = pair[1].split(\":\");\n                        ctx[varname] = value;\n                    }\n                    editor.selection.setRng(rng);\n                    editor.insertContent('');\n                    const widgetPickCtrl = getWidgetPickCtrl(editor);\n                    widgetPickCtrl.handlePickModalAction(widget, true, ctx);\n                }\n            });\n        }\n\n        // Initialize context menus, styles and scripts into editor's iframe\n        initializer(editor);\n    };\n};\n\n/**\n * If the user has selected automatic apply of filters on startup, apply them!\n * @param {import('./plugin').TinyMCE} editor\n */\nconst autoFilter = (editor) => {\n    const storage = getUserStorage(editor);\n    const requiresFilter = storage.getFromLocal(\"startup.filters\", \"\").split(\",\");\n\n    if (requiresFilter.length > 0) {\n        const editorOptions = getEditorOptions(editor);\n        const widgetsFound = requiresFilter.map(key => editorOptions.widgetDict[key]).filter(w => w !== undefined);\n        const applyWidgetFilter = applyWidgetFilterFactory(editor, coreStr);\n\n        // Apply the filters and show the result\n        widgetsFound.forEach(w => applyWidgetFilter(w.template ?? '', true));\n\n        // Apply it also on save\n        const pageForm = document.querySelector('form.mform');\n        if (pageForm && pageForm.querySelector('div[data-fieldtype=\"editor\"]')) {\n            pageForm.addEventListener('submit', () => {\n                widgetsFound.forEach(w => applyWidgetFilter(w.template ?? '', true));\n                return true;\n            });\n        }\n    }\n};\n\n/**\n * Inject styles and scripts into editor's iframe\n * @param {import('./plugin').TinyMCE} editor\n */\nfunction initializer(editor) {\n    editor.once('SetContent', () => {\n        // Run all subscribers\n        autoFilter(editor);\n        getListeners('contentSet').forEach(listener => listener(editor));\n    });\n    // Add the bootstrap, CSS, etc... into the editor's iframe\n    editor.on('init', () => {\n        // On init editor.dom is ready\n        // Inject css all generated by Moodle into the editor's iframe\n        // http://localhost:4141/theme/styles.php/boost/1721728984_1/all\n\n        if (isShareCss(editor)) {\n            // TODO: Missing themesubrevision\n            const subversion = 1;\n            // @ts-ignore\n            const allCss = `${cfg.wwwroot}/theme/styles.php/${cfg.theme}/${cfg.themerev}_${subversion}/all`;\n            editor.dom.loadCSS(allCss);\n        }\n        // Inject css from site Admin\n        let adminCss = (getAdditionalCss(editor) ?? '').trim();\n        if (adminCss) {\n            // Commented URLs are interpreted as loadCss\n            const regex = /\\/\\*{2}\\s+(http(s?):\\/\\/.*)\\s+\\*{2}\\//gm;\n            adminCss = adminCss.replace(regex, (_, $1) => {\n                editor.dom.loadCSS($1);\n                return '';\n            });\n            if (adminCss.trim()) {\n                editor.dom.addStyle(adminCss);\n            }\n        }\n\n        // Inject styles and Javascript into the editor's iframe\n        // editor.dom.loadCSS(`${baseUrl}/libs/fontawesome/css/font-awesome.min.css`);\n        // Discover the jQuery version\n        // @ts-ignore\n        const jQueryVersion = jQuery.fn.jquery ?? '3.6.1';\n        const scriptJQ = editor.dom.create(\"script\", {src: `https://code.jquery.com/jquery-${jQueryVersion}.min.js`});\n        const head = editor.getDoc().querySelector(\"head\");\n        scriptJQ.onload = () => {\n            // Cannot load BS until JQ is fully loaded on editor's iframe\n            // @ts-ignore\n            const bsVersion = jQuery.fn.tooltip?.Constructor?.VERSION ?? '4.6.2';\n            const scriptBS = editor.dom.create(\"script\",\n                {src: `https://cdn.jsdelivr.net/npm/bootstrap@${bsVersion}/dist/js/bootstrap.bundle.min.js`});\n            head.appendChild(scriptBS);\n\n            // Activate popover and tooltips\n            scriptBS.onload = () => {\n                if (!editor.dom.get('init_bs_comp')) {\n                    const scriptInitBS = editor.dom.create(\"script\");\n                    scriptInitBS.id = 'init_bs_comp';\n                    scriptInitBS.innerHTML = `\n                    $(document).ready(function() {\n                        $('body').popover({\n                            selector: '[data-toggle=\"popover\"]',\n                            trigger: 'hover'\n                        });\n                    });`;\n                    head.appendChild(scriptInitBS);\n                }\n            };\n            // Run all subscribers\n            getListeners('onInit').forEach(listener => listener(editor));\n\n            if (parseInt(getGlobalConfig(editor, 'enable.contextmenu.level', '1')) > 0) {\n                // Initialize context toolbars and menus\n                initContextActions(editor);\n            }\n        };\n\n        head.appendChild(scriptJQ);\n    });\n}\n\n"],"names":["async","widgetNameTitle","buttonImage","Promise","all","coreStr","get_string","Common","component","editor","page","Shared","currentScope","split","map","p","trim","filter","Boolean","includes","console","warn","regexPattern","RegExp","test","ex","error","message","ui","registry","addIcon","icon","html","storage","widgetsDict","defaultAction","handleAction","toolbarButtonSpec","tooltip","onAction","splitButtonBehavior","addButton","addSplitButton","columns","fetch","callback","isSelectMode","selection","getContent","length","getRecentUsed","e","widget","key","name","isSelectCapable","type","text","_widgetsDict$e$key","value","onItemAction","api","widgetPickCtrl","ctx","defaultsWithRepeatable","ctxStored","find","parameters","handlePickModalAction","addMenuItem","autoCompleteBehavior","autoCompleteTrigger","addAutocompleter","trigger","minChars","pattern","results","Object","values","w","getMatchedWidgets","forEach","varname","prop","_w$prop","param","options","opt","label","v","l","push","resolve","rng","hide","getRange","pair","setRng","insertContent","once","requiresFilter","getFromLocal","editorOptions","widgetsFound","widgetDict","undefined","applyWidgetFilter","template","pageForm","document","querySelector","addEventListener","autoFilter","listener","on","subversion","allCss","cfg","wwwroot","theme","themerev","dom","loadCSS","adminCss","regex","replace","_","$1","addStyle","jQueryVersion","jQuery","fn","jquery","scriptJQ","create","src","head","getDoc","onload","bsVersion","Constructor","VERSION","scriptBS","appendChild","get","scriptInitBS","id","innerHTML","parseInt","initializer"],"mappings":";;;;;;;kQAqCwBA,gBAEbC,gBAAiBC,mBAAqBC,QAAQC,IAAI,CACrDC,QAAQC,WAAW,WAAYC,gBAAOC,YACtC,yBAAe,OAAQD,gBAAOC,oBAI1BC,cAEC,4BAAgBA,qBAMfC,KAAOC,gBAAOC,iBACA,4BAAgBH,OAAQ,uBAAwB,IAC/DI,MAAM,KACNC,KAAIC,GAAKA,EAAEC,SACXC,OAAOC,SAEIC,SAAST,kBACrBU,QAAQC,KAAK,oDAIXC,cAAe,4BAAgBb,OAAQ,6BAA8B,OACvEa,oBAEkB,IAAIC,OAAOD,cACfE,KAAKd,kBACXU,QAAQC,KAAK,8CAGnB,MAA0BI,IACxBL,QAAQM,MAAM,uEAAwED,GAAGE,SAKjGlB,OAAOmB,GAAGC,SAASC,QAAQvB,gBAAOwB,KAAM7B,YAAY8B,YAE9CC,SAAU,uCAAexB,QACzByB,aAAc,0BAAczB,QAG5B0B,cAAgB,MACK,wCAAkB1B,QAC1B2B,gBAEbC,kBAAoB,CACtBN,KAAMxB,gBAAOwB,KACbO,QAASrC,gBACTsC,SAAUJ,eAERK,qBAAsB,4BAAgB/B,OAAQ,8BAA+B,YACvD,SAAxB+B,oBACA/B,OAAOmB,GAAGC,SAASY,UAAUlC,gBAAOC,UAAW6B,mBAE/C5B,OAAOmB,GAAGC,SAASa,eAAenC,gBAAOC,UAAW,IAC7C6B,kBACHM,QAAS,EACTC,MAA2CC,iBACjCC,aAAerC,OAAOsC,UAAUC,aAAahC,OAAOiC,OAAS,EAcnEJ,SAbcZ,QAAQiB,gBACrBjC,QAAOkC,UACEC,OAASlB,YAAYiB,EAAEE,aACxBD,MAAAA,SAAAA,OAAQE,SAGLR,cAAiBA,cAAgBM,OAAOG,sBAEnDzC,KAAIqC,iCAAM,CACPK,KAAM,aACNC,gCAAMvB,YAAYiB,EAAEE,0CAAdK,mBAAoBJ,KAC1BK,MAAOR,EAAEE,UAIjBO,aAAc,CAAkBC,IAA2BR,aACjDS,gBAAiB,wCAAkBrD,QACnC2C,OAASlB,YAAYmB,SACtBD,kBAIDW,IAAMX,OAAOY,wBAAuB,IAAS,MACrB,aAAxBxB,oBAAoC,iCAE9ByB,yCAAYhC,QAAQiB,gBAAgBgB,MAAKf,GAAKA,EAAEE,MAAQA,oEAAMtC,IAAK,GACzEgD,IAAM,IAAIA,QAAQ,0BAAiBE,UAAWb,OAAOe,aAEzDL,eAAeM,sBAAsBhB,QAAQ,EAAMW,QAO/DtD,OAAOmB,GAAGC,SAASwC,YAAY9D,gBAAOC,UAAW,CAC7CuB,KAAMxB,gBAAOwB,KACb0B,KAAMxD,gBACNsC,SAAUJ,sBAQRmC,sBAAuB,4BAAgB7D,OAAQ,+BAAgC,YAC/E8D,qBAAsB,4BAAgB9D,OAAQ,6BAA8B,KACrD,SAAzB6D,sBAAmCC,qBACnC9D,OAAOmB,GAAGC,SAAS2C,iBAAiBjE,gBAAOC,UAAY,iBAAkB,CACrEiE,QAASF,oBACT5B,QAAS,EACT+B,SAAU,EACV9B,MAA6B+B,gBAEfC,QAAU,SAdN,CAAuBD,SACtCE,OAAOC,OAAO5C,aAAajB,QAAQ8D,IAAM,oBAAWA,EAAEzB,KAAMqB,WAcvDK,CAAkBL,SAASM,SAAmDF,sBACpEG,wBAAUH,EAAEI,KAAK,0CAAPC,QAAwBpE,OAClCqE,OAAQ,4BAAmBH,QAASH,EAAEZ,YACvCkB,MAAAA,OAAAA,MAAOC,QAORD,MAAMC,QAAQL,SAAQM,UACd5B,MAAQ4B,IACRC,MAAQD,IACO,iBAARA,MACP5B,MAAQ4B,IAAIE,EACZD,MAAQD,IAAIG,GAEhBd,QAAQe,KAAK,CACTnC,KAAM,mBACNG,MAAQ,GAAEoB,EAAE1B,OAAO6B,WAAWvB,QAC9BF,KAAMsB,EAAEzB,KAAO,IAAMkC,WAhB7BZ,QAAQe,KAAK,CACTnC,KAAM,mBACNG,MAAOoB,EAAE1B,IACTI,KAAMsB,EAAEzB,UAkBbnD,QAAQyF,QAAQhB,UAE/BrC,SAAU,CAAiBsB,IAAyBgC,IAA0BlC,SAC1EE,IAAIiC,OACJD,IAAMA,KAAOhC,IAAIkC,iBACXC,KAAOrC,MAAM9C,MAAM,KACnBwC,IAAM2C,KAAK,GAAGhF,OACdoC,OAASlB,YAAYmB,SACtBD,kBAIDW,IAAMX,OAAOY,wBAAuB,IAAS,MAEpB,aAAzBM,qBAAqC,kCAC/BL,0CAAYhC,QAAQiB,gBAAgBgB,MAAKf,GAAKA,EAAEE,MAAQA,sEAAMtC,IAAK,GACzEgD,IAAM,IAAIA,QAAQ,0BAAiBE,UAAWb,OAAOe,gBAErC,IAAhB6B,KAAK/C,OAAc,OACZiC,QAASvB,OAASqC,KAAK,GAAGnF,MAAM,KACvCkD,IAAImB,SAAWvB,MAEnBlD,OAAOsC,UAAUkD,OAAOJ,KACxBpF,OAAOyF,cAAc,KACE,wCAAkBzF,QAC1B2D,sBAAsBhB,QAAQ,EAAMW,iBAyClDtD,QACjBA,OAAO0F,KAAK,cAAc,KA5BV1F,CAAAA,eAEV2F,gBADU,uCAAe3F,QACA4F,aAAa,kBAAmB,IAAIxF,MAAM,QAErEuF,eAAenD,OAAS,EAAG,OACrBqD,eAAgB,6BAAiB7F,QACjC8F,aAAeH,eAAetF,KAAIuC,KAAOiD,cAAcE,WAAWnD,OAAMpC,QAAO8D,QAAW0B,IAAN1B,IACpF2B,mBAAoB,kCAAyBjG,OAAQJ,SAG3DkG,aAAatB,SAAQF,GAAK2B,kBAAkB3B,EAAE4B,UAAY,IAAI,WAGxDC,SAAWC,SAASC,cAAc,cACpCF,UAAYA,SAASE,cAAc,iCACnCF,SAASG,iBAAiB,UAAU,KAChCR,aAAatB,SAAQF,GAAK2B,kBAAkB3B,EAAE4B,UAAY,IAAI,MACvD,OAafK,CAAWvG,oCACE,cAAcwE,SAAQgC,UAAYA,SAASxG,aAG5DA,OAAOyG,GAAG,QAAQ,SAKV,uBAAWzG,QAAS,OAEd0G,WAAa,EAEbC,OAAU,GAAEC,IAAIC,4BAA4BD,IAAIE,SAASF,IAAIG,YAAYL,iBAC/E1G,OAAOgH,IAAIC,QAAQN,YAGnBO,WAAY,6BAAiBlH,SAAW,IAAIO,UAC5C2G,SAAU,OAEJC,MAAQ,0CACdD,SAAWA,SAASE,QAAQD,OAAO,CAACE,EAAGC,MACnCtH,OAAOgH,IAAIC,QAAQK,IACZ,MAEPJ,SAAS3G,QACTP,OAAOgH,IAAIO,SAASL,gBAQtBM,cAAgBC,gBAAOC,GAAGC,QAAU,QACpCC,SAAW5H,OAAOgH,IAAIa,OAAO,SAAU,CAACC,IAAM,kCAAiCN,yBAC/EO,KAAO/H,OAAOgI,SAAS3B,cAAc,QAC3CuB,SAASK,OAAS,wDAGRC,sDAAmBR,GAAG7F,wFAASsG,0EAAaC,UAAW,QACvDC,SAAWrI,OAAOgH,IAAIa,OAAO,SAC/B,CAACC,IAAM,0CAAyCI,8CACpDH,KAAKO,YAAYD,UAGjBA,SAASJ,OAAS,SACTjI,OAAOgH,IAAIuB,IAAI,gBAAiB,OAC3BC,aAAexI,OAAOgH,IAAIa,OAAO,UACvCW,aAAaC,GAAK,eAClBD,aAAaE,UAAa,4QAO1BX,KAAKO,YAAYE,4CAIZ,UAAUhE,SAAQgC,UAAYA,SAASxG,UAEhD2I,UAAS,4BAAgB3I,OAAQ,2BAA4B,MAAQ,uCAElDA,SAI3B+H,KAAKO,YAAYV,aA3GjBgB,CAAY5I"}