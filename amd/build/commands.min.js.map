{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {UiPickCtrl} from './uiPick';\nimport Common from './common';\n\nimport {isPluginVisible} from './options';\n\nexport class WidgetPlugin {\n    editor;\n    /** @type {UiPickCtrl | undefined} **/\n    #pickCtrl;\n    /**\n     * @param {import('./plugin').TinyMCE} editor\n     */\n    constructor(editor) {\n        this.editor = editor;\n    }\n    get pickCtrl() {\n        if (!this.#pickCtrl) {\n            this.#pickCtrl = new UiPickCtrl(this);\n        }\n        return this.#pickCtrl;\n    }\n}\n\nexport const getSetup = async() => {\n    const [\n        widgetNameTitle,\n        buttonImage,\n    ] = await Promise.all([\n        // @ts-ignore\n        getString('settings', Common.component),\n        getButtonImage('icon', Common.component),\n    ]);\n    /** @param {import('./plugin').TinyMCE} editor */\n    return (editor) => {\n        const widgetPlugin = new WidgetPlugin(editor);\n\n        if (isPluginVisible(editor)) {\n            // Register the Icon.\n            editor.ui.registry.addIcon(Common.icon, buttonImage.html);\n\n            // Register the Toolbar Button.\n            editor.ui.registry.addButton(Common.component, {\n                icon: Common.icon,\n                tooltip: widgetNameTitle,\n                onAction: () => widgetPlugin.pickCtrl.handleAction(),\n            });\n\n            // Add the Menu Item.\n            // This allows it to be added to a standard menu, or a context menu.\n            editor.ui.registry.addMenuItem(Common.component, {\n                icon: Common.icon,\n                text: widgetNameTitle,\n                onAction: () => widgetPlugin.pickCtrl.handleAction(),\n            });\n        }\n    };\n};\n"],"names":["WidgetPlugin","constructor","editor","pickCtrl","this","UiPickCtrl","async","widgetNameTitle","buttonImage","Promise","all","Common","component","widgetPlugin","ui","registry","addIcon","icon","html","addButton","tooltip","onAction","handleAction","addMenuItem","text"],"mappings":"83CA+BaA,aAOTC,YAAYC,oPACHA,OAASA,OAEdC,4CACKC,sDACgB,IAAIC,mBAAWD,6BAE7BA,sEAISE,gBAEhBC,gBACAC,mBACMC,QAAQC,IAAI,EAElB,mBAAU,WAAYC,gBAAOC,YAC7B,yBAAe,OAAQD,gBAAOC,oBAG1BV,eACEW,aAAe,IAAIb,aAAaE,SAElC,4BAAgBA,UAEhBA,OAAOY,GAAGC,SAASC,QAAQL,gBAAOM,KAAMT,YAAYU,MAGpDhB,OAAOY,GAAGC,SAASI,UAAUR,gBAAOC,UAAW,CAC3CK,KAAMN,gBAAOM,KACbG,QAASb,gBACTc,SAAU,IAAMR,aAAaV,SAASmB,iBAK1CpB,OAAOY,GAAGC,SAASQ,YAAYZ,gBAAOC,UAAW,CAC7CK,KAAMN,gBAAOM,KACbO,KAAMjB,gBACNc,SAAU,IAAMR,aAAaV,SAASmB"}