{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport * as coreStr from 'core/str';\nimport Common from './common';\nimport * as cfg from 'core/config';\nimport {initContextActions} from './contextinit';\nimport {getAdditionalCss, getGlobalConfig, getWidgetDict, isPluginVisible, Shared, getEditorOptions} from './options';\nimport jQuery from \"jquery\";\nimport {getWidgetPickCtrl} from './controller/widgetpicker_ctrl';\nimport {getListeners} from './extension';\nimport {getUserStorage} from './service/userstorage_service';\nimport {applyWidgetFilterFactory, findVariableByName, searchComp} from './util';\n\nexport const getSetup = async() => {\n    // Get some translations\n    const [widgetNameTitle, buttonImage] = await Promise.all([\n        coreStr.get_string('settings', Common.component),\n        getButtonImage('icon', Common.component),\n    ]);\n\n    /** @param {import('./plugin').TinyMCE} editor */\n    return (editor) => {\n        // Check if the option visible is set.\n        if (!isPluginVisible(editor)) {\n            // No capabilities required.\n            return;\n        }\n\n        // Check if there is a config option to disable the plugin for the current page.\n        const page = Shared.currentScope;\n        const disableList = getGlobalConfig(editor, \"disable.plugin.pages\", \"\")\n            .split(\",\")\n            .map(p => p.trim())\n            .filter(Boolean);\n\n        if (disableList.includes(page)) {\n            console.warn(\"WidgetHub plugin is disabled on this page.\");\n            return;\n        }\n\n        const regexPattern = getGlobalConfig(editor, \"disable.plugin.pages.regex\", \"\");\n        if (regexPattern) {\n            try {\n                const regex = new RegExp(regexPattern);\n                if (regex.test(page)) {\n                    console.warn(\"WidgetHub plugin is disabled on this page.\");\n                    return;\n                }\n            } catch (/** @type {any} */ ex) {\n                console.error(\"Please check disable.plugin.pages.regex: Invalid regular expression:\", ex.message);\n            }\n        }\n\n        // Register the Icon.\n        editor.ui.registry.addIcon(Common.icon, buttonImage.html);\n\n        const defaultAction = () => {\n            const widgetPickCtrl = getWidgetPickCtrl(editor);\n            widgetPickCtrl.handleAction();\n        };\n\n        const storage = getUserStorage(editor);\n        const widgetsDict = getWidgetDict(editor);\n        // Register the Toolbar SplitButton - including recently used widgets\n        editor.ui.registry.addSplitButton(Common.component, {\n            icon: Common.icon,\n            tooltip: widgetNameTitle,\n            columns: 1,\n            fetch: (/** @type ((items: *[]) => void) */callback) => {\n                const items = storage.getRecentUsed().map(e => ({\n                    type: 'choiceitem',\n                    text: widgetsDict[e.key]?.name,\n                    value: e.key\n                })).filter(item => item.text !== undefined);\n                callback(items);\n            },\n            onAction: defaultAction,\n            onItemAction: (/** @type {*} */ api, /** @type {string} */ key) => {\n                const widgetPickCtrl = getWidgetPickCtrl(editor);\n                const ctx = storage.getRecentUsed().filter(e => e.key === key)[0].p;\n                widgetPickCtrl.handlePickModalAction(widgetsDict[key], true, ctx);\n            }\n        });\n\n        // Add the Menu Item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addMenuItem(Common.component, {\n            icon: Common.icon,\n            text: widgetNameTitle,\n            onAction: defaultAction,\n        });\n\n        const getMatchedWidgets = (/** @type {string} */ pattern) => {\n            return Object.values(widgetsDict).filter((w) => searchComp(w.name, pattern));\n        };\n\n        // Add an Autocompleter @<search widget name>.\n        const autoCompleteTrigger = getGlobalConfig(editor, 'autocomplete.trigger', '@');\n        if (autoCompleteTrigger) {\n            editor.ui.registry.addAutocompleter(Common.component + '_autocompleter', {\n                trigger: autoCompleteTrigger,\n                columns: 1,\n                minChars: 3,\n                fetch: (/** @type {string}*/ pattern) => {\n                        /** @type {{type: string, value: string, text: string}[]} */\n                        const results = [];\n                        getMatchedWidgets(pattern).forEach((/** @type {import('./options').Widget} */ w) => {\n                            const varname = w.prop('autocomplete')?.trim();\n                            const param = findVariableByName(varname, w.parameters);\n                            if (!param?.options) {\n                                results.push({\n                                    type: 'autocompleteitem',\n                                    value: w.key,\n                                    text: w.name\n                                });\n                            } else {\n                                param.options.forEach(opt => {\n                                    let value = opt;\n                                    let label = opt;\n                                    if (typeof opt === 'object') {\n                                        value = opt.v;\n                                        label = opt.l;\n                                    }\n                                    results.push({\n                                        type: 'autocompleteitem',\n                                        value: `${w.key}|${varname}:${value}`,\n                                        text: w.name + \" \" + label\n                                    });\n                                });\n                            }\n                        });\n                        return Promise.resolve(results);\n                },\n                onAction: (/** @type {*}*/ api, /** @type {Range}*/ rng, /** @type {string}*/ value) => {\n                    api.hide();\n                    const pair = value.split('|');\n                    const key = pair[0].trim();\n                    /** @type {Record<string, *>} */\n                    const ctx = {};\n                    if (pair.length === 2) {\n                        const [varname, value] = pair[1].split(\":\");\n                        ctx[varname] = value;\n                    }\n                    editor.selection.setRng(rng);\n                    editor.insertContent('');\n                    const widgetPickCtrl = getWidgetPickCtrl(editor);\n                    widgetPickCtrl.handlePickModalAction(widgetsDict[key], true, ctx);\n                }\n            });\n        }\n\n        // Initialize context menus, styles and scripts into editor's iframe\n        initializer(editor);\n    };\n};\n\n/**\n * If the user has selected automatic apply of filters on startup, apply them!\n * @param {import('./plugin').TinyMCE} editor\n */\nconst autoFilter = (editor) => {\n    const storage = getUserStorage(editor);\n    const requiresFilter = storage.getFromLocal(\"startup.filters\", \"\").split(\",\");\n\n    if (requiresFilter.length > 0) {\n        const editorOptions = getEditorOptions(editor);\n        const widgetsFound = requiresFilter.map(key => editorOptions.widgetDict[key]).filter(w => w !== undefined);\n        const applyWidgetFilter = applyWidgetFilterFactory(editor, coreStr);\n\n        // Apply the filters and show the result\n        widgetsFound.forEach(w => applyWidgetFilter(w.template ?? '', true));\n\n        // Apply it also on save\n        const pageForm = document.querySelector('form.mform');\n        if (pageForm && pageForm.querySelector('div[data-fieldtype=\"editor\"]')) {\n            pageForm.addEventListener('submit', () => {\n                widgetsFound.forEach(w => applyWidgetFilter(w.template ?? '', true));\n                return true;\n            });\n        }\n    }\n};\n\n/**\n * Inject styles and scripts into editor's iframe\n * @param {import('./plugin').TinyMCE} editor\n */\nfunction initializer(editor) {\n    editor.once('SetContent', () => {\n        // Run all subscribers\n        autoFilter(editor);\n        getListeners('contentSet').forEach(listener => listener(editor));\n    });\n    // Add the bootstrap, CSS, etc... into the editor's iframe\n    editor.on('init', () => {\n        // On init editor.dom is ready\n        // Inject css all generated by Moodle into the editor's iframe\n        // http://localhost:4141/theme/styles.php/boost/1721728984_1/all\n        // TODO: Missing themesubrevision\n        const subversion = 1;\n        // @ts-ignore\n        const allCss = `${cfg.wwwroot}/theme/styles.php/${cfg.theme}/${cfg.themerev}_${subversion}/all`;\n        editor.dom.loadCSS(allCss);\n\n        // Inject styles and Javascript into the editor's iframe\n        // editor.dom.loadCSS(`${baseUrl}/libs/fontawesome/css/font-awesome.min.css`);\n        // Discover the jQuery version\n        // @ts-ignore\n        const jQueryVersion = jQuery.fn.jquery ?? '3.6.1';\n        const scriptJQ = editor.dom.create(\"script\", {src: `https://code.jquery.com/jquery-${jQueryVersion}.min.js`});\n        const head = editor.getDoc().querySelector(\"head\");\n        scriptJQ.onload = () => {\n            // Cannot load BS until JQ is fully loaded on editor's iframe\n            // @ts-ignore\n            const bsVersion = jQuery.fn.tooltip?.Constructor?.VERSION ?? '4.6.2';\n            const scriptBS = editor.dom.create(\"script\",\n                {src: `https://cdn.jsdelivr.net/npm/bootstrap@${bsVersion}/dist/js/bootstrap.bundle.min.js`});\n            head.appendChild(scriptBS);\n\n            // Activate popover and tooltips\n            scriptBS.onload = () => {\n                if (!editor.dom.get('init_bs_comp')) {\n                    const scriptInitBS = editor.dom.create(\"script\");\n                    scriptInitBS.id = 'init_bs_comp';\n                    scriptInitBS.innerHTML = `\n                    $(document).ready(function() {\n                        $('body').popover({\n                            selector: '[data-toggle=\"popover\"]',\n                            trigger: 'hover'\n                        });\n                    });`;\n                    head.appendChild(scriptInitBS);\n                }\n            };\n            // Run all subscribers\n            getListeners('onInit').forEach(listener => listener(editor));\n\n            // Inject css from site Admin\n            let adminCss = (getAdditionalCss(editor) ?? '').trim();\n            if (adminCss) {\n                // Commented URLs are interpreted as loadCss\n                const regex = /\\/\\*{2}\\s+(http(s?):\\/\\/.*)\\s+\\*{2}\\//gm;\n                adminCss = adminCss.replace(regex, (_, $1) => {\n                    editor.dom.loadCSS($1);\n                    return '';\n                });\n                if (adminCss.trim()) {\n                    editor.dom.addStyle(adminCss);\n                }\n            }\n\n            if (parseInt(getGlobalConfig(editor, 'enable.contextmenu.level', '1')) > 0) {\n                // Initialize context toolbars and menus\n                initContextActions(editor);\n            }\n        };\n\n        head.appendChild(scriptJQ);\n    });\n}\n\n"],"names":["async","widgetNameTitle","buttonImage","Promise","all","coreStr","get_string","Common","component","editor","page","Shared","currentScope","split","map","p","trim","filter","Boolean","includes","console","warn","regexPattern","RegExp","test","ex","error","message","ui","registry","addIcon","icon","html","defaultAction","handleAction","storage","widgetsDict","addSplitButton","tooltip","columns","fetch","callback","getRecentUsed","e","type","text","key","_widgetsDict$e$key","name","value","item","undefined","onAction","onItemAction","api","widgetPickCtrl","ctx","handlePickModalAction","addMenuItem","autoCompleteTrigger","addAutocompleter","trigger","minChars","pattern","results","Object","values","w","getMatchedWidgets","forEach","varname","prop","_w$prop","param","parameters","options","opt","label","v","l","push","resolve","rng","hide","pair","length","selection","setRng","insertContent","once","requiresFilter","getFromLocal","editorOptions","widgetsFound","widgetDict","applyWidgetFilter","template","pageForm","document","querySelector","addEventListener","autoFilter","listener","on","subversion","allCss","cfg","wwwroot","theme","themerev","dom","loadCSS","jQueryVersion","jQuery","fn","jquery","scriptJQ","create","src","head","getDoc","onload","bsVersion","Constructor","VERSION","scriptBS","appendChild","get","scriptInitBS","id","innerHTML","adminCss","regex","replace","_","$1","addStyle","parseInt","initializer"],"mappings":"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"}