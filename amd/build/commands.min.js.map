{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["\n/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport * as coreStr from 'core/str';\nimport Common from './common';\nimport * as cfg from 'core/config';\nimport {initContextActions} from './contextinit';\nimport {getAdditionalCss, getGlobalConfig, getWidgetDict, isPluginVisible, Shared, getEditorOptions, isShareCss} from './options';\nimport {getWidgetPickCtrl} from './controller/widgetpicker_ctrl';\nimport {getListeners} from './extension';\nimport {getUserStorage} from './service/userstorage_service';\nimport {applyWidgetFilterFactory, findVariableByName, loadScriptAsync, removeRndFromCtx, searchComp} from './util';\n\nexport const getSetup = async() => {\n    // Get some translations\n    const [widgetNameTitle, buttonImage] = await Promise.all([\n        coreStr.get_string('settings', Common.component),\n        getButtonImage('icon', Common.component),\n    ]);\n\n    /** @param {import('./plugin').TinyMCE} editor */\n    return (editor) => {\n        // Check if the option visible is set.\n        if (!isPluginVisible(editor)) {\n            // No capabilities required.\n            return;\n        }\n\n        getListeners('setup').forEach(listener => listener(editor));\n\n        // Check if there is a config option to disable the plugin for the current page.\n        const page = Shared.currentScope;\n        const disableList = getGlobalConfig(editor, \"disable.plugin.pages\", \"\")\n            .split(\",\")\n            .map(p => p.trim())\n            .filter(Boolean);\n\n        if (disableList.includes(page)) {\n            console.warn(`${Common.component} plugin is disabled on this page.`);\n            return;\n        }\n\n        const regexPattern = getGlobalConfig(editor, \"disable.plugin.pages.regex\", \"\");\n        if (regexPattern) {\n            try {\n                const regex = new RegExp(regexPattern);\n                if (regex.test(page)) {\n                    console.warn(`${Common.component} plugin is disabled on this page.`);\n                    return;\n                }\n            } catch (/** @type {any} */ ex) {\n                console.error(\"Please check disable.plugin.pages.regex: Invalid regular expression:\", ex.message);\n            }\n        }\n\n        // Register the Icon.\n        editor.ui.registry.addIcon(Common.icon, buttonImage.html);\n\n        const storage = getUserStorage(editor);\n        const widgetsDict = getWidgetDict(editor);\n\n        /**\n         * This helper function makes adjustments to the context required for the widget.\n         * @param {import('./options').Widget} widget\n         * @param {string} behavior - none / default / lastused\n         * @param {boolean} includeRepeatable - should repeatable fields be populated?\n         * @returns {Record<string, *>}\n         */\n        const contextMerger = (widget, behavior, includeRepeatable) => {\n            /** @type {Record<string, *>} */\n            let ctx = widget.defaultsWithRepeatable(includeRepeatable) || {};\n            // Should it load recently used values?\n            if (behavior === 'lastused') {\n                const ctxStored = storage.getRecentUsed().find(e => e.key === widget.key)?.p || {};\n                ctx = {...ctx, ...removeRndFromCtx(ctxStored, widget.parameters)};\n            }\n            return ctx;\n        };\n\n        // Register the Toolbar Button or SplitButton - including recently used widgets\n        const defaultAction = () => {\n            const widgetPickCtrl = getWidgetPickCtrl(editor);\n            widgetPickCtrl.handleAction();\n        };\n        const toolbarButtonSpec = {\n            icon: Common.icon,\n            tooltip: widgetNameTitle,\n            onAction: defaultAction\n        };\n        const splitButtonBehavior = getGlobalConfig(editor, 'insert.splitbutton.behavior', 'lastused');\n        if (splitButtonBehavior === 'none') {\n            editor.ui.registry.addButton(Common.component, toolbarButtonSpec);\n        } else {\n            /**\n             *\n             * @param {((items: *[]) => void) } callback\n             */\n            const splitbuttonFetch = (callback) => {\n                const isSelectMode = editor.selection.getContent().trim().length > 0;\n                const items = storage.getRecentUsed()\n                    .filter(e => {\n                        const widget = widgetsDict[e.key];\n                        return widget?.name && (!isSelectMode || widget.isSelectCapable());\n                    })\n                    .map(e => ({\n                        type: 'choiceitem',\n                        text: widgetsDict[e.key]?.name,\n                        value: e.key\n                    }));\n                callback(items);\n            };\n            /**\n             * @param {*} api\n             * @param {string} key\n             */\n            const splitbuttonAction = (api, key) => {\n                const widgetPickCtrl = getWidgetPickCtrl(editor);\n                const widget = widgetsDict[key];\n                if (!widget) {\n                    return;\n                }\n                const ctx = contextMerger(widget, splitButtonBehavior, true);\n                widgetPickCtrl.handlePickModalAction(widget, true, ctx);\n            };\n            editor.ui.registry.addSplitButton(Common.component, {\n                ...toolbarButtonSpec,\n                columns: 1,\n                fetch: splitbuttonFetch,\n                onItemAction: splitbuttonAction\n            });\n        }\n\n        // Add the Menu Item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addMenuItem(Common.component, {\n            icon: Common.icon,\n            text: widgetNameTitle,\n            onAction: defaultAction,\n        });\n\n        const getMatchedWidgets = (/** @type {string} */ pattern) => {\n            return Object.values(widgetsDict).filter((w) => !w.isFilter() && searchComp(w.name, pattern));\n        };\n\n        // Add an Autocompleter @<search widget name>.\n        const autoCompleteBehavior = getGlobalConfig(editor, 'insert.autocomplete.behavior', 'lastused');\n        const autoCompleteTrigger = getGlobalConfig(editor, 'insert.autocomplete.symbol', '@');\n        if (autoCompleteBehavior !== 'none' && autoCompleteTrigger) {\n            /**\n             * @param {string} pattern\n             * @returns {Promise<{type: string, value: string, text: string}[]>}\n             */\n            const autocompleterFetch = (pattern) => {\n                /** @type {{type: string, value: string, text: string}[]} */\n                const results = [];\n                getMatchedWidgets(pattern).forEach((/** @type {import('./options').Widget} */ w) => {\n                    const varname = w.prop('autocomplete')?.trim();\n                    const param = findVariableByName(varname, w.parameters);\n                    if (!param?.options) {\n                        results.push({\n                            type: 'autocompleteitem',\n                            value: w.key,\n                            text: w.name\n                        });\n                    } else {\n                        param.options.forEach(opt => {\n                            let value = opt;\n                            let label = opt;\n                            if (typeof opt === 'object') {\n                                value = opt.v;\n                                label = opt.l;\n                            }\n                            results.push({\n                                type: 'autocompleteitem',\n                                value: `${w.key}|${varname}:${value}`,\n                                text: w.name + \" \" + label\n                            });\n                        });\n                    }\n                });\n                return Promise.resolve(results);\n            };\n            /**\n             * @param {*} api\n             * @param {Range} rng\n             * @param {string} value\n             */\n            const autocompleterAction = (api, rng, value) => {\n                api.hide();\n                rng = rng || api.getRange();\n                const pair = value.split('|');\n                const key = pair[0].trim();\n                const widget = widgetsDict[key];\n                if (!widget) {\n                    return;\n                }\n                const ctx = contextMerger(widget, autoCompleteBehavior, true);\n                if (pair.length === 2) {\n                    const [varname, varvalue] = pair[1].split(\":\");\n                    ctx[varname] = varvalue;\n                }\n                editor.selection.setRng(rng);\n                editor.insertContent('');\n                const widgetPickCtrl = getWidgetPickCtrl(editor);\n                widgetPickCtrl.handlePickModalAction(widget, true, ctx);\n            };\n\n            editor.ui.registry.addAutocompleter(Common.component + '_autocompleter', {\n                trigger: autoCompleteTrigger,\n                columns: 1,\n                minChars: 3,\n                fetch: autocompleterFetch,\n                onAction: autocompleterAction\n            });\n        }\n\n        // Initialize context menus, styles and scripts into editor's iframe\n        initializeEditor(editor);\n    };\n};\n\n/**\n * If the user has selected automatic apply of filters on startup, apply them!\n * @param {import('./plugin').TinyMCE} editor\n */\nconst applyAutoFilters = (editor) => {\n    const storage = getUserStorage(editor);\n    const requiresFilter = storage.getFromLocal(\"startup.filters\", \"\").split(\",\");\n\n    if (requiresFilter.length > 0) {\n        const editorOptions = getEditorOptions(editor);\n        const widgetsFound = requiresFilter.map(key => editorOptions.widgetDict[key]).filter(w => w !== undefined);\n        const applyWidgetFilter = applyWidgetFilterFactory(editor, coreStr);\n\n        // Apply the filters and show the result\n        widgetsFound.forEach(w => applyWidgetFilter(w.template ?? '', true));\n\n        // Apply it also on save\n        const pageForm = document.querySelector('form.mform');\n        if (pageForm && pageForm.querySelector('div[data-fieldtype=\"editor\"]')) {\n            pageForm.addEventListener('submit', () => {\n                widgetsFound.forEach(w => applyWidgetFilter(w.template ?? '', true));\n                return true;\n            });\n        }\n    }\n};\n\n/**\n * Inject styles and scripts into editor's iframe\n * @param {import('./plugin').TinyMCE} editor\n */\nfunction initializeEditor(editor) {\n    editor.once('SetContent', () => {\n        // Run all subscribers\n        applyAutoFilters(editor);\n        getListeners('contentSet').forEach(listener => listener(editor));\n    });\n    // Add the bootstrap, CSS, etc... into the editor's iframe\n    editor.on('init', async() => {\n        // On init editor.dom is ready\n        // Inject css all generated by Moodle into the editor's iframe\n        // http://localhost:4141/theme/styles.php/boost/1721728984_1/all\n\n        if (isShareCss(editor)) {\n            // TODO: Missing themesubrevision\n            const subversion = 1;\n            // @ts-ignore\n            const allCss = `${cfg.wwwroot}/theme/styles.php/${cfg.theme}/${cfg.themerev}_${subversion}/all`;\n            editor.dom.loadCSS(allCss);\n        }\n\n        // Inject css from site Admin\n        let adminCss = (getAdditionalCss(editor) ?? '').trim();\n        if (adminCss) {\n            // Commented URLs are interpreted as loadCss\n            const regex = /\\/\\*{2}\\s+(http(s?):\\/\\/.*)\\s+\\*{2}\\//gm;\n            adminCss = adminCss.replace(regex, (_, $1) => {\n                editor.dom.loadCSS($1);\n                return '';\n            });\n            if (adminCss.trim()) {\n                editor.dom.addStyle(adminCss);\n            }\n        }\n\n        if (parseInt(getGlobalConfig(editor, 'enable.contextmenu.level', '1')) > 0) {\n            // Initialize context toolbars and menus\n            initContextActions(editor);\n        }\n\n        // Detect jQuery and Boostrap versions.\n        // @ts-ignore\n        const defaultBsVersion = window.M?.cfg?.version?.startsWith('5.') ? '5.3.8' : '4.6.2';\n        const bsVersion = getGlobalConfig(editor, 'tiny.iframe.jsbootstrap.version', defaultBsVersion);\n        const defaultJqVersion = bsVersion.startsWith(\"5.\") ? 'none' : '3.6.1';\n        let jqVersion = getGlobalConfig(editor, 'tiny.iframe.jquery.version', defaultJqVersion);\n        if (jqVersion === 'none' && bsVersion.startsWith('4.')) {\n            jqVersion = '3.6.1';\n        }\n        const requiresJquery = jqVersion !== 'none';\n        const head = editor.getDoc().querySelector(\"head\");\n\n\n        try {\n            // Load jQuery if required\n            if (requiresJquery) {\n                await loadScriptAsync(editor, `https://code.jquery.com/jquery-${jqVersion}.min.js`);\n            }\n\n            // Load Bootstrap if required (bundle already includes Popper)\n            if (bsVersion !== 'none') {\n                await loadScriptAsync(\n                    editor,\n                    `https://cdn.jsdelivr.net/npm/bootstrap@${bsVersion}/dist/js/bootstrap.bundle.min.js`\n                );\n            }\n\n            // Initialize Bootstrap components depending on version\n            if (bsVersion.startsWith('5.')) {\n                // Bootstrap 5 – no jQuery, use vanilla JS API\n                const initScript = editor.dom.create('script');\n                initScript.id = 'init_bs_comp';\n                initScript.innerHTML = `\n                    document.querySelectorAll('[data-bs-toggle=\"popover\"]').forEach(el => {\n                        new bootstrap.Popover(el, { trigger: 'hover' });\n                    });\n                `;\n                head.appendChild(initScript);\n            } else if (requiresJquery && bsVersion.startsWith('4.')) {\n                // Bootstrap 4 – jQuery-based initialization\n                const initScript = editor.dom.create('script');\n                initScript.id = 'init_bs_comp';\n                initScript.innerHTML = `\n                    $(document).ready(function() {\n                        $('body').popover({\n                            selector: '[data-toggle=\"popover\"]',\n                            trigger: 'hover'\n                        });\n                    });\n                `;\n                head.appendChild(initScript);\n            }\n        } catch (ex) {\n            console.error(\"Error loading scripts into editor's iframe: \", ex);\n        }\n\n        // Run all subscribers\n        getListeners('onInit').forEach(listener => listener(editor));\n    });\n}\n\n"],"names":["async","widgetNameTitle","buttonImage","Promise","all","coreStr","get_string","Common","component","editor","forEach","listener","page","Shared","currentScope","split","map","p","trim","filter","Boolean","includes","console","warn","regexPattern","RegExp","test","ex","error","message","ui","registry","addIcon","icon","html","storage","widgetsDict","contextMerger","widget","behavior","includeRepeatable","ctx","defaultsWithRepeatable","ctxStored","getRecentUsed","find","e","key","parameters","defaultAction","handleAction","toolbarButtonSpec","tooltip","onAction","splitButtonBehavior","addButton","splitbuttonFetch","callback","isSelectMode","selection","getContent","length","name","isSelectCapable","type","text","_widgetsDict$e$key","value","splitbuttonAction","api","widgetPickCtrl","handlePickModalAction","addSplitButton","columns","fetch","onItemAction","addMenuItem","autoCompleteBehavior","autoCompleteTrigger","autocompleterFetch","pattern","results","Object","values","w","isFilter","getMatchedWidgets","varname","prop","_w$prop","param","options","opt","label","v","l","push","resolve","autocompleterAction","rng","hide","getRange","pair","varvalue","setRng","insertContent","addAutocompleter","trigger","minChars","once","requiresFilter","getFromLocal","editorOptions","widgetsFound","widgetDict","undefined","applyWidgetFilter","template","pageForm","document","querySelector","addEventListener","applyAutoFilters","on","subversion","allCss","cfg","wwwroot","theme","themerev","dom","loadCSS","adminCss","regex","replace","_","$1","addStyle","parseInt","defaultBsVersion","window","M","version","startsWith","bsVersion","defaultJqVersion","jqVersion","requiresJquery","head","getDoc","initScript","create","id","innerHTML","appendChild","initializeEditor"],"mappings":";;;;;;;0OAoCwBA,gBAEbC,gBAAiBC,mBAAqBC,QAAQC,IAAI,CACrDC,QAAQC,WAAW,WAAYC,gBAAOC,YACtC,yBAAe,OAAQD,gBAAOC,oBAI1BC,cAEC,4BAAgBA,2CAKR,SAASC,SAAQC,UAAYA,SAASF,gBAG7CG,KAAOC,gBAAOC,iBACA,4BAAgBL,OAAQ,uBAAwB,IAC/DM,MAAM,KACNC,KAAIC,GAAKA,EAAEC,SACXC,OAAOC,SAEIC,SAAST,kBACrBU,QAAQC,KAAM,GAAEhB,gBAAOC,oDAIrBgB,cAAe,4BAAgBf,OAAQ,6BAA8B,OACvEe,oBAEkB,IAAIC,OAAOD,cACfE,KAAKd,kBACXU,QAAQC,KAAM,GAAEhB,gBAAOC,8CAG7B,MAA0BmB,IACxBL,QAAQM,MAAM,uEAAwED,GAAGE,SAKjGpB,OAAOqB,GAAGC,SAASC,QAAQzB,gBAAO0B,KAAM/B,YAAYgC,YAE9CC,SAAU,uCAAe1B,QACzB2B,aAAc,0BAAc3B,QAS5B4B,cAAgB,CAACC,OAAQC,SAAUC,yBAEjCC,IAAMH,OAAOI,uBAAuBF,oBAAsB,MAE7C,aAAbD,SAAyB,iCACnBI,yCAAYR,QAAQS,gBAAgBC,MAAKC,GAAKA,EAAEC,MAAQT,OAAOS,oEAAM9B,IAAK,GAChFwB,IAAM,IAAIA,QAAQ,0BAAiBE,UAAWL,OAAOU,oBAElDP,KAILQ,cAAgB,MACK,wCAAkBxC,QAC1ByC,gBAEbC,kBAAoB,CACtBlB,KAAM1B,gBAAO0B,KACbmB,QAASnD,gBACToD,SAAUJ,eAERK,qBAAsB,4BAAgB7C,OAAQ,8BAA+B,eACvD,SAAxB6C,oBACA7C,OAAOqB,GAAGC,SAASwB,UAAUhD,gBAAOC,UAAW2C,uBAC5C,OAKGK,iBAAoBC,iBAChBC,aAAejD,OAAOkD,UAAUC,aAAa1C,OAAO2C,OAAS,EAWnEJ,SAVctB,QAAQS,gBACjBzB,QAAO2B,UACER,OAASF,YAAYU,EAAEC,YACtBT,MAAAA,cAAAA,OAAQwB,SAAUJ,cAAgBpB,OAAOyB,sBAEnD/C,KAAI8B,iCAAM,CACPkB,KAAM,aACNC,gCAAM7B,YAAYU,EAAEC,0CAAdmB,mBAAoBJ,KAC1BK,MAAOrB,EAAEC,UAQfqB,kBAAoB,CAACC,IAAKtB,aACtBuB,gBAAiB,wCAAkB7D,QACnC6B,OAASF,YAAYW,SACtBT,oBAGCG,IAAMJ,cAAcC,OAAQgB,qBAAqB,GACvDgB,eAAeC,sBAAsBjC,QAAQ,EAAMG,MAEvDhC,OAAOqB,GAAGC,SAASyC,eAAejE,gBAAOC,UAAW,IAC7C2C,kBACHsB,QAAS,EACTC,MAAOlB,iBACPmB,aAAcP,oBAMtB3D,OAAOqB,GAAGC,SAAS6C,YAAYrE,gBAAOC,UAAW,CAC7CyB,KAAM1B,gBAAO0B,KACbgC,KAAMhE,gBACNoD,SAAUJ,sBAQR4B,sBAAuB,4BAAgBpE,OAAQ,+BAAgC,YAC/EqE,qBAAsB,4BAAgBrE,OAAQ,6BAA8B,QACrD,SAAzBoE,sBAAmCC,oBAAqB,OAKlDC,mBAAsBC,gBAElBC,QAAU,SAdE,CAAuBD,SACtCE,OAAOC,OAAO/C,aAAajB,QAAQiE,IAAOA,EAAEC,aAAc,oBAAWD,EAAEtB,KAAMkB,WAchFM,CAAkBN,SAAStE,SAAmD0E,sBACpEG,wBAAUH,EAAEI,KAAK,0CAAPC,QAAwBvE,OAClCwE,OAAQ,4BAAmBH,QAASH,EAAEpC,YACvC0C,MAAAA,OAAAA,MAAOC,QAORD,MAAMC,QAAQjF,SAAQkF,UACdzB,MAAQyB,IACRC,MAAQD,IACO,iBAARA,MACPzB,MAAQyB,IAAIE,EACZD,MAAQD,IAAIG,GAEhBd,QAAQe,KAAK,CACThC,KAAM,mBACNG,MAAQ,GAAEiB,EAAErC,OAAOwC,WAAWpB,QAC9BF,KAAMmB,EAAEtB,KAAO,IAAM+B,WAhB7BZ,QAAQe,KAAK,CACThC,KAAM,mBACNG,MAAOiB,EAAErC,IACTkB,KAAMmB,EAAEtB,UAkBb3D,QAAQ8F,QAAQhB,UAOrBiB,oBAAsB,CAAC7B,IAAK8B,IAAKhC,SACnCE,IAAI+B,OACJD,IAAMA,KAAO9B,IAAIgC,iBACXC,KAAOnC,MAAMpD,MAAM,KACnBgC,IAAMuD,KAAK,GAAGpF,OACdoB,OAASF,YAAYW,SACtBT,oBAGCG,IAAMJ,cAAcC,OAAQuC,sBAAsB,MACpC,IAAhByB,KAAKzC,OAAc,OACZ0B,QAASgB,UAAYD,KAAK,GAAGvF,MAAM,KAC1C0B,IAAI8C,SAAWgB,SAEnB9F,OAAOkD,UAAU6C,OAAOL,KACxB1F,OAAOgG,cAAc,KACE,wCAAkBhG,QAC1B8D,sBAAsBjC,QAAQ,EAAMG,MAGvDhC,OAAOqB,GAAGC,SAAS2E,iBAAiBnG,gBAAOC,UAAY,iBAAkB,CACrEmG,QAAS7B,oBACTL,QAAS,EACTmC,SAAU,EACVlC,MAAOK,mBACP1B,SAAU6C,gCAwCAzF,QACtBA,OAAOoG,KAAK,cAAc,KA5BJpG,CAAAA,eAEhBqG,gBADU,uCAAerG,QACAsG,aAAa,kBAAmB,IAAIhG,MAAM,QAErE+F,eAAejD,OAAS,EAAG,OACrBmD,eAAgB,6BAAiBvG,QACjCwG,aAAeH,eAAe9F,KAAI+B,KAAOiE,cAAcE,WAAWnE,OAAM5B,QAAOiE,QAAW+B,IAAN/B,IACpFgC,mBAAoB,kCAAyB3G,OAAQJ,SAG3D4G,aAAavG,SAAQ0E,GAAKgC,kBAAkBhC,EAAEiC,UAAY,IAAI,WAGxDC,SAAWC,SAASC,cAAc,cACpCF,UAAYA,SAASE,cAAc,iCACnCF,SAASG,iBAAiB,UAAU,KAChCR,aAAavG,SAAQ0E,GAAKgC,kBAAkBhC,EAAEiC,UAAY,IAAI,MACvD,OAafK,CAAiBjH,oCACJ,cAAcC,SAAQC,UAAYA,SAASF,aAG5DA,OAAOkH,GAAG,QAAQ3H,gEAKV,uBAAWS,QAAS,OAEdmH,WAAa,EAEbC,OAAU,GAAEC,IAAIC,4BAA4BD,IAAIE,SAASF,IAAIG,YAAYL,iBAC/EnH,OAAOyH,IAAIC,QAAQN,YAInBO,WAAY,6BAAiB3H,SAAW,IAAIS,UAC5CkH,SAAU,OAEJC,MAAQ,0CACdD,SAAWA,SAASE,QAAQD,OAAO,CAACE,EAAGC,MACnC/H,OAAOyH,IAAIC,QAAQK,IACZ,MAEPJ,SAASlH,QACTT,OAAOyH,IAAIO,SAASL,UAIxBM,UAAS,4BAAgBjI,OAAQ,2BAA4B,MAAQ,uCAElDA,cAKjBkI,mCAAmBC,OAAOC,wDAAGf,0EAAKgB,gEAASC,WAAW,MAAQ,QAAU,QACxEC,WAAY,4BAAgBvI,OAAQ,kCAAmCkI,kBACvEM,iBAAmBD,UAAUD,WAAW,MAAQ,OAAS,YAC3DG,WAAY,4BAAgBzI,OAAQ,6BAA8BwI,kBACpD,SAAdC,WAAwBF,UAAUD,WAAW,QAC7CG,UAAY,eAEVC,eAA+B,SAAdD,UACjBE,KAAO3I,OAAO4I,SAAS7B,cAAc,eAKnC2B,sBACM,yBAAgB1I,OAAS,kCAAiCyI,oBAIlD,SAAdF,iBACM,yBACFvI,OACC,0CAAyCuI,6CAK9CA,UAAUD,WAAW,MAAO,OAEtBO,WAAa7I,OAAOyH,IAAIqB,OAAO,UACrCD,WAAWE,GAAK,eAChBF,WAAWG,UAAa,uNAKxBL,KAAKM,YAAYJ,iBACd,GAAIH,gBAAkBH,UAAUD,WAAW,MAAO,OAE/CO,WAAa7I,OAAOyH,IAAIqB,OAAO,UACrCD,WAAWE,GAAK,eAChBF,WAAWG,UAAa,8RAQxBL,KAAKM,YAAYJ,aAEvB,MAAO3H,IACLL,QAAQM,MAAM,+CAAgDD,gCAIrD,UAAUjB,SAAQC,UAAYA,SAASF,aAnIpDkJ,CAAiBlJ"}