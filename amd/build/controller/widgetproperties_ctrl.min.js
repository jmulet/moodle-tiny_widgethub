define("tiny_widgethub/controller/widgetproperties_ctrl",["exports","../controller/form_ctrl","../service/modal_service","../util","jquery"],(function(_exports,_form_ctrl,_modal_service,_util,_jquery){var obj;
/**
   * Tiny WidgetHub plugin.
   *
   * @module      tiny_widgethub/plugin
   * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.WidgetPropertiesCtrl=void 0,_exports.getWidgetPropertiesCtrl=function(editor){let instance=widgetPropertiesCtrlInstances.get(editor);instance||(instance=new WidgetPropertiesCtrl(editor,(0,_form_ctrl.getFormCtrl)(editor),(0,_modal_service.getModalSrv)(),_jquery.default),widgetPropertiesCtrlInstances.set(editor,instance));return instance},_jquery=(obj=_jquery)&&obj.__esModule?obj:{default:obj};class WidgetPropertiesCtrl{modal=null;constructor(editor,formCtrl,modalSrv,jQuery){this.editor=editor,this.formCtrl=formCtrl,this.modalSrv=modalSrv,this.jQuery=jQuery}async show(currentContext){if(!currentContext.widget)return void console.error("Missing widget on currentContext");const widget=currentContext.widget,hostId=this.editor.id,elem=currentContext.elem;if(!elem||null==widget||!widget.hasBindings())return void console.error("Invalid widget definition ",widget);const bindingsDOM=Object.create(null),paramValues=Object.create(null),parametersWithBindings=widget.parameters.filter((param=>{if("repeatable"===param.type){var _param$fields;return(null===(_param$fields=param.fields)||void 0===_param$fields?void 0:_param$fields.some((f=>void 0!==f.bind)))&&void 0!==param.item_selector||"object"==typeof param.bind}return null!=param.bind}));parametersWithBindings.forEach((param=>{if(param.bind&&"repeatable"!==param.type){const binding=(0,_util.createBinding)(param.bind,elem,typeof param.value);if(binding){const pname=param.name;bindingsDOM[pname]=binding,paramValues[pname]=binding.getValue()}}else if("repeatable"===param.type)if("string"==typeof param.item_selector){const lstValues=[],lstBindings=[];paramValues[param.name]=lstValues,bindingsDOM[param.name]=lstBindings,elem.find(param.item_selector).each(((_,itemRoot)=>{var _param$fields2;const $itemRoot=this.jQuery(itemRoot),objValue={},objBinding={};null===(_param$fields2=param.fields)||void 0===_param$fields2||_param$fields2.filter((f=>void 0!==f.bind)).forEach((f=>{const binding=(0,_util.createBinding)(f.bind,$itemRoot,typeof f.value);binding&&(objBinding[f.name]=binding,objValue[f.name]=binding.getValue())})),lstValues.push(objValue),lstBindings.push(objBinding)}))}else if("object"==typeof param.bind){const binding=(0,_util.createBinding)(param.bind,elem);if(binding){const pname=param.name;bindingsDOM[pname]=binding,paramValues[pname]=binding.getValue()}}}));const controls=parametersWithBindings.map((param=>this.formCtrl.createControlHTML(hostId,param,paramValues[param.name]))),ctxData={name:widget.name,controls:controls};this.modal=await this.modalSrv.create("context",ctxData,(()=>{var _this$modal;null===(_this$modal=this.modal)||void 0===_this$modal||_this$modal.destroy(),this.modal=null})),this.formCtrl.attachPickers(this.modal.body),this.formCtrl.applyFieldWatchers(this.modal.body,paramValues,widget,!1),this.modal.footer.find("button.tiny_widgethub-btn-secondary").on("click",(()=>{var _this$modal2;null===(_this$modal2=this.modal)||void 0===_this$modal2||_this$modal2.destroy()})),this.modal.footer.find("button.tiny_widgethub-btn-primary").on("click",(()=>{var _this$modal3,_this$modal3$body,_this$modal4;const form=null===(_this$modal3=this.modal)||void 0===_this$modal3||null===(_this$modal3$body=_this$modal3.body)||void 0===_this$modal3$body?void 0:_this$modal3$body.find("form");let updatedValues=paramValues;form&&(updatedValues=this.formCtrl.extractFormParameters(widget,form,!0)),null===(_this$modal4=this.modal)||void 0===_this$modal4||_this$modal4.destroy(),Object.keys(bindingsDOM).forEach((key=>{const val=updatedValues[key];if(void 0!==val)if(Array.isArray(val)&&Array.isArray(bindingsDOM[key])){const zipped=val.map(((v,i)=>[v,bindingsDOM[key][i]])).slice(0,Math.min(val.length,bindingsDOM[key].length));for(const[valueObject,bindingObject]of zipped)valueObject&&"object"==typeof valueObject&&bindingObject&&"object"==typeof bindingObject&&Object.keys(valueObject).forEach((objKey=>{var _bindingObject$objKey;null===(_bindingObject$objKey=bindingObject[objKey])||void 0===_bindingObject$objKey||_bindingObject$objKey.setValue(valueObject[objKey])}))}else{var _bindingsDOM$key;null===(_bindingsDOM$key=bindingsDOM[key])||void 0===_bindingsDOM$key||_bindingsDOM$key.setValue(val)}}))}));try{this.modal.body.popover({container:"body",selector:"[data-toggle=popover][data-trigger=hover]",trigger:"hover"})}catch(ex){}this.modal.show()}close(){var _this$modal5;null===(_this$modal5=this.modal)||void 0===_this$modal5||_this$modal5.destroy()}}_exports.WidgetPropertiesCtrl=WidgetPropertiesCtrl;const widgetPropertiesCtrlInstances=new Map}));

//# sourceMappingURL=widgetproperties_ctrl.min.js.map