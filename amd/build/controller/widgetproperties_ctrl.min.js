define("tiny_widgethub/controller/widgetproperties_ctrl",["exports","../controller/form_ctrl","../service/modal_service","../util"],(function(_exports,_form_ctrl,_modal_service,_util){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.WidgetPropertiesCtrl=void 0,_exports.getWidgetPropertiesCtrl=function(editor){let instance=widgetPropertiesCtrlInstances.get(editor);instance||(instance=new WidgetPropertiesCtrl(editor,(0,_form_ctrl.getFormCtrl)(editor),(0,_modal_service.getModalSrv)()),widgetPropertiesCtrlInstances.set(editor,instance));return instance};
/**
   * Tiny WidgetHub plugin.
   *
   * @module      tiny_widgethub/plugin
   * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
class WidgetPropertiesCtrl{modal=null;constructor(editor,formCtrl,modalSrv){this.editor=editor,this.formCtrl=formCtrl,this.modalSrv=modalSrv}async show(currentContext){if(!currentContext.widget)return void console.error("Missing widget on currentContext");const widget=currentContext.widget,hostId=this.editor.id,elem=currentContext.elem;if(!elem||null==widget||!widget.hasBindings())return void console.error("Invalid widget definition ",widget);const bindingsDOM={},paramValues={};widget.parameters.filter((param=>null!=param.bind)).forEach((param=>{if(!param.bind)return;const binding=(0,_util.createBinding)(param.bind,elem,typeof param.value);binding&&(bindingsDOM[param.name]=binding,paramValues[param.name]=binding.getValue())}));const controls=widget.parameters.filter((param=>param.bind)).map((param=>this.formCtrl.createControlHTML(hostId,param,paramValues[param.name]))),ctxData={name:widget.name,controls:controls};this.modal=await this.modalSrv.create("context",ctxData,(()=>{var _this$modal;null===(_this$modal=this.modal)||void 0===_this$modal||_this$modal.destroy(),this.modal=null})),this.formCtrl.attachPickers(this.modal.body),this.formCtrl.applyFieldWatchers(this.modal.body,paramValues,widget,!1),this.modal.footer.find("button.btn-secondary").on("click",(()=>{var _this$modal2;null===(_this$modal2=this.modal)||void 0===_this$modal2||_this$modal2.destroy()})),this.modal.footer.find("button.btn-primary").on("click",(()=>{var _this$modal3,_this$modal3$body,_this$modal4;const form=null===(_this$modal3=this.modal)||void 0===_this$modal3||null===(_this$modal3$body=_this$modal3.body)||void 0===_this$modal3$body?void 0:_this$modal3$body.find("form");let updatedValues=paramValues;form&&(updatedValues=this.formCtrl.extractFormParameters(widget,form,!0)),null===(_this$modal4=this.modal)||void 0===_this$modal4||_this$modal4.destroy(),Object.keys(bindingsDOM).forEach((key=>{bindingsDOM[key].setValue(updatedValues[key])}))}));try{this.modal.body.popover({container:"body",selector:"[data-toggle=popover][data-trigger=hover]",trigger:"hover"})}catch(ex){}this.modal.show()}close(){var _this$modal5;null===(_this$modal5=this.modal)||void 0===_this$modal5||_this$modal5.destroy()}}_exports.WidgetPropertiesCtrl=WidgetPropertiesCtrl;const widgetPropertiesCtrlInstances=new Map}));

//# sourceMappingURL=widgetproperties_ctrl.min.js.map