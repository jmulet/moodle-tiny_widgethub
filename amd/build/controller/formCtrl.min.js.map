{"version":3,"file":"formCtrl.min.js","sources":["../../src/controller/formCtrl.js"],"sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {capitalize, cleanParameterName, evalInContext, genID, stream, toHexColor} from '../util';\n\n\nconst questionPopover = '{{#tooltip}}<a href=\"javascript:void(0)\" data-toggle=\"popover\" data-trigger=\"hover\" data-content=\"{{tooltip}}\"><i class=\"fa fas fa-question-circle text-info\"></i></a>{{/tooltip}}';\n\nexport const Templates = {\n   TEXTFIELDTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row{{#hidden}} tiny_widgethub-hidden{{/hidden}}\"><label class=\"col-sm-5 col-form-label\" for=\"{{elementid}}_ftmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <div class=\"col-sm-7\"><input type=\"text\" id=\"{{elementid}}_ftmpl\" class=\"form-control\" data-bar=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalue}}\"/></div>\n   </div>`,\n\n   IMAGETEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row{{#hidden}} tiny_widgethub-hidden{{/hidden}}\"><label class=\"col-sm-5 col-form-label\" for=\"{{elementid}}_ftmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <div class=\"col-sm-7\">\n   <input type=\"text\" id=\"{{elementid}}_ftmpl\" class=\"form-control d-inline-block w-75\" data-bar=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalue}}\"/>\n   <button class=\"whb-image-picker btn btn-sm btn-secondary d-inline-block\" title=\"Search\"><i class=\"fas fa fa-search\"></i></button>\n   </div>\n   </div>`,\n\n   NUMERICTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row{{#hidden}} tiny_widgethub-hidden{{/hidden}}\"><label class=\"col-sm-5 col-form-label\"  for=\"{{elementid}}_fntmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <div class=\"col-sm-7\"><input type=\"number\" id=\"{{elementid}}_fntmpl\" class=\"form-control\" data-bar=\"{{varname}}\" {{{minMax}}} {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalue}}\"/></div>\n   </div>`,\n\n   COLORTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row{{#hidden}} tiny_widgethub-hidden{{/hidden}}\"><label class=\"col-sm-5 col-form-label\"  for=\"{{elementid}}_fntmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <div class=\"col-sm-7\"><input type=\"color\" id=\"{{elementid}}_fntmpl\" class=\"form-control\" data-bar=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalue}}\"/></div>\n   </div>`,\n\n   TEXTAREATEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group{{#hidden}} tiny_widgethub-hidden{{/hidden}}\"><label for=\"{{elementid}}_tatmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <textarea id=\"{{elementid}}_tatmpl\" rows=\"3\" class=\"form-control\" data-bar=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} {{#tooltip}}title=\"{{tooltip}}\"{{/tooltip}}>{{defaultvalue}}</textarea>\n   </div>`,\n\n   CHECKBOXTEMPLATE: `<div id=\"{{elementid}}\" class=\"d-table w-75 m-2{{#hidden}} tiny_widgethub-hidden{{/hidden}}\">\n   <label>\n   <input title=\"{{varname}}\" id=\"{{elementid}}_cbtmpl\" {{#disabled}}disabled{{/disabled}} type=\"checkbox\" data-bar=\"{{varname}}\" value=\"{{defaultvalue}}\" {{#defaultvalue}}checked{{/defaultvalue}}/></span>\n   {{vartitle}}</label> <span>&nbsp;&nbsp;  ${questionPopover}</span>\n   </div>`,\n\n   SELECTTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row{{#hidden}} tiny_widgethub-hidden{{/hidden}}\">\n   <label class=\"col-sm-5 col-form-label\" for=\"{{elementid}}_stmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <div class=\"col-sm-7\">\n   <select id=\"{{elementid}}_stmpl\" class=\"form-control\" data-bar=\"{{varname}}\" {{#if disabled}}disabled{{/if}} {{#if tooltip}}title=\"{{tooltip}}\"{{/if}}>\n   {{#options}}\n   <option value=\"{{optionValue}}\"{{#selected}} selected{{/selected}}>{{optionLabel}}</option>\n   {{/options}}\n   </select>\n   </div>\n   </div>`\n};\n\n\nexport class FormCtrl {\n  /**\n   * @param {import('../plugin').TinyMCE} editor\n   * @param {import('../service/userStorageSrv').UserStorageSrv} userStorage\n   * @param {import('../service/templateSrv').TemplateSrv} templateSrv\n   * @param {import('../commands').FileSrv} fileSrv\n   * @param {JQueryStatic} jQuery\n   */\n   constructor(editor, userStorage, templateSrv, fileSrv, jQuery) {\n      /** @type {import('../plugin').TinyMCE} */\n      this.editor = editor;\n      /** @type {import('../service/userStorageSrv').UserStorageSrv} */\n      this.storage = userStorage;\n      /** @type {import('../service/templateSrv').TemplateSrv} */\n      this.templateSrv = templateSrv;\n      /** @type {import('../commands').FileSrv} */\n      this.fileSrv = fileSrv;\n      /** @type {JQueryStatic} */\n      this.jQuery = jQuery;\n   }\n\n   /**\n    * @param {import('../options').Widget} widget\n    * @returns {*} - The generated context\n    */\n   createContext(widget) {\n      /** @type {boolean} */\n      const mustSaveAll = this.storage.getFromLocal('saveall', false);\n      /** @type {Object.<string, any>} */\n      const saveAllData = this.storage.getFromLocal('saveall_data', {});\n      /** @type {Object.<string, any>} */\n      const values = this.storage.getFromLocal(\"values\", {});\n      const defaults = widget.defaults;\n\n      /**\n       * @param {import('../options').Param} param\n       * @returns {any}\n       */\n      const obtainCurrentValue = (param) => {\n         const sname = widget.name;\n         const pname = param.name;\n         let currentval = defaults[pname];\n         if (mustSaveAll) {\n            // Search the last used value of this parameter\n            if ((saveAllData[sname]?.[pname] ?? null) !== null) {\n               currentval = saveAllData[sname][pname];\n            }\n         }\n         if (pname.startsWith(\"$\") && values[pname]) {\n            currentval = values[pname];\n         }\n         return currentval;\n      };\n\n      const controls = widget.parameters.map(param => this.createControlHTML(this.editor.id, param, obtainCurrentValue(param)));\n\n      const ctx = {\n         idTabpane: genID(),\n         selectMode: this.editor.selection.getContent().trim().length > 0,\n         name: widget.name,\n         instructions: widget.instructions,\n         filter: widget.isFilter(),\n         controls: controls\n      };\n      return ctx;\n   }\n\n   /**\n    * @param {string} hostId - The id of the editor\n    * @param {import('../options').Param} param - The parameter object defining the control\n    * @param {any} defaultValue - Default values for all parameters\n    * @returns {string} - The generated HTML for this control\n    */\n   createControlHTML(hostId, param, defaultValue) {\n      let markup = '';\n      const pname = cleanParameterName(param.name);\n      const generalCtx = {\n         elementid: hostId + \"_\" + pname,\n         varname: pname,\n         vartitle: param.title,\n         defaultvalue: defaultValue,\n         tooltip: param.tip || param.tooltip,\n         disabled: param.editable === false,\n         hidden: param.hidden === true\n      };\n      if (param.type === 'textarea') {\n         markup = this.templateSrv.renderMustache(Templates.TEXTAREATEMPLATE, generalCtx);\n      } else if (param.type === 'numeric') {\n         let minMax = \"\";\n         if (param.min) {\n            minMax += `min=\"${param.min}\"`;\n         }\n         if (param.max) {\n            minMax += ` max=\"${param.max}\"`;\n         }\n         markup = this.templateSrv.renderMustache(Templates.NUMERICTEMPLATE, {minMax: minMax, ...generalCtx});\n      } else if (param.type === 'checkbox') {\n         markup = this.templateSrv.renderMustache(Templates.CHECKBOXTEMPLATE, generalCtx);\n      } else if (param.type === 'select') {\n         const options = (param.options ?? []).map(opt => {\n            let label;\n            let value;\n            if (typeof opt === 'string') {\n               label = capitalize(opt);\n               value = opt;\n            } else {\n               label = opt.l;\n               value = opt.v;\n            }\n            return {optionLabel: label, optionValue: value, selected: value === defaultValue};\n         });\n         markup = this.templateSrv.renderMustache(Templates.SELECTTEMPLATE, {options, ...generalCtx});\n      } else if (param.type === 'color') {\n         // Value must be in hex form\n         generalCtx.defaultvalue = toHexColor(generalCtx.defaultvalue);\n         markup = this.templateSrv.renderMustache(Templates.COLORTEMPLATE, generalCtx);\n      } else if (param.type === 'image') {\n         markup = this.templateSrv.renderMustache(Templates.IMAGETEMPLATE, generalCtx);\n      } else {\n         // Assume textfield\n         markup = this.templateSrv.renderMustache(Templates.TEXTFIELDTEMPLATE, generalCtx);\n      }\n      return markup;\n   }\n\n\n   /**\n    * Obtains the updated parameter values from the modal\n    * This is used in insertWidget\n    * @param {import('../options').Widget} widget\n    * @param {JQuery<HTMLElement>} form\n    * @returns {Record<string, any>} - The updated parameters dict\n    */\n   extractFormParameters(widget, form) {\n      /** @type {Object.<string, any>}  */\n      const ctx = {};\n      /** @type {Object.<string, any>}  */\n      const toPersist = {};\n      const defaults = widget.defaults;\n      widget.parameters.forEach(param => {\n         const pname = param.name;\n         const cleanPname = cleanParameterName(pname);\n         const $elem = form.find(`[data-bar=\"${cleanPname}\"]`);\n         if (!$elem.length) {\n            ctx[pname] = defaults[pname];\n            return;\n         }\n         /** @type {*} */\n         let value = $elem.val() ?? \"\";\n         if ($elem.prop(\"tagName\") === \"INPUT\" && $elem.attr(\"type\") === \"checkbox\") {\n            value = $elem.is(':checked');\n         } else if ($elem.prop(\"tagName\") === \"INPUT\" && $elem.attr(\"type\") === \"number\") {\n            if (value.indexOf(\".\") >= 0) {\n               value = parseFloat(value);\n            } else {\n               value = parseInt(value);\n            }\n         } else if ($elem.prop(\"tagName\") === \"INPUT\" && $elem.attr(\"type\") === \"color\") {\n            value = value.toLowerCase();\n         }\n\n         if (param.transform) {\n            value = stream(param.transform).reduce(value);\n         }\n         ctx[pname] = value;\n         if (pname.trim().startsWith(\"$\")) {\n            toPersist[pname] = value;\n         }\n      });\n      if (this.storage) {\n         if (Object.keys(toPersist).length) {\n            // Only those starting with $\n            this.storage.setToLocal('valors', toPersist, true);\n         }\n         // Should all values be persisted?\n         const mustSaveAll = this.storage.getFromLocal('saveall', false);\n         if (mustSaveAll) {\n            /** @type {Object.<string, any>}  */\n            const previousAllData = this.storage.getFromLocal('saveall_data', {});\n            previousAllData[widget.name] = {...ctx};\n            this.storage.setToLocal('saveall_data', previousAllData, true);\n         }\n      }\n      return ctx;\n   }\n\n   /**\n    * @param {JQuery<HTMLElement>} body - The modal body\n    */\n   attachImagePickers(body) {\n      const canShowFilePicker = typeof this.fileSrv.getImagePicker() !== 'undefined';\n      const picker = body.find('button.whb-image-picker').prop('disabled', !canShowFilePicker);\n      if (canShowFilePicker) {\n         // Attach a click handler to any image-picker buttons\n         picker.on(\"click\", /** @param {any} evt */ async(evt) => {\n            evt.preventDefault();\n            try {\n               /** @type {any} */\n               const params = await this.fileSrv.displayImagePicker();\n               if (params?.url) {\n                  this.jQuery(evt.currentTarget).parent().find('input').val(params.url);\n               }\n            } catch (ex) {\n               console.error(ex);\n            }\n         });\n      }\n   }\n\n   /**\n    * @param {JQuery<HTMLElement>} $formElem\n    * @param {Object.<string, any>} defaultsData\n    * @param {import('../options').Widget} widget\n    * @param {boolean} selectMode\n    */\n   applyFieldWatchers($formElem, defaultsData, widget, selectMode) {\n      /** @type {string[]} */\n      const watchedvars = []; // All these variable names must be watched\n      /**\n       * all these components must be updated when one watcher changes\n       *  @type {{\n       *    condition: string,\n       *    component: JQuery<HTMLElement>,\n       *    type: string,\n       *    indx: number\n       *  }[]}\n       */\n      const updatableComponents = [];\n\n      const regex = /\\{{2}([^}]*)\\}{2}/gm;\n      for (let indx = 0, len = widget.parameters.length; indx < len; indx++) {\n\n         const varobj = widget.parameters[indx];\n\n         if (varobj.when) {\n            const condition = varobj.when;\n            const t = varobj.type;\n            const control = $formElem.find(`[data-bar=\"${cleanParameterName(varobj.name)}\"]`);\n            if (!control.length || !t) {\n               continue;\n            }\n            updatableComponents.push({\n               condition: condition.replace(/[{}]{2}/g, ''),\n               component: control,\n               indx: indx,\n               type: t\n            });\n            const varsInvolved = condition.match(regex);\n            varsInvolved?.forEach(evar => {\n               evar = evar.replace(/[{}]*/g, '').trim();\n               // Can only watch real variables SELECT_MODE is not a variable\n               console.log(\"evar\", evar, defaultsData);\n               if (watchedvars.indexOf(evar) < 0 && (defaultsData[evar] ?? null) !== null) {\n                  console.log(\"ADDED AS WATCH\");\n                  watchedvars.push(evar);\n               }\n            });\n         }\n         watchedvars.push(varobj.name);\n      }\n\n      console.log(watchedvars);\n      console.log(updatableComponents);\n\n\n      const doUpdateVisibilities = () => {\n         updatableComponents.forEach(cc => {\n            // Evaluate condition\n            console.log(\"Amagant \", cc);\n            const condicio = cc.condition;\n            const novesVariables = this.extractFormParameters(widget, $formElem);\n            console.log(\"Obtained the new variables from the form \", novesVariables);\n            // Add to the new variables the internal variables\n            novesVariables.SELECT_MODE = selectMode;\n            // Eval JS condition for new variables\n            const showme = evalInContext(novesVariables, condicio);\n            let theComponent = cc.component;\n            if (theComponent) {\n               theComponent = theComponent.parent();\n               if (cc.type === 'checkbox') {\n                  theComponent = theComponent.parent();\n               }\n               // Only change visibilities of nodes not hidden from user\n               console.log(\"Changing visibilities of \", theComponent, \" condition \", condicio, \" evals to \", showme);\n               if (!theComponent.attr('data-amagat')) {\n                  if (showme) {\n                     theComponent.show();\n                  } else {\n                     theComponent.hide();\n                  }\n               }\n            }\n         });\n      };\n\n      // Apply the watchers\n      widget.parameters.forEach((varobj) => {\n         const control = $formElem.find(`[data-bar=\"${cleanParameterName(varobj.name)}\"]`);\n         if (watchedvars.indexOf(varobj.name) < 0 || !control) {\n            return;\n         }\n         console.log(\"that must be watched\", varobj);\n         let evtName = \"change\";\n         if (varobj.type === 'textfield' || varobj.type === 'textarea') {\n            evtName = \"keyup\";\n         }\n         control.on(evtName, () => {\n            doUpdateVisibilities();\n         });\n      });\n\n      // Decide which form elements are visible accoding to the current values of the parameters.\n      doUpdateVisibilities();\n   }\n}"],"names":["questionPopover","Templates","TEXTFIELDTEMPLATE","IMAGETEMPLATE","NUMERICTEMPLATE","COLORTEMPLATE","TEXTAREATEMPLATE","CHECKBOXTEMPLATE","SELECTTEMPLATE","constructor","editor","userStorage","templateSrv","fileSrv","jQuery","storage","createContext","widget","mustSaveAll","this","getFromLocal","saveAllData","values","defaults","controls","parameters","map","param","createControlHTML","id","sname","name","pname","currentval","startsWith","obtainCurrentValue","idTabpane","selectMode","selection","getContent","trim","length","instructions","filter","isFilter","hostId","defaultValue","markup","generalCtx","elementid","varname","vartitle","title","defaultvalue","tooltip","tip","disabled","editable","hidden","type","renderMustache","minMax","min","max","options","opt","label","value","l","v","optionLabel","optionValue","selected","extractFormParameters","form","ctx","toPersist","forEach","cleanPname","$elem","find","val","prop","attr","is","indexOf","parseFloat","parseInt","toLowerCase","transform","reduce","Object","keys","setToLocal","previousAllData","attachImagePickers","body","canShowFilePicker","getImagePicker","picker","on","async","evt","preventDefault","params","displayImagePicker","url","currentTarget","parent","ex","console","error","applyFieldWatchers","$formElem","defaultsData","watchedvars","updatableComponents","regex","indx","len","varobj","when","condition","t","control","push","replace","component","varsInvolved","match","evar","log","doUpdateVisibilities","cc","condicio","novesVariables","SELECT_MODE","showme","theComponent","show","hide","evtName"],"mappings":";;;;;;;;MA2BMA,gBAAkB,qLAEXC,UAAY,CACtBC,kBAAoB,gMAA+LF,2NAInNG,cAAgB,gMAA+LH,+XAO/MI,gBAAkB,kMAAiMJ,2OAInNK,cAAgB,kMAAiML,6NAIjNM,iBAAmB,6JAA4JN,6OAI/KO,iBAAmB,yWAGwBP,oCAG3CQ,eAAiB,qMACmFR,6aAoBpGS,YAAYC,OAAQC,YAAaC,YAAaC,QAASC,aAE/CJ,OAASA,YAETK,QAAUJ,iBAEVC,YAAcA,iBAEdC,QAAUA,aAEVC,OAASA,OAOjBE,cAAcC,cAELC,YAAcC,KAAKJ,QAAQK,aAAa,WAAW,GAEnDC,YAAcF,KAAKJ,QAAQK,aAAa,eAAgB,IAExDE,OAASH,KAAKJ,QAAQK,aAAa,SAAU,IAC7CG,SAAWN,OAAOM,SAsBlBC,SAAWP,OAAOQ,WAAWC,KAAIC,OAASR,KAAKS,kBAAkBT,KAAKT,OAAOmB,GAAIF,MAhB3DA,CAAAA,cACnBG,MAAQb,OAAOc,KACfC,MAAQL,MAAMI,SAChBE,WAAaV,SAASS,qCACtBd,aAE6C,oCAAzCG,YAAYS,+DAASE,SAAU,QACjCC,WAAaZ,YAAYS,OAAOE,QAGlCA,MAAME,WAAW,MAAQZ,OAAOU,SACjCC,WAAaX,OAAOU,QAEhBC,YAGoFE,CAAmBR,gBAErG,CACTS,WAAW,iBACXC,WAAYlB,KAAKT,OAAO4B,UAAUC,aAAaC,OAAOC,OAAS,EAC/DV,KAAMd,OAAOc,KACbW,aAAczB,OAAOyB,aACrBC,OAAQ1B,OAAO2B,WACfpB,SAAUA,UAWhBI,kBAAkBiB,OAAQlB,MAAOmB,kBAC1BC,OAAS,SACPf,OAAQ,4BAAmBL,MAAMI,MACjCiB,WAAa,CAChBC,UAAWJ,OAAS,IAAMb,MAC1BkB,QAASlB,MACTmB,SAAUxB,MAAMyB,MAChBC,aAAcP,aACdQ,QAAS3B,MAAM4B,KAAO5B,MAAM2B,QAC5BE,UAA6B,IAAnB7B,MAAM8B,SAChBC,QAAyB,IAAjB/B,MAAM+B,WAEE,aAAf/B,MAAMgC,KACPZ,OAAS5B,KAAKP,YAAYgD,eAAe3D,UAAUK,iBAAkB0C,iBACjE,GAAmB,YAAfrB,MAAMgC,KAAoB,KAC9BE,OAAS,GACTlC,MAAMmC,MACPD,QAAW,QAAOlC,MAAMmC,QAEvBnC,MAAMoC,MACPF,QAAW,SAAQlC,MAAMoC,QAE5BhB,OAAS5B,KAAKP,YAAYgD,eAAe3D,UAAUG,gBAAiB,CAACyD,OAAQA,UAAWb,kBACpF,GAAmB,aAAfrB,MAAMgC,KACdZ,OAAS5B,KAAKP,YAAYgD,eAAe3D,UAAUM,iBAAkByC,iBACjE,GAAmB,WAAfrB,MAAMgC,KAAmB,OAC3BK,SAAWrC,MAAMqC,SAAW,IAAItC,KAAIuC,UACnCC,MACAC,YACe,iBAARF,KACRC,OAAQ,oBAAWD,KACnBE,MAAQF,MAERC,MAAQD,IAAIG,EACZD,MAAQF,IAAII,GAER,CAACC,YAAaJ,MAAOK,YAAaJ,MAAOK,SAAUL,QAAUrB,iBAEvEC,OAAS5B,KAAKP,YAAYgD,eAAe3D,UAAUO,eAAgB,CAACwD,QAAAA,WAAYhB,iBACzD,UAAfrB,MAAMgC,MAEdX,WAAWK,cAAe,oBAAWL,WAAWK,cAChDN,OAAS5B,KAAKP,YAAYgD,eAAe3D,UAAUI,cAAe2C,aAElED,OADuB,UAAfpB,MAAMgC,KACLxC,KAAKP,YAAYgD,eAAe3D,UAAUE,cAAe6C,YAGzD7B,KAAKP,YAAYgD,eAAe3D,UAAUC,kBAAmB8C,mBAElED,OAWV0B,sBAAsBxD,OAAQyD,YAErBC,IAAM,GAENC,UAAY,GACZrD,SAAWN,OAAOM,YACxBN,OAAOQ,WAAWoD,SAAQlD,cACjBK,MAAQL,MAAMI,KACd+C,YAAa,4BAAmB9C,OAChC+C,MAAQL,KAAKM,KAAM,cAAaF,oBACjCC,MAAMtC,mBACRkC,IAAI3C,OAAST,SAASS,YAIrBmC,MAAQY,MAAME,OAAS,GACG,UAA1BF,MAAMG,KAAK,YAAiD,aAAvBH,MAAMI,KAAK,QACjDhB,MAAQY,MAAMK,GAAG,YACiB,UAA1BL,MAAMG,KAAK,YAAiD,WAAvBH,MAAMI,KAAK,QAErDhB,MADCA,MAAMkB,QAAQ,MAAQ,EACfC,WAAWnB,OAEXoB,SAASpB,OAEc,UAA1BY,MAAMG,KAAK,YAAiD,UAAvBH,MAAMI,KAAK,UACxDhB,MAAQA,MAAMqB,eAGb7D,MAAM8D,YACPtB,OAAQ,gBAAOxC,MAAM8D,WAAWC,OAAOvB,QAE1CQ,IAAI3C,OAASmC,MACTnC,MAAMQ,OAAON,WAAW,OACzB0C,UAAU5C,OAASmC,UAGrBhD,KAAKJ,QAAS,CACX4E,OAAOC,KAAKhB,WAAWnC,aAEnB1B,QAAQ8E,WAAW,SAAUjB,WAAW,MAG5BzD,KAAKJ,QAAQK,aAAa,WAAW,GACxC,OAER0E,gBAAkB3E,KAAKJ,QAAQK,aAAa,eAAgB,IAClE0E,gBAAgB7E,OAAOc,MAAQ,IAAI4C,UAC9B5D,QAAQ8E,WAAW,eAAgBC,iBAAiB,WAGxDnB,IAMVoB,mBAAmBC,YACVC,uBAA6D,IAAlC9E,KAAKN,QAAQqF,iBACxCC,OAASH,KAAKhB,KAAK,2BAA2BE,KAAK,YAAae,mBAClEA,mBAEDE,OAAOC,GAAG,SAAiCC,MAAAA,MACxCC,IAAIC,2BAGKC,aAAerF,KAAKN,QAAQ4F,qBAC9BD,MAAAA,QAAAA,OAAQE,UACJ5F,OAAOwF,IAAIK,eAAeC,SAAS5B,KAAK,SAASC,IAAIuB,OAAOE,KAErE,MAAOG,IACNC,QAAQC,MAAMF,QAY1BG,mBAAmBC,UAAWC,aAAcjG,OAAQoB,kBAE3C8E,YAAc,GAUdC,oBAAsB,GAEtBC,MAAQ,0BACT,IAAIC,KAAO,EAAGC,IAAMtG,OAAOQ,WAAWgB,OAAQ6E,KAAOC,IAAKD,OAAQ,OAE9DE,OAASvG,OAAOQ,WAAW6F,SAE7BE,OAAOC,KAAM,OACRC,UAAYF,OAAOC,KACnBE,EAAIH,OAAO7D,KACXiE,QAAUX,UAAUjC,KAAM,eAAa,4BAAmBwC,OAAOzF,eAClE6F,QAAQnF,SAAWkF,WAGxBP,oBAAoBS,KAAK,CACtBH,UAAWA,UAAUI,QAAQ,WAAY,IACzCC,UAAWH,QACXN,KAAMA,KACN3D,KAAMgE,UAEHK,aAAeN,UAAUO,MAAMZ,OACrCW,MAAAA,cAAAA,aAAcnD,SAAQqD,OACnBA,KAAOA,KAAKJ,QAAQ,SAAU,IAAItF,OAElCsE,QAAQqB,IAAI,OAAQD,KAAMhB,cACtBC,YAAY9B,QAAQ6C,MAAQ,GAAsC,QAAhChB,aAAagB,OAAS,QACzDpB,QAAQqB,IAAI,kBACZhB,YAAYU,KAAKK,UAI1Bf,YAAYU,KAAKL,OAAOzF,MAG3B+E,QAAQqB,IAAIhB,aACZL,QAAQqB,IAAIf,2BAGNgB,qBAAuB,KAC1BhB,oBAAoBvC,SAAQwD,KAEzBvB,QAAQqB,IAAI,WAAYE,UAClBC,SAAWD,GAAGX,UACda,eAAiBpH,KAAKsD,sBAAsBxD,OAAQgG,WAC1DH,QAAQqB,IAAI,4CAA6CI,gBAEzDA,eAAeC,YAAcnG,iBAEvBoG,QAAS,uBAAcF,eAAgBD,cACzCI,aAAeL,GAAGN,UAClBW,eACDA,aAAeA,aAAa9B,SACZ,aAAZyB,GAAG1E,OACJ+E,aAAeA,aAAa9B,UAG/BE,QAAQqB,IAAI,4BAA6BO,aAAc,cAAeJ,SAAU,aAAcG,QACzFC,aAAavD,KAAK,iBAChBsD,OACDC,aAAaC,OAEbD,aAAaE,aAQ5B3H,OAAOQ,WAAWoD,SAAS2C,eAClBI,QAAUX,UAAUjC,KAAM,eAAa,4BAAmBwC,OAAOzF,cACnEoF,YAAY9B,QAAQmC,OAAOzF,MAAQ,IAAM6F,eAG7Cd,QAAQqB,IAAI,uBAAwBX,YAChCqB,QAAU,SACM,cAAhBrB,OAAO7D,MAAwC,aAAhB6D,OAAO7D,OACvCkF,QAAU,SAEbjB,QAAQxB,GAAGyC,SAAS,KACjBT,6BAKNA"}