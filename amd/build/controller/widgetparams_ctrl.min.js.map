{"version":3,"file":"widgetparams_ctrl.min.js","sources":["../../src/controller/widgetparams_ctrl.js"],"sourcesContent":["/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {getFormCtrl} from '../controller/form_ctrl';\nimport {getListeners} from '../extension';\nimport {getModalSrv} from '../service/modal_service';\nimport {getTemplateSrv} from '../service/template_service';\nimport {getUserStorage} from '../service/userstorage_service';\nimport {applyWidgetFilterFactory, removeRndFromCtx} from '../util';\nimport * as coreStr from \"core/str\";\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nexport class WidgetParamsCtrl {\n   /** @type {import('../service/modal_service').ModalDialogue | null} */\n   modal = null;\n\n   /**\n    * @type {import('./widgetpicker_ctrl').WidgetPickerCtrl | undefined }\n    */\n   parentCtrl;\n  /**\n   * @param {import('../plugin').TinyMCE} editor\n   * @param {import('../service/userstorage_service').UserStorageSrv} userStorage\n   * @param {import('../service/template_service').TemplateSrv} templateSrv\n   * @param {import('../service/modal_service').ModalSrv} modalSrv\n   * @param {import('../controller/form_ctrl').FormCtrl} formCtrl\n   * @param {*} applyWidgetFilter\n   * @param {import('../options').Widget} widget\n   */\n   constructor(editor, userStorage, templateSrv, modalSrv, formCtrl, applyWidgetFilter, widget) {\n      /** @type {import('../plugin').TinyMCE} */\n      this.editor = editor;\n      /** @type {import('../service/userstorage_service').UserStorageSrv} */\n      this.storage = userStorage;\n      /** @type {import('../service/template_service').TemplateSrv} */\n      this.templateSrv = templateSrv;\n      /** @type {import('../service/modal_service').ModalSrv} */\n      this.modalSrv = modalSrv;\n      /** @type {import('../controller/form_ctrl').FormCtrl} */\n      this.formCtrl = formCtrl;\n      this.applyWidgetFilter = applyWidgetFilter;\n      /** @type {import('../options').Widget} */\n      this.widget = widget;\n   }\n   /**\n    * Displays a dialogue for configuring the parameters of the selected snpt\n    */\n   async handleAction() {\n      // Show modal with buttons.\n      const data = this.formCtrl.createContext(this.widget);\n      const modal = await this.modalSrv.create('params', data, () => {\n         this.modal?.destroy();\n         this.modal = null;\n      });\n      /** @type {import('../service/modal_service').ListenerTracker} */\n      const listenerTracker = (/** @type {Element}*/ el, /** @type {string} */ evType, /** @type {EventListener} */ handler) => {\n         this.modal?.twhRegisterListener(el, evType, handler);\n      };\n      this.modal = modal;\n      const bodyElem = modal.body[0];\n      const formElem = modal.body.find(\"form\")[0];\n      modal.body.find(`a[href=\"#${data.idtabpane}_1\"`).on(\"click\", async() => {\n         // Handle preview;\n         const ctxFromDialogue = this.formCtrl.extractFormParameters(this.widget, formElem, true);\n         await this.updatePreview(data.idtabpane, ctxFromDialogue);\n      });\n      this.formCtrl.attachRepeatable(bodyElem, this.widget);\n      this.formCtrl.attachPickers(bodyElem, listenerTracker);\n      modal.footer.show();\n      modal.footer.find(\"button.tiny_widgethub-btn-secondary\").on(\"click\", async() => {\n         // Go back to main menú\n         // TODO detachPicker and detachRepeatable\n         modal.destroy();\n         if (this.parentCtrl) {\n            await this.parentCtrl.handleAction();\n         }\n      });\n      modal.footer.find(\"button.tiny_widgethub-btn-primary\").on(\"click\", async() => {\n         // Go back to main menú\n         const ctxFromDialogue = this.formCtrl.extractFormParameters(this.widget, formElem, true);\n         modal.hide();\n         await this.insertWidget(ctxFromDialogue);\n         modal.destroy();\n      });\n\n      // Change input fields visibilities upon conditions\n      const selectmode = this.editor.selection.getContent().trim() != '';\n      this.formCtrl.applyFieldWatchers(bodyElem, this.widget.defaults, this.widget, selectmode, listenerTracker);\n\n      // Help circles require popover\n      try {\n         // @ts-ignore\n         modal.body.popover({\n            container: \"body\",\n            selector: \"[data-toggle=popover][data-trigger=hover]\",\n            trigger: \"hover\"\n         });\n      } catch (ex) {\n         console.error(ex);\n      }\n\n      modal.show();\n   }\n\n   destroy() {\n      this.modal?.destroy();\n   }\n\n   /**\n    * @param {object} ctx\n    * @returns {Promise<string>} The rendered template\n    */\n    render(ctx) {\n        const defaultsCopy = {...this.widget.defaults};\n        const toInterpolate = Object.assign(defaultsCopy, ctx ?? {});\n        // Decide which template engine to use\n        let engine = this.widget.prop('engine');\n        return this.templateSrv.render(this.widget.template ?? \"\", toInterpolate,\n            this.widget.I18n, engine);\n   }\n\n   /**\n    * @param {Object.<string, any>} ctxFromDialogue\n    * @returns {Promise<string>}\n    */\n   async generateInterpolatedCode(ctxFromDialogue) {\n      const sel = this.editor.selection.getContent();\n      // Decideix quin mode de selecció estam\n      let interpoledComponentCode = await this.render(ctxFromDialogue);\n      if (sel.trim() && this.widget.insertquery) {\n         let query = this.widget.insertquery.trim();\n         let replaceMode = query.startsWith('r!');\n         if (replaceMode) {\n            query = query.substring(2).trim();\n         }\n         // We are in selection mode\n         const tmpDiv = document.createElement(\"div\");\n         tmpDiv.innerHTML = interpoledComponentCode;\n         const insertPoint = tmpDiv.querySelector(query);\n         if (insertPoint) {\n            if (replaceMode) {\n               // Replace the insertPoint by the interpolated HTML\n               insertPoint.outerHTML = sel;\n            } else {\n               // Inserts the interpolated HTML into the insertPoint\n               insertPoint.innerHTML = sel;\n            }\n            interpoledComponentCode = tmpDiv.innerHTML;\n         } else {\n            console.error(\"Cannot find insert point\", query);\n         }\n      }\n      return interpoledComponentCode;\n   }\n\n   /**\n    * @param {string} idtabpane\n    * @param {Object.<string, any>} ctxFromDialogue\n    * @returns\n    */\n   async updatePreview(idtabpane, ctxFromDialogue) {\n      const interpoledCode = await this.generateInterpolatedCode(ctxFromDialogue);\n      const $previewPanel = this.modal?.body?.find(`#${idtabpane}_1`);\n      if ($previewPanel) {\n         $previewPanel.html(interpoledCode);\n      }\n   }\n\n   /**\n    * @param {Object.<string, any>} ctxFromDialogue\n    * @param {boolean} [skipRecent]\n    * @returns\n    */\n   async insertWidget(ctxFromDialogue, skipRecent) {\n      if (!skipRecent) {\n         /** @type {{key: string, p: Record<string, any>}[]} */\n         const recentList = this.storage.getRecentUsed();\n         const pos = recentList.map(e => e.key).indexOf(this.widget.key);\n         if (pos >= 0) {\n            recentList.splice(pos, 1);\n         }\n         // Never store values that are obtained from $RND\n         const ctxFiltered = removeRndFromCtx(ctxFromDialogue, this.widget.parameters);\n         recentList.unshift({key: this.widget.key, p: ctxFiltered});\n         if (recentList.length > 4) {\n            recentList.splice(5, recentList.length - 4);\n         }\n\n         this.storage.setToSession(\"recent\", JSON.stringify(recentList), true);\n      }\n\n      if (this.widget.isFilter()) {\n         this.applyWidgetFilter(this.widget.template ?? '', false, ctxFromDialogue);\n         this.editor.focus();\n         return;\n      }\n      const interpoledCode = await this.generateInterpolatedCode(ctxFromDialogue);\n      // Normal insert mode\n      this.editor.selection.setContent(interpoledCode);\n      this.editor.focus();\n\n      // Call any subscriber\n      getListeners('widgetInserted').forEach(listener => listener(this.editor, this.widget, ctxFromDialogue));\n   }\n}\n\n\n/**\n * @param {import('../plugin').TinyMCE} editor\n * @returns {(widget: import('../options').Widget) => WidgetParamsCtrl}\n */\nexport function getWidgetParamsFactory(editor) {\n   // @ts-ignore\n   const applyWidgetFilter = applyWidgetFilterFactory(editor, coreStr);\n   return (widget) => new WidgetParamsCtrl(editor, getUserStorage(editor), getTemplateSrv(),\n      getModalSrv(), getFormCtrl(editor), applyWidgetFilter, widget);\n\n}\n"],"names":["editor","applyWidgetFilter","coreStr","widget","WidgetParamsCtrl","modal","parentCtrl","constructor","userStorage","templateSrv","modalSrv","formCtrl","storage","data","this","createContext","create","destroy","listenerTracker","el","evType","handler","twhRegisterListener","bodyElem","body","formElem","find","idtabpane","on","async","ctxFromDialogue","extractFormParameters","updatePreview","attachRepeatable","attachPickers","footer","show","handleAction","hide","insertWidget","selectmode","selection","getContent","trim","applyFieldWatchers","defaults","popover","container","selector","trigger","ex","console","error","render","ctx","defaultsCopy","toInterpolate","Object","assign","engine","prop","template","I18n","sel","interpoledComponentCode","insertquery","query","replaceMode","startsWith","substring","tmpDiv","document","createElement","innerHTML","insertPoint","querySelector","outerHTML","interpoledCode","generateInterpolatedCode","$previewPanel","_this$modal4","_this$modal4$body","html","skipRecent","recentList","getRecentUsed","pos","map","e","key","indexOf","splice","ctxFiltered","parameters","unshift","p","length","setToSession","JSON","stringify","isFilter","focus","setContent","forEach","listener"],"mappings":"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"}