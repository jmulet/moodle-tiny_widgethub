{"version":3,"file":"widgetparams_ctrl.min.js","sources":["../../src/controller/widgetparams_ctrl.js"],"sourcesContent":["/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {getFormCtrl} from '../controller/form_ctrl';\nimport {getListeners} from '../extension';\nimport {getModalSrv} from '../service/modal_service';\nimport {getTemplateSrv} from '../service/template_service';\nimport {getUserStorage} from '../service/userstorage_service';\nimport {applyWidgetFilterFactory} from '../util';\nimport * as coreStr from \"core/str\";\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nexport class WidgetParamsCtrl {\n   /** @type {import('../service/modal_service').ModalDialogue | null} */\n   modal = null;\n\n   /**\n    * @type {import('./widgetpicker_ctrl').WidgetPickerCtrl | undefined }\n    */\n   parentCtrl;\n  /**\n   * @param {import('../plugin').TinyMCE} editor\n   * @param {import('../service/userstorage_service').UserStorageSrv} userStorage\n   * @param {import('../service/template_service').TemplateSrv} templateSrv\n   * @param {import('../service/modal_service').ModalSrv} modal_service\n   * @param {import('../controller/form_ctrl').FormCtrl} formCtrl\n   * @param {*} applyWidgetFilter\n   * @param {import('../options').Widget} widget\n   */\n   constructor(editor, userStorage, templateSrv, modal_service, formCtrl, applyWidgetFilter, widget) {\n      /** @type {import('../plugin').TinyMCE} */\n      this.editor = editor;\n      /** @type {import('../service/userstorage_service').UserStorageSrv} */\n      this.storage = userStorage;\n      /** @type {import('../service/template_service').TemplateSrv} */\n      this.templateSrv = templateSrv;\n      /** @type {import('../service/modal_service').ModalSrv} */\n      this.modal_service = modal_service;\n      /** @type {import('../controller/form_ctrl').FormCtrl} */\n      this.formCtrl = formCtrl;\n      this.applyWidgetFilter = applyWidgetFilter;\n      /** @type {import('../options').Widget} */\n      this.widget = widget;\n   }\n   /**\n    * Displays a dialogue for configuring the parameters of the selected snpt\n    */\n   async handleAction() {\n      // Show modal with buttons.\n      const data = this.formCtrl.createContext(this.widget);\n      const modal = await this.modal_service.create('params', data, () => {\n         this.modal?.destroy();\n         this.modal = null;\n      });\n      this.modal = modal;\n      modal.body.find(`a[href=\"#${data.idtabpane}_1\"`).on(\"click\", async() => {\n         // Handle preview;\n         const ctxFromDialogue = this.formCtrl.extractFormParameters(this.widget, modal.body.find(\"form\"), true);\n         await this.updatePreview(data.idtabpane, ctxFromDialogue);\n      });\n      this.formCtrl.attachPickers(modal.body);\n      modal.footer.show();\n      modal.footer.find(\"button.tiny_widgethub-btn-secondary\").on(\"click\", async() => {\n         // Go back to main menú\n         modal.destroy();\n         if (this.parentCtrl) {\n            await this.parentCtrl.handleAction();\n         }\n      });\n      modal.footer.find(\"button.tiny_widgethub-btn-primary\").on(\"click\", async() => {\n         // Go back to main menú\n         const ctxFromDialogue = this.formCtrl.extractFormParameters(this.widget, modal.body.find(\"form\"), true);\n         modal.hide();\n         await this.insertWidget(ctxFromDialogue);\n         modal.destroy();\n      });\n\n      // Change input fields visibilities upon conditions\n      const selectmode = this.editor.selection.getContent().trim() != '';\n      this.formCtrl.applyFieldWatchers(modal.body, this.widget.defaults, this.widget, selectmode);\n\n      // Help circles require popover\n      try {\n         // @ts-ignore\n         modal.body.popover({\n            container: \"body\",\n            selector: \"[data-toggle=popover][data-trigger=hover]\",\n            trigger: \"hover\"\n         });\n      } catch (ex) {\n         // console.error(ex);\n      }\n\n      modal.show();\n   }\n\n   destroy() {\n      this.modal?.destroy();\n   }\n\n   /**\n    * @param {object} ctx\n    * @returns {Promise<string>} The rendered template\n    */\n    render(ctx) {\n        const defaultsCopy = {...this.widget.defaults};\n        const toInterpolate = Object.assign(defaultsCopy, ctx ?? {});\n        // Decide which template engine to use\n        let engine = this.widget.prop('engine');\n        return this.templateSrv.render(this.widget.template ?? \"\", toInterpolate,\n            this.widget.I18n, engine);\n   }\n\n   /**\n    * @param {Object.<string, any>} ctxFromDialogue\n    * @returns {Promise<string>}\n    */\n   async generateInterpolatedCode(ctxFromDialogue) {\n      const sel = this.editor.selection.getContent();\n      // Decideix quin mode de selecció estam\n      let interpoledComponentCode = await this.render(ctxFromDialogue);\n      if (sel.trim() && this.widget.insertquery) {\n         let query = this.widget.insertquery.trim();\n         let replaceMode = query.startsWith('r!');\n         if (replaceMode) {\n            query = query.substring(2).trim();\n         }\n         // We are in selection mode\n         const tmpDiv = document.createElement(\"div\");\n         tmpDiv.innerHTML = interpoledComponentCode;\n         const insertPoint = tmpDiv.querySelector(query);\n         if (insertPoint) {\n            if (replaceMode) {\n               // Replace the insertPoint by the interpolated HTML\n               insertPoint.outerHTML = sel;\n            } else {\n               // Inserts the interpolated HTML into the insertPoint\n               insertPoint.innerHTML = sel;\n            }\n            interpoledComponentCode = tmpDiv.innerHTML;\n         } else {\n            console.error(\"Cannot find insert point\", query);\n         }\n      }\n      return interpoledComponentCode;\n   }\n\n   /**\n    * @param {string} idtabpane\n    * @param {Object.<string, any>} ctxFromDialogue\n    * @returns\n    */\n   async updatePreview(idtabpane, ctxFromDialogue) {\n      const interpoledCode = await this.generateInterpolatedCode(ctxFromDialogue);\n      const $previewPanel = this.modal?.body?.find(`#${idtabpane}_1`);\n      if ($previewPanel) {\n         $previewPanel.html(interpoledCode);\n      }\n   }\n\n   /**\n    * @param {Object.<string, any>} ctxFromDialogue\n    * @returns\n    */\n   async insertWidget(ctxFromDialogue) {\n      /** @type {{key: string, p: Record<string, any>}[]} */\n      const recentList = this.storage.getRecentUsed();\n      const pos = recentList.map(e => e.key).indexOf(this.widget.key);\n      if (pos >= 0) {\n         recentList.splice(pos, 1);\n      }\n      recentList.unshift({key: this.widget.key, p: ctxFromDialogue});\n      if (recentList.length > 4) {\n         recentList.splice(5, recentList.length - 4);\n      }\n\n      this.storage.setToSession(\"recent\", JSON.stringify(recentList), true);\n\n      if (this.widget.isFilter()) {\n         this.applyWidgetFilter(this.widget.template ?? '', false, ctxFromDialogue);\n         this.editor.focus();\n         return;\n      }\n      const interpoledCode = await this.generateInterpolatedCode(ctxFromDialogue);\n      // Normal insert mode\n      this.editor.selection.setContent(interpoledCode);\n      this.editor.focus();\n\n      // Call any subscriber\n      getListeners('widgetInserted').forEach(listener => listener(this.editor, this.widget, ctxFromDialogue));\n   }\n}\n\n\n/**\n * @param {import('../plugin').TinyMCE} editor\n * @returns {(widget: import('../options').Widget) => WidgetParamsCtrl}\n */\nexport function getWidgetParamsFactory(editor) {\n   // @ts-ignore\n   const applyWidgetFilter = applyWidgetFilterFactory(editor, coreStr);\n   return (widget) => new WidgetParamsCtrl(editor, getUserStorage(editor), getTemplateSrv(),\n      getModalSrv(), getFormCtrl(editor), applyWidgetFilter, widget);\n\n}\n"],"names":["editor","applyWidgetFilter","coreStr","widget","WidgetParamsCtrl","modal","parentCtrl","constructor","userStorage","templateSrv","modal_service","formCtrl","storage","data","this","createContext","create","destroy","body","find","idtabpane","on","async","ctxFromDialogue","extractFormParameters","updatePreview","attachPickers","footer","show","handleAction","hide","insertWidget","selectmode","selection","getContent","trim","applyFieldWatchers","defaults","popover","container","selector","trigger","ex","render","ctx","defaultsCopy","toInterpolate","Object","assign","engine","prop","template","I18n","sel","interpoledComponentCode","insertquery","query","replaceMode","startsWith","substring","tmpDiv","document","createElement","innerHTML","insertPoint","querySelector","outerHTML","console","error","interpoledCode","generateInterpolatedCode","$previewPanel","_this$modal3","_this$modal3$body","html","recentList","getRecentUsed","pos","map","e","key","indexOf","splice","unshift","p","length","setToSession","JSON","stringify","isFilter","focus","setContent","forEach","listener"],"mappings":"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"}