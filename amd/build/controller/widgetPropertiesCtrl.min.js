define("tiny_widgethub/controller/widgetPropertiesCtrl",["exports","../util"],(function(_exports,_util){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0;return _exports.default=
/**
   * Tiny WidgetHub plugin.
   *
   * @module      tiny_widgethub/plugin
   * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
class{#modal;constructor(_ref){let{editor:editor,formCtrl:formCtrl,modalSrv:modalSrv}=_ref;this.editor=editor,this.formCtrl=formCtrl,this.modalSrv=modalSrv}async show(currentContext){const widget=currentContext.widget,hostId=this.editor.id,elem=currentContext.elem;if(!elem||null==widget||!widget.hasBindings())return void console.error("Invalid genericEditor widget definition ",widget);const bindingsDOM={},paramValues={};widget.parameters.filter((param=>null!=param.bind)).forEach((param=>{if(!param.bind)return;const binding=(0,_util.createBinding)(param.bind,elem,typeof param.value);binding&&(bindingsDOM[param.name]=binding,paramValues[param.name]=binding.getValue())}));const controls=[];widget.parameters.filter((param=>param.bind)).forEach((param=>{controls.push(this.formCtrl.createControlHTML(hostId,param,paramValues[param.name]))}));const data={name:widget.name,controls:controls};this.#modal=await this.modalSrv.create("context",data,{destroyOnHidden:!0}),this.formCtrl.attachImagePickers(this.#modal.body),this.formCtrl.applyFieldWatchers(this.#modal.body,paramValues,widget,!1),this.#modal.footer.find("button.btn-secondary").on("click",(()=>{this.#modal.destroy()})),this.#modal.footer.find("button.btn-primary").on("click",(()=>{const form=this.#modal.body.find("form"),updatedValues=this.formCtrl.extractFormParameters(widget,form,null);this.#modal.destroy(),Object.keys(bindingsDOM).forEach((key=>{bindingsDOM[key].setValue(updatedValues[key])}))})),this.#modal.show()}close(){this.#modal.destroy()}},_exports.default}));

//# sourceMappingURL=widgetPropertiesCtrl.min.js.map