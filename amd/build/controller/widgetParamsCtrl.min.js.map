{"version":3,"file":"widgetParamsCtrl.min.js","sources":["../../src/controller/widgetParamsCtrl.js"],"sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable no-eq-null */\n/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport { applyWidgetFilter } from '../util';\n\nexport class WidgetParamsCtrl {\n   /**\n    * @type {import('./widgetPickerCtrl').WidgetPickerCtrl | undefined }\n    */\n   parentCtrl;\n  /**\n   * @param {import('../plugin').TinyMCE} editor\n   * @param {import('../service/userStorageSrv').UserStorageSrv} userStorage\n   * @param {import('../service/templateSrv').TemplateSrv} templateSrv\n   * @param {import('../service/modalSrv').ModalSrv} modalSrv\n   * @param {import('../controller/formCtrl').FormCtrl} formCtrl\n   * @param {import('../util').WidgetWrapper} widget\n   */\n   constructor(editor, userStorage, templateSrv, modalSrv, formCtrl, widget) {\n      /** @type {import('../plugin').TinyMCE} */\n      this.editor = editor;\n      /** @type {import('../service/userStorageSrv').UserStorageSrv} */\n      this.storage = userStorage;\n      /** @type {import('../service/templateSrv').TemplateSrv} */\n      this.templateSrv = templateSrv;\n      /** @type {import('../service/modalSrv').ModalSrv} */\n      this.modalSrv = modalSrv;\n      /** @type {import('../controller/formCtrl').FormCtrl} */\n      this.formCtrl = formCtrl;\n      /** @type {import('../util').WidgetWrapper} */\n      this.widget = widget;\n   }\n   /**\n    * Displays a dialogue for configuring the parameters of the selected snpt\n    */\n   async handleAction() {\n      // Show modal with buttons.\n      const data = this.formCtrl.createContext(this.widget);\n      const modal = await this.modalSrv.create('params', data, () => {\n         this.modal.destroy();\n         this.modal = null;\n      });\n      this.modal = modal;\n      modal.body.find(`a[href=\"#${data.idTabpane}_1\"`).on(\"click\", async () => {\n         // Handle preview;\n         const ctxFromDialogue = this.formCtrl.extractFormParameters(this.widget, modal.body.find(\"form\"));\n         await this.updatePreview(data.idTabpane, ctxFromDialogue);\n      });\n      this.formCtrl.attachImagePickers(modal.body);\n      modal.footer.show();\n      modal.footer.find(\"button.btn-secondary\").on(\"click\", async() => {\n         // Go back to main menú\n         modal.destroy();\n         if (this.parentCtrl) {\n            await this.parentCtrl.handleAction();\n         }\n      });\n      modal.footer.find(\"button.btn-primary\").on(\"click\", async () => {\n         // Go back to main menú\n         const ctxFromDialogue = this.formCtrl.extractFormParameters(this.widget, modal.body.find(\"form\"));\n         modal.hide();\n         await this.insertWidget(ctxFromDialogue);\n         modal.destroy();\n      });\n\n      // Change input fields visibilities upon conditions\n      const selectMode = this.editor.selection.getContent().trim() != '';\n      this.formCtrl.applyFieldWatchers(modal.body, this.widget.defaults, this.widget, selectMode);\n\n      modal.show();\n   }\n\n   destroy() {\n      if (this.modal) {\n         this.modal.destroy();\n      }\n   }\n\n   /**\n     * @param {object} ctx\n     * @returns {Promise<string>} The rendered template\n     */\n    render(ctx) {\n        const defaultsCopy = {...this.widget.defaults};\n        const toInterpolate = Object.assign(defaultsCopy, ctx || {});\n        // Decide which template engine to use\n        let engine = this.widget.prop('engine');\n        return this.templateSrv.render(this.widget.template ?? \"\", toInterpolate,\n            this.widget.I18n, engine);\n   }\n\n   /**\n    * @param {Object.<string, any>} ctxFromDialogue\n    * @returns {Promise<string>}\n    */\n   async generateInterpolatedCode(ctxFromDialogue) {\n      const sel = this.editor.selection.getContent();\n      // Decideix quin mode de selecció estam\n      console.log(\"Selection\", this.editor.selection, sel);\n      let interpoledComponentCode = await this.render(ctxFromDialogue);\n      if (sel.trim() && this.widget.insertquery) {\n         let query = this.widget.insertquery.trim();\n         let replaceMode = query.startsWith('r!');\n         if (replaceMode) {\n            query = query.substring(2).trim();\n         }\n         // We are in selection mode\n         const tmpDiv = document.createElement(\"div\");\n         tmpDiv.innerHTML = interpoledComponentCode;\n         const insertPoint = tmpDiv.querySelector(this.widget.insertquery);\n         if (insertPoint) {\n            if (replaceMode) {\n               // Replace the insertPoint by the interpolated HTML\n               insertPoint.outerHTML = sel;\n            } else {\n               // Inserts the interpolated HTML into the insertPoint\n               insertPoint.innerHTML = sel;\n            }\n            interpoledComponentCode = tmpDiv.innerHTML;\n         }\n      }\n      return interpoledComponentCode;\n   }\n\n   /**\n    * @param {number} idTabpane\n    * @param {Object.<string, any>} ctxFromDialogue\n    * @returns\n    */\n   async updatePreview(idTabpane, ctxFromDialogue) {\n      const interpoledCode = await this.generateInterpolatedCode(ctxFromDialogue);\n      const $previewPanel = this.modal.body.find(`#${idTabpane}_1`);\n      $previewPanel.html(interpoledCode);\n   }\n\n   /**\n    * @param {Object.<string, any>} ctxFromDialogue\n    * @returns\n    */\n   async insertWidget(ctxFromDialogue) {\n      const recentWidgets = this.storage.getFromSession(\"recentsnpt\", \"\").split(\",\")\n         .filter((/** @type{string}**/ e) => e.trim());\n      const pos = recentWidgets.indexOf(this.widget.key);\n      if (pos >= 0) {\n         recentWidgets.splice(pos, 1);\n      }\n      recentWidgets.unshift(this.widget.key);\n      if (recentWidgets.length > 4) {\n         recentWidgets.splice(5, recentWidgets.length - 4);\n      }\n\n      this.storage.setToSession(\"recentsnpt\", recentWidgets.join(\",\"), true);\n\n      if (this.widget.isFilter()) {\n         applyWidgetFilter(this.editor, this.widget.template || '', false, ctxFromDialogue);\n         return;\n      }\n      const interpoledCode = await this.generateInterpolatedCode(ctxFromDialogue);\n      // Normal insert mode\n      this.editor.selection.setContent(interpoledCode);\n      this.editor.focus();\n   }\n\n}\n"],"names":["parentCtrl","constructor","editor","userStorage","templateSrv","modalSrv","formCtrl","widget","storage","data","this","createContext","modal","create","destroy","body","find","idTabpane","on","async","ctxFromDialogue","extractFormParameters","updatePreview","attachImagePickers","footer","show","handleAction","hide","insertWidget","selectMode","selection","getContent","trim","applyFieldWatchers","defaults","render","ctx","defaultsCopy","toInterpolate","Object","assign","engine","prop","template","I18n","sel","console","log","interpoledComponentCode","insertquery","query","replaceMode","startsWith","substring","tmpDiv","document","createElement","innerHTML","insertPoint","querySelector","outerHTML","interpoledCode","generateInterpolatedCode","html","recentWidgets","getFromSession","split","filter","e","pos","indexOf","key","splice","unshift","length","setToSession","join","isFilter","setContent","focus"],"mappings":";;;;;;;;MA+BGA,WASAC,YAAYC,OAAQC,YAAaC,YAAaC,SAAUC,SAAUC,aAE1DL,OAASA,YAETM,QAAUL,iBAEVC,YAAcA,iBAEdC,SAAWA,cAEXC,SAAWA,cAEXC,OAASA,kCAORE,KAAOC,KAAKJ,SAASK,cAAcD,KAAKH,QACxCK,YAAcF,KAAKL,SAASQ,OAAO,SAAUJ,MAAM,UACjDG,MAAME,eACNF,MAAQ,aAEXA,MAAQA,MACbA,MAAMG,KAAKC,KAAM,YAAWP,KAAKQ,gBAAgBC,GAAG,SAASC,gBAEpDC,gBAAkBV,KAAKJ,SAASe,sBAAsBX,KAAKH,OAAQK,MAAMG,KAAKC,KAAK,eACnFN,KAAKY,cAAcb,KAAKQ,UAAWG,yBAEvCd,SAASiB,mBAAmBX,MAAMG,MACvCH,MAAMY,OAAOC,OACbb,MAAMY,OAAOR,KAAK,wBAAwBE,GAAG,SAASC,UAEnDP,MAAME,UACFJ,KAAKV,kBACAU,KAAKV,WAAW0B,kBAG5Bd,MAAMY,OAAOR,KAAK,sBAAsBE,GAAG,SAASC,gBAE3CC,gBAAkBV,KAAKJ,SAASe,sBAAsBX,KAAKH,OAAQK,MAAMG,KAAKC,KAAK,SACzFJ,MAAMe,aACAjB,KAAKkB,aAAaR,iBACxBR,MAAME,mBAIHe,WAA0D,IAA7CnB,KAAKR,OAAO4B,UAAUC,aAAaC,YACjD1B,SAAS2B,mBAAmBrB,MAAMG,KAAML,KAAKH,OAAO2B,SAAUxB,KAAKH,OAAQsB,YAEhFjB,MAAMa,OAGTX,UACOJ,KAAKE,YACDA,MAAME,UAQhBqB,OAAOC,WACGC,aAAe,IAAI3B,KAAKH,OAAO2B,UAC/BI,cAAgBC,OAAOC,OAAOH,aAAcD,KAAO,QAErDK,OAAS/B,KAAKH,OAAOmC,KAAK,iBACvBhC,KAAKN,YAAY+B,OAAOzB,KAAKH,OAAOoC,UAAY,GAAIL,cACvD5B,KAAKH,OAAOqC,KAAMH,uCAOIrB,uBACtByB,IAAMnC,KAAKR,OAAO4B,UAAUC,aAElCe,QAAQC,IAAI,YAAarC,KAAKR,OAAO4B,UAAWe,SAC5CG,8BAAgCtC,KAAKyB,OAAOf,oBAC5CyB,IAAIb,QAAUtB,KAAKH,OAAO0C,YAAa,KACpCC,MAAQxC,KAAKH,OAAO0C,YAAYjB,OAChCmB,YAAcD,MAAME,WAAW,MAC/BD,cACDD,MAAQA,MAAMG,UAAU,GAAGrB,cAGxBsB,OAASC,SAASC,cAAc,OACtCF,OAAOG,UAAYT,8BACbU,YAAcJ,OAAOK,cAAcjD,KAAKH,OAAO0C,aACjDS,cACGP,YAEDO,YAAYE,UAAYf,IAGxBa,YAAYD,UAAYZ,IAE3BG,wBAA0BM,OAAOG,kBAGhCT,4CAQU/B,UAAWG,uBACtByC,qBAAuBnD,KAAKoD,yBAAyB1C,iBACrCV,KAAKE,MAAMG,KAAKC,KAAM,IAAGC,eACjC8C,KAAKF,mCAOHzC,uBACV4C,cAAgBtD,KAAKF,QAAQyD,eAAe,aAAc,IAAIC,MAAM,KACtEC,QAA6BC,GAAMA,EAAEpC,SACnCqC,IAAML,cAAcM,QAAQ5D,KAAKH,OAAOgE,QAC1CF,KAAO,GACRL,cAAcQ,OAAOH,IAAK,GAE7BL,cAAcS,QAAQ/D,KAAKH,OAAOgE,KAC9BP,cAAcU,OAAS,GACxBV,cAAcQ,OAAO,EAAGR,cAAcU,OAAS,QAG7ClE,QAAQmE,aAAa,aAAcX,cAAcY,KAAK,MAAM,GAE7DlE,KAAKH,OAAOsE,kDACKnE,KAAKR,OAAQQ,KAAKH,OAAOoC,UAAY,IAAI,EAAOvB,uBAG/DyC,qBAAuBnD,KAAKoD,yBAAyB1C,sBAEtDlB,OAAO4B,UAAUgD,WAAWjB,qBAC5B3D,OAAO6E"}