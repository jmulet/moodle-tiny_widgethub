{"version":3,"file":"widgetproperties_ctrl.min.js","sources":["../../src/controller/widgetproperties_ctrl.js"],"sourcesContent":["/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getFormCtrl} from '../controller/form_ctrl';\nimport {getModalSrv} from '../service/modal_service';\nimport {createBinding} from '../util';\n\n/**\n * @typedef {JQuery<HTMLElement>} ModalDialogue\n * @property {JQuery<HTMLElement>} header\n * @property {JQuery<HTMLElement>} body\n * @property {JQuery<HTMLElement>} footer\n * @property {() => void} destroy\n * @property {() => void} show\n */\n\n/**\n * @class\n * @classdesc Defines a generic editor dialogue based on widget definition fields\n */\nexport class WidgetPropertiesCtrl {\n    /** @type {import('../service/modal_service').ModalDialogue | null} */\n    modal = null;\n\n    /**\n     * @param {import('../plugin').TinyMCE} editor\n     * @param {import('../controller/form_ctrl').FormCtrl} formCtrl\n     * @param {import('../service/modal_service').ModalSrv} modalSrv\n     */\n    constructor(editor, formCtrl, modalSrv) {\n        /** @type {import('../plugin').TinyMCE} */\n        this.editor = editor;\n        /** @type {import('../controller/form_ctrl').FormCtrl} */\n        this.formCtrl = formCtrl;\n        /** @type {import('../service/modal_service').ModalSrv} */\n        this.modalSrv = modalSrv;\n    }\n\n    /**\n     * Displays a modal dialog for editing the currentContext\n     * based on contextual\n     * @param {import('../contextinit').PathResult} currentContext\n     * @returns\n     */\n    async show(currentContext) {\n        if (!currentContext.widget) {\n            console.error(\"Missing widget on currentContext\");\n            return;\n        }\n        const widget = currentContext.widget;\n        const hostId = this.editor.id;\n        // The DOM element for the root of the widget\n        const elem = currentContext.elem;\n\n        if (!elem || !widget?.hasBindings()) {\n            console.error(\"Invalid widget definition \", widget);\n            return;\n        }\n\n        // Create bindings\n        /** @type {Object.<string, any>} */\n        const bindingsDOM = {};\n        // Extract param values from DOM\n        /** @type {Object.<string, any>} */\n        const paramValues = {};\n        // Parameters that contain bindings\n        const parametersWithBindings = widget.parameters.filter(param => param.bind != undefined);\n        parametersWithBindings.forEach((param) => {\n            if (param.bind && param.type !== 'repeatable') {\n                // A simple control binding\n                const binding = createBinding(param.bind, elem, typeof (param.value));\n                if (binding) {\n                    const pname = param.name;\n                    bindingsDOM[pname] = binding;\n                    paramValues[pname] = binding.getValue();\n                }\n            } else if (typeof (param.bind) === 'string' && param.type === 'repeatable') {\n                // Find all item containers in DOM (param.bind is a query to every item element)\n                document.querySelectorAll(param.bind).forEach(itemRoot => {\n                    // For every field in parameter which has binding, create it\n                    param.fields?.filter(f => f.bind !== undefined).forEach((f, i) => {\n                        // @ts-ignore\n                        const binding = createBinding(f.bind, itemRoot, typeof (f.value));\n                        if (binding) {\n                            const pname = `${param.name}[${i}].${f.name}`;\n                            bindingsDOM[pname] = binding;\n                            paramValues[pname] = binding.getValue();\n                        }\n                    });\n                });\n            }\n        });\n\n        // Create parameters form controls\n        /** @type {string[]} */\n        const controls = parametersWithBindings\n            .map(param => this.formCtrl.createControlHTML(hostId, param, paramValues[param.name]));\n\n        const ctxData = {\n            name: widget.name,\n            controls: controls\n        };\n\n        // Create the modal\n        // @ts-ignore\n        this.modal = await this.modalSrv.create('context', ctxData, () => {\n            this.modal?.destroy();\n            this.modal = null;\n        });\n        // Bind actions on image and color pickers\n        this.formCtrl.attachPickers(this.modal.body);\n        // Applying watchers to the form elements\n        this.formCtrl.applyFieldWatchers(this.modal.body, paramValues, widget, false);\n\n        // Bind accept action to modal\n        this.modal.footer.find(\"button.tiny_widgethub-btn-secondary\").on(\"click\", () => {\n            this.modal?.destroy();\n        });\n        this.modal.footer.find(\"button.tiny_widgethub-btn-primary\").on(\"click\", () => {\n            const form = this.modal?.body?.find(\"form\");\n            let updatedValues = paramValues;\n            if (form) {\n                updatedValues = this.formCtrl.extractFormParameters(widget, form, true);\n            }\n            this.modal?.destroy();\n            // Update parameter values back to DOM\n            Object.keys(bindingsDOM).forEach(key => {\n                const val = updatedValues[key];\n                if (Array.isArray(val)) {\n                    val.forEach((obj, i) => {\n                        if (typeof obj !== 'object') {\n                            return;\n                        }\n                        Object.keys(obj).forEach(objKey => {\n                            const realKey = `${key}[${i}].${objKey}`;\n                            bindingsDOM[realKey].setValue(obj[objKey]);\n                        });\n                    });\n                } else {\n                    bindingsDOM[key].setValue(val);\n                }\n            });\n        });\n\n        // Help circles require popover\n        try {\n            // @ts-ignore\n            this.modal.body.popover({\n            container: \"body\",\n            selector: \"[data-toggle=popover][data-trigger=hover]\",\n            trigger: \"hover\"\n            });\n        } catch (ex) {\n            // console.error(ex);\n        }\n\n        this.modal.show();\n    }\n\n    close() {\n        this.modal?.destroy();\n    }\n}\n\nconst widgetPropertiesCtrlInstances = new Map();\n/**\n * @param {import('../plugin').TinyMCE} editor\n * @returns {WidgetPropertiesCtrl}\n */\nexport function getWidgetPropertiesCtrl(editor) {\n    let instance = widgetPropertiesCtrlInstances.get(editor);\n    if (!instance) {\n        instance = new WidgetPropertiesCtrl(editor, getFormCtrl(editor), getModalSrv());\n        widgetPropertiesCtrlInstances.set(editor, instance);\n    }\n    return instance;\n}\n"],"names":["editor","instance","widgetPropertiesCtrlInstances","get","WidgetPropertiesCtrl","set","modal","constructor","formCtrl","modalSrv","currentContext","widget","console","error","hostId","this","id","elem","hasBindings","bindingsDOM","paramValues","parametersWithBindings","parameters","filter","param","undefined","bind","forEach","type","binding","value","pname","name","getValue","document","querySelectorAll","itemRoot","fields","f","i","controls","map","createControlHTML","ctxData","create","destroy","attachPickers","body","applyFieldWatchers","footer","find","on","form","_this$modal3","_this$modal3$body","updatedValues","extractFormParameters","Object","keys","key","val","Array","isArray","obj","objKey","setValue","popover","container","selector","trigger","ex","show","close","Map"],"mappings":"+TA8LwCA,YAChCC,SAAWC,8BAA8BC,IAAIH,QAC5CC,WACDA,SAAW,IAAIG,qBAAqBJ,QAAQ,0BAAYA,SAAS,iCACjEE,8BAA8BG,IAAIL,OAAQC,kBAEvCA;;;;;;;;MA3JEG,qBAETE,MAAQ,KAORC,YAAYP,OAAQQ,SAAUC,eAErBT,OAASA,YAETQ,SAAWA,cAEXC,SAAWA,oBASTC,oBACFA,eAAeC,mBAChBC,QAAQC,MAAM,0CAGZF,OAASD,eAAeC,OACxBG,OAASC,KAAKf,OAAOgB,GAErBC,KAAOP,eAAeO,SAEvBA,MAASN,MAAAA,SAAAA,OAAQO,0BAClBN,QAAQC,MAAM,6BAA8BF,cAM1CQ,YAAc,GAGdC,YAAc,GAEdC,uBAAyBV,OAAOW,WAAWC,QAAOC,OAAuBC,MAAdD,MAAME,OACvEL,uBAAuBM,SAASH,WACxBA,MAAME,MAAuB,eAAfF,MAAMI,KAAuB,OAErCC,SAAU,uBAAcL,MAAME,KAAMT,YAAcO,MAAMM,UAC1DD,QAAS,OACHE,MAAQP,MAAMQ,KACpBb,YAAYY,OAASF,QACrBT,YAAYW,OAASF,QAAQI,gBAEF,iBAAhBT,MAAME,MAAqC,eAAfF,MAAMI,MAEjDM,SAASC,iBAAiBX,MAAME,MAAMC,SAAQS,mDAE1CZ,MAAMa,+CAAQd,QAAOe,QAAgBb,IAAXa,EAAEZ,OAAoBC,SAAQ,CAACW,EAAGC,WAElDV,SAAU,uBAAcS,EAAEZ,KAAMU,gBAAkBE,EAAER,UACtDD,QAAS,OACHE,MAAS,GAAEP,MAAMQ,QAAQO,MAAMD,EAAEN,OACvCb,YAAYY,OAASF,QACrBT,YAAYW,OAASF,QAAQI,2BAS3CO,SAAWnB,uBACZoB,KAAIjB,OAAST,KAAKP,SAASkC,kBAAkB5B,OAAQU,MAAOJ,YAAYI,MAAMQ,SAE7EW,QAAU,CACZX,KAAMrB,OAAOqB,KACbQ,SAAUA,eAKTlC,YAAcS,KAAKN,SAASmC,OAAO,UAAWD,SAAS,8CACnDrC,0CAAOuC,eACPvC,MAAQ,aAGZE,SAASsC,cAAc/B,KAAKT,MAAMyC,WAElCvC,SAASwC,mBAAmBjC,KAAKT,MAAMyC,KAAM3B,YAAaT,QAAQ,QAGlEL,MAAM2C,OAAOC,KAAK,uCAAuCC,GAAG,SAAS,gDACjE7C,4CAAOuC,kBAEXvC,MAAM2C,OAAOC,KAAK,qCAAqCC,GAAG,SAAS,2DAC9DC,0BAAOrC,KAAKT,yDAAL+C,aAAYN,yCAAZO,kBAAkBJ,KAAK,YAChCK,cAAgBnC,YAChBgC,OACAG,cAAgBxC,KAAKP,SAASgD,sBAAsB7C,OAAQyC,MAAM,8BAEjE9C,4CAAOuC,UAEZY,OAAOC,KAAKvC,aAAaQ,SAAQgC,YACvBC,IAAML,cAAcI,KACtBE,MAAMC,QAAQF,KACdA,IAAIjC,SAAQ,CAACoC,IAAKxB,KACK,iBAARwB,KAGXN,OAAOC,KAAKK,KAAKpC,SAAQqC,SAErB7C,YADiB,GAAEwC,OAAOpB,MAAMyB,UACXC,SAASF,IAAIC,eAI1C7C,YAAYwC,KAAKM,SAASL,oBAQ7BtD,MAAMyC,KAAKmB,QAAQ,CACxBC,UAAW,OACXC,SAAU,4CACVC,QAAS,UAEX,MAAOC,UAIJhE,MAAMiE,OAGfC,mDACSlE,4CAAOuC,oEAId3C,8BAAgC,IAAIuE"}