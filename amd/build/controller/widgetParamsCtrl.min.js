define("tiny_widgethub/controller/widgetParamsCtrl",["exports","../util"],(function(_exports,_util){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.WidgetParamsCtrl=void 0;_exports.WidgetParamsCtrl=
/**
   * Tiny WidgetHub plugin.
   *
   * @module      tiny_widgethub/plugin
   * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
class{parentCtrl;constructor(_ref,widget){let{editor:editor,userStorage:userStorage,templateSrv:templateSrv,modalSrv:modalSrv,formCtrl:formCtrl}=_ref;this.editor=editor,this.storage=userStorage,this.templateSrv=templateSrv,this.modalSrv=modalSrv,this.formCtrl=formCtrl,this.widget=widget}async handleAction(){const data=this.formCtrl.createContext(this.widget),modal=await this.modalSrv.create("params",data,(()=>{this.modal.destroy(),this.modal=null}));this.modal=modal,modal.body.find(`a[href="#${data.idTabpane}_1"`).on("click",(async()=>{const ctxFromDialogue=this.formCtrl.extractFormParameters(this.widget,modal.body.find("form"));await this.updatePreview(data.idTabpane,ctxFromDialogue)})),this.formCtrl.attachImagePickers(modal.body),modal.footer.show(),modal.footer.find("button.btn-secondary").on("click",(async()=>{modal.destroy(),this.parentCtrl&&await this.parentCtrl.handleAction()})),modal.footer.find("button.btn-primary").on("click",(async()=>{const ctxFromDialogue=this.formCtrl.extractFormParameters(this.widget,modal.body.find("form"));modal.hide(),await this.insertWidget(ctxFromDialogue),modal.destroy()}));const selectMode=""!=this.editor.selection.getContent().trim();this.formCtrl.applyFieldWatchers(modal.body,this.widget.defaults,this.widget,selectMode),modal.show()}destroy(){this.modal&&this.modal.destroy()}render(ctx){const defaultsCopy={...this.widget.defaults},toInterpolate=Object.assign(defaultsCopy,ctx||{});let engine=this.widget.prop("engine");return this.templateSrv.render(this.widget.template??"",toInterpolate,this.widget.I18n,engine)}async generateInterpolatedCode(ctxFromDialogue){const sel=this.editor.selection.getContent();console.log("Selection",this.editor.selection,sel);let interpoledComponentCode=await this.render(ctxFromDialogue);if(sel.trim()&&this.widget.insertquery){let query=this.widget.insertquery.trim(),replaceMode=query.startsWith("r!");replaceMode&&(query=query.substring(2).trim());const tmpDiv=document.createElement("div");tmpDiv.innerHTML=interpoledComponentCode;const insertPoint=tmpDiv.querySelector(this.widget.insertquery);insertPoint&&(replaceMode?insertPoint.outerHTML=sel:insertPoint.innerHTML=sel,interpoledComponentCode=tmpDiv.innerHTML)}return interpoledComponentCode}async updatePreview(idTabpane,ctxFromDialogue){const interpoledCode=await this.generateInterpolatedCode(ctxFromDialogue);this.modal.body.find(`#${idTabpane}_1`).html(interpoledCode)}async insertWidget(ctxFromDialogue){const recentWidgets=this.storage.getFromSession("recentsnpt","").split(",").filter((e=>e.trim())),pos=recentWidgets.indexOf(this.widget.key);if(pos>=0&&recentWidgets.splice(pos,1),recentWidgets.unshift(this.widget.key),recentWidgets.length>4&&recentWidgets.splice(5,recentWidgets.length-4),this.storage.setToSession("recentsnpt",recentWidgets.join(","),!0),this.widget.isFilter())return void(0,_util.applyWidgetFilter)(this.editor,this.widget.template||"",!1,ctxFromDialogue);const interpoledCode=await this.generateInterpolatedCode(ctxFromDialogue);this.editor.selection.setContent(interpoledCode),this.editor.focus()}}}));

//# sourceMappingURL=widgetParamsCtrl.min.js.map