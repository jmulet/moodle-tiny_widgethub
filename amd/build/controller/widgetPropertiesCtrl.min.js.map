{"version":3,"file":"widgetPropertiesCtrl.min.js","sources":["../../src/controller/widgetPropertiesCtrl.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {createBinding} from '../util';\n\n/**\n * @class\n * @classdesc Defines a generic editor dialogue based on widget definition fields\n */\nexport default class WidgetPropertiesCtrl {\n    // @ts-ignore\n    #modal;\n\n    /**\n     * @param {import('../container').DIContainer} container\n     */\n    constructor({editor, formCtrl, modalSrv}) {\n        this.editor = editor;\n        this.formCtrl = formCtrl;\n        this.modalSrv = modalSrv;\n    }\n\n    /**\n     * Displays a modal dialog for editing the currentContext\n     * based on contextual\n     * @param {import('../contextInit').PathResult} currentContext\n     * @returns\n     */\n    async show(currentContext) {\n        const widget = currentContext.widget;\n        const hostId = this.editor.id;\n        const elem = currentContext.elem;\n\n        if (!elem || !widget?.hasBindings()) {\n            // eslint-disable-next-line no-console\n            console.error(\"Invalid genericEditor widget definition \", widget);\n            return;\n        }\n\n        // Create bindings\n        /** @type {Object.<string, any>} */\n        const bindingsDOM = {};\n        // Extract param values from DOM\n        /** @type {Object.<string, any>} */\n        const paramValues = {};\n        widget.parameters.filter(param => param.bind != undefined).forEach((param) => {\n            if (!param.bind) {\n                return;\n            }\n            const binding = createBinding(param.bind, elem, typeof (param.value));\n            if (binding) {\n                bindingsDOM[param.name] = binding;\n                paramValues[param.name] = binding.getValue();\n            }\n        });\n\n        // Create parameters form controls\n        // Filter only those parameters which have default Values\n        /** @type {string[]} */\n        const controls = [];\n        widget.parameters.filter(param => param.bind).forEach((param) => {\n            controls.push(this.formCtrl.createControlHTML(hostId, param, paramValues[param.name]));\n        });\n\n        const data = {\n            name: widget.name,\n            controls: controls\n        };\n\n        // Create the modal\n        // @ts-ignore\n        this.#modal = await this.modalSrv.create('context', data, () => {\n            this.#modal.destroy();\n            this.#modal = null;\n        });\n        this.formCtrl.attachImagePickers(this.#modal.body);\n        // Applying watchers to the form elements\n        this.formCtrl.applyFieldWatchers(this.#modal.body, paramValues, widget, false);\n\n        // Bind accept action to modal\n        this.#modal.footer.find(\"button.btn-secondary\").on(\"click\", () => {\n            this.#modal.destroy();\n        });\n        this.#modal.footer.find(\"button.btn-primary\").on(\"click\", () => {\n            const form = this.#modal.body.find(\"form\");\n            const updatedValues = this.formCtrl.extractFormParameters(widget, form);\n            this.#modal.destroy();\n            // Apply Param Values To DOM\n            Object.keys(bindingsDOM).forEach(key => {\n                bindingsDOM[key].setValue(updatedValues[key]);\n            });\n        });\n        this.#modal.show();\n    }\n\n    close() {\n        this.#modal.destroy();\n    }\n}\n"],"names":["constructor","editor","formCtrl","modalSrv","currentContext","widget","hostId","this","id","elem","hasBindings","console","error","bindingsDOM","paramValues","parameters","filter","param","undefined","bind","forEach","binding","value","name","getValue","controls","push","createControlHTML","data","modal","create","destroy","attachImagePickers","body","applyFieldWatchers","footer","find","on","form","updatedValues","extractFormParameters","Object","keys","key","setValue","show","close"],"mappings":";;;;;;;;aAoCIA,sBAAYC,OAACA,OAADC,SAASA,SAATC,SAAmBA,oBACtBF,OAASA,YACTC,SAAWA,cACXC,SAAWA,oBASTC,sBACDC,OAASD,eAAeC,OACxBC,OAASC,KAAKN,OAAOO,GACrBC,KAAOL,eAAeK,SAEvBA,MAASJ,MAAAA,SAAAA,OAAQK,0BAElBC,QAAQC,MAAM,2CAA4CP,cAMxDQ,YAAc,GAGdC,YAAc,GACpBT,OAAOU,WAAWC,QAAOC,OAAuBC,MAAdD,MAAME,OAAmBC,SAASH,YAC3DA,MAAME,kBAGLE,SAAU,uBAAcJ,MAAME,KAAMV,YAAcQ,MAAMK,OAC1DD,UACAR,YAAYI,MAAMM,MAAQF,QAC1BP,YAAYG,MAAMM,MAAQF,QAAQG,qBAOpCC,SAAW,GACjBpB,OAAOU,WAAWC,QAAOC,OAASA,MAAME,OAAMC,SAASH,QACnDQ,SAASC,KAAKnB,KAAKL,SAASyB,kBAAkBrB,OAAQW,MAAOH,YAAYG,MAAMM,iBAG7EK,KAAO,CACTL,KAAMlB,OAAOkB,KACbE,SAAUA,gBAKTI,YAAetB,KAAKJ,SAAS2B,OAAO,UAAWF,MAAM,WACjDC,MAAOE,gBACPF,MAAS,aAEb3B,SAAS8B,mBAAmBzB,MAAKsB,MAAOI,WAExC/B,SAASgC,mBAAmB3B,MAAKsB,MAAOI,KAAMnB,YAAaT,QAAQ,SAGnEwB,MAAOM,OAAOC,KAAK,wBAAwBC,GAAG,SAAS,WACnDR,MAAOE,mBAEXF,MAAOM,OAAOC,KAAK,sBAAsBC,GAAG,SAAS,WAChDC,KAAO/B,MAAKsB,MAAOI,KAAKG,KAAK,QAC7BG,cAAgBhC,KAAKL,SAASsC,sBAAsBnC,OAAQiC,YAC7DT,MAAOE,UAEZU,OAAOC,KAAK7B,aAAaO,SAAQuB,MAC7B9B,YAAY8B,KAAKC,SAASL,cAAcI,kBAG3Cd,MAAOgB,OAGhBC,cACSjB,MAAOE"}