{"version":3,"file":"widgetpicker_ctrl.min.js","sources":["../../src/controller/widgetpicker_ctrl.js"],"sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable no-eq-null */\n/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// eslint-disable-next-line camelcase\nimport {get_string} from 'core/str';\nimport {getWidgetParamsFactory} from '../controller/widgetparams_ctrl';\nimport {getEditorOptions, getGlobalConfig} from '../options';\nimport {getModalSrv} from '../service/modal_service';\nimport {getTemplateSrv} from '../service/template_service';\nimport {getUserStorage} from '../service/userstorage_service';\nimport {debounce, genID, hashCode, searchComp, toggleClass} from '../util';\n\n/**\n * @param {HTMLElement} el\n * @param {boolean} visible\n */\nexport const setVisibility = function(el, visible) {\n    if(!el) {\n        return;\n    }\n    if (visible) {\n        el.classList.remove(\"d-none\");\n    } else {\n        el.classList.add(\"d-none\");\n    }\n};\n\nexport class WidgetPickerCtrl {\n    /** @type {import('../service/modal_service').ModalDialogue} */\n    // @ts-ignore\n    modal;\n\n    /**\n     * @param {import('../plugin').TinyMCE} editor\n     * @param {import('../options').EditorOptions} editorOptions\n     * @param {(widget: import('../options').Widget) => import('../controller/widgetparams_ctrl').WidgetParamsCtrl} widgetParamsFactory\n     * @param {import('../service/modal_service').ModalSrv} modalSrv\n     * @param {import('../service/template_service').TemplateSrv} templateSrv\n     * @param {import('../service/userstorage_service').UserStorageSrv} userStorage\n     */\n    constructor(editor, editorOptions, widgetParamsFactory, modalSrv, templateSrv, userStorage) {\n        /** @type {import('../plugin').TinyMCE} */\n        this.editor = editor;\n        /** @type {import('../options').EditorOptions} */\n        this.editorOptions = editorOptions;\n        /** @type {(widget: import('../options').Widget) => import('../controller/widgetparams_ctrl').WidgetParamsCtrl} */\n        this.widgetParamsFactory = widgetParamsFactory;\n        /** @type {import('../service/modal_service').ModalSrv} */\n        this.modalSrv = modalSrv;\n        /** @type {import('../service/template_service').TemplateSrv} */\n        this.templateSrv = templateSrv;\n        /** @type {import('../service/userstorage_service').UserStorageSrv} */\n        this.storage = userStorage;\n        /** @type {number} */\n        this.scrollPos = 0;\n    }\n\n    isSelectMode() {\n        return this.editor.selection.getContent().trim().length > 0;\n    }\n\n    /**\n     * Shows or hides buttons according to the search text condition\n     * When text == '', all non-hidden buttons should be displayed\n     * @param {JQuery<HTMLElement>} bodyForm\n     * @param {string} searchtext\n     * @returns {number}\n     */\n    setWidgetButtonsVisibility(bodyForm, searchtext) {\n        let numshown = 0;\n        const selectmode = this.isSelectMode();\n        /** @type {JQuery<HTMLDivElement>} */\n        const allbtns = bodyForm.find(\".tiny_widgethub-btn-group\");\n        allbtns.each((i, el) => {\n            // Is supported in select mode?\n            let visible = !selectmode || (selectmode && el.dataset.selectable === \"true\");\n            const el2 = el.querySelector('button');\n            // Does fullfill the search criteria?\n            visible = visible && (el2 !== null) && (searchtext.trim() === '' || searchComp(el2.textContent ?? '', searchtext) ||\n                searchComp(el2.dataset.title ?? '', searchtext));\n            setVisibility(el, visible);\n            if (visible) {\n                numshown++;\n            }\n        });\n        return numshown;\n    }\n\n    /**\n     * Callback on keyup event\n     */\n    onSearchKeyup() {\n        const searchtext = this.modal.body.find(\"input\").val() ?? '';\n        this.storage.setToSession('searchtext', searchtext, true);\n\n        // Are we in selectmode, does the widget support it? insertquery\n        const numshown = this.setWidgetButtonsVisibility(this.modal.body, searchtext);\n        // If no button visible, show emptyList message\n        setVisibility(this.modal.body.find(\".tiny_widgethub-emptylist\")[0], numshown == 0);\n\n        // Hide categories without any button visible\n        /** @type {JQuery<HTMLElement>} */\n        const allcatgs = this.modal.body.find(\".tiny_widgethub-category\");\n        allcatgs.each((_, el) => {\n            const count = el.querySelectorAll(\".tiny_widgethub-btn-group:not(.d-none)\").length;\n            setVisibility(el, count > 0);\n        });\n    }\n\n    /**\n     * @param {*} evt\n     */\n    async onMouseEnterButton(evt) {\n        const widgetTable = this.editorOptions.widgetDict;\n        const key = evt.target?.closest('.tiny_widgethub-btn-group')?.dataset?.key ?? '';\n        const widget = widgetTable[key];\n        if (!widget || widget.isFilter()) {\n            // Filters do not offer preview\n            return;\n        }\n        /** @type {string | undefined} */\n        let html = widget._preview;\n        if (!html) {\n            // Generate preview with default parameters\n            html = await this.generatePreview(widget);\n            widget._preview = html;\n        }\n        this.modal.body.find(\"div.tiny_widgethub-preview\")\n            .html(html)\n            .css(\"display\", \"block\");\n    }\n\n    async createModal() {\n        /** @type {string} */\n        const searchtext = this.storage.getFromSession(\"searchtext\", \"\");\n        const data = {\n            ...this.getPickTemplateContext(),\n            searchtext\n        };\n\n        this.modal = await this.modalSrv.create('picker', data);\n\n        // Add select mode identifier to the header\n        const blinkElem = document.createElement(\"SPAN\");\n        blinkElem.classList.add(\"tiny_widgethub-blink\", \"d-none\");\n        const selectModeStr = await get_string('selectmode', 'tiny_widgethub');\n        blinkElem.innerHTML = `<span class=\"twh-icon\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M48 115.8C38.2 107 32 94.2 32 80c0-26.5 21.5-48 48-48c14.2 0 27 6.2 35.8 16l344.4 0c8.8-9.8 21.6-16 35.8-16c26.5 0 48 21.5 48 48c0 14.2-6.2 27-16 35.8l0 280.4c9.8 8.8 16 21.6 16 35.8c0 26.5-21.5 48-48 48c-14.2 0-27-6.2-35.8-16l-344.4 0c-8.8 9.8-21.6 16-35.8 16c-26.5 0-48-21.5-48-48c0-14.2 6.2-27 16-35.8l0-280.4zM125.3 96c-4.8 13.6-15.6 24.4-29.3 29.3l0 261.5c13.6 4.8 24.4 15.6 29.3 29.3l325.5 0c4.8-13.6 15.6-24.4 29.3-29.3l0-261.5c-13.6-4.8-24.4-15.6-29.3-29.3L125.3 96zm2.7 64c0-17.7 14.3-32 32-32l128 0c17.7 0 32 14.3 32 32l0 96c0 17.7-14.3 32-32 32l-128 0c-17.7 0-32-14.3-32-32l0-96zM256 320l32 0c35.3 0 64-28.7 64-64l0-32 64 0c17.7 0 32 14.3 32 32l0 96c0 17.7-14.3 32-32 32l-128 0c-17.7 0-32-14.3-32-32l0-32z\"/></svg>\n        </span> ${selectModeStr}`;\n        this.modal.header[0]?.append(blinkElem);\n\n        try {\n            this.modal.body.find(\".tiny_widgethub-categorycontainer\")\n                // @ts-ignore\n                .scrollspy('refresh');\n        } catch (ex) {\n            console.error(\"Problem setting scrollspy\", ex);\n        }\n\n        // Confiure preview panel events\n        /**\n         * @type {any}\n         */\n        let timerEnter = null;\n        /**\n         * @type {any}\n         */\n        let timerOut = null;\n\n        // Event listeners.\n        // Click on clear text\n        const widgetSearchElem = this.modal.body.find(\"input\");\n        widgetSearchElem.val(searchtext);\n        const debouncedKeyup = debounce(this.onSearchKeyup.bind(this), 800);\n        widgetSearchElem.on('keyup', debouncedKeyup);\n\n        this.modal.body.find(`#widget-clearfilter-btn${data.rid}`).on('click', () => {\n            debouncedKeyup.clear();\n            widgetSearchElem.val(\"\");\n            widgetSearchElem.trigger(\"focus\");\n            this.onSearchKeyup();\n        });\n        // Click on any widget button (bubbles)\n        this.modal.body.find('div.tiny_widgethub-categorycontainer, div.tiny_widgethub-recent').on('click',\n            /** @param {JQuery.ClickEvent} event */\n            (event) => {\n                if (timerEnter) {\n                    clearTimeout(timerEnter);\n                    timerEnter = null;\n                }\n                this.modal.body.find(\"div.tiny_widgethub-preview\")\n                    .css(\"display\", \"none\");\n                this.handlePickModalClick(event);\n            });\n\n\n        const funEnter = (/** @type {any} */ evt) => {\n            clearTimeout(timerOut);\n            timerOut = null;\n            timerEnter = setTimeout(() => {\n                this.onMouseEnterButton(evt);\n            }, 500);\n        };\n\n        const funOut = (/** @type {any} */ evt) => {\n            const movedFrom = evt.target;\n            const movedTo = evt.relatedTarget;\n            if (movedFrom.classList.contains(\"tiny_widgethub-btn\") && movedTo.classList.contains(\"tiny_widgethub-btn\")) {\n                const key1 = movedFrom?.parentElement?.dataset?.key;\n                const key2 = movedTo?.parentElement?.dataset?.key;\n                if (key1 != null && key1 == key2) {\n                    // Still on the same row\n                    return;\n                }\n            }\n            clearTimeout(timerEnter);\n            timerEnter = null;\n            timerOut = setTimeout(() => {\n                this.modal.body.find(\"div.tiny_widgethub-preview\")\n                .html('')\n                .css(\"display\", \"none\");\n            }, 500);\n        };\n\n        // Preview panel\n        this.modal.body.find(\".tiny_widgethub-btn-group > button\")\n            .on(\"mouseenter\", funEnter)\n            .on(\"mouseout\", funOut);\n\n        // Store current scroll\n        const scrollPane = this.modal.body.find('.tiny_widgethub-categorycontainer');\n        scrollPane.on('scroll', debounce(() => {\n            this.scrollPos = Math.round(scrollPane.scrollTop() ?? 0);\n        }, 100));\n    }\n\n\n    async handleAction() {\n        this.storage.loadStore();\n\n        if (!this.modal) {\n            // Create the modal if not exists.\n            await this.createModal();\n        } else {\n            // Update list of recent\n            const widgetDict = this.editorOptions.widgetDict;\n            const html = this.storage.getRecentUsed()\n                .filter(r => widgetDict[r.key] !== undefined)\n                .map(r =>\n                    `<a href=\"javascript:void(0)\" data-key=\"${r.key}\" data-insert=\"recent\"><span class=\"badge badge-secondary\">${widgetDict[r.key].name}</span></a>`)\n                .join('\\n');\n            this.modal.body.find('.tiny_widgethub-recent').html(html);\n        }\n        // Call filter function to make sure the list is updated.\n        this.onSearchKeyup();\n\n        const selectmode = this.isSelectMode();\n        if (selectmode) {\n            this.modal.header.find(\"span.tiny_widgethub-blink\").removeClass(\"d-none\");\n        } else {\n            this.modal.header.find(\"span.tiny_widgethub-blink\").addClass(\"d-none\");\n        }\n\n        this.modal.show();\n\n        setTimeout(() => {\n            if (!this.modal?.body) {\n                return;\n            }\n            if (this.scrollPos > 0) {\n                this.modal.body.find('.tiny_widgethub-categorycontainer').scrollTop(this.scrollPos);\n            }\n            this.modal.body.find(\"input\").trigger('focus');\n        }, 200);\n    }\n\n\n    show() {\n        this.modal?.show();\n    }\n\n    /**\n     * @param {import('../options').Widget} widget\n     * @returns {Promise<string>}\n     */\n    generatePreview(widget) {\n        const toInterpolate = {...widget.defaults};\n        // Decide which template engine to use\n        const engine = widget.prop('engine');\n        return this.templateSrv.render(widget.template ?? \"\", toInterpolate, widget.I18n, engine);\n    }\n\n    /**\n     * @typedef {Object} Button\n     * @property {boolean} hidden\n     * @property {string} category\n     * @property {number} widgetindex\n     * @property {string} widgetkey\n     * @property {string} widgetname\n     * @property {string} widgetorder\n     * @property {string} widgettitle\n     * @property {string} iconname\n     * @property {boolean} disabled\n     * @property {boolean} selectable\n     * @property {boolean} isfilter\n     * @property {boolean} filterset\n     */\n    /**\n     * @typedef {Object} Category\n     * @property {string} name\n     * @property {string} order\n     * @property {boolean} hidden\n     * @property {string} color\n     * @property {Button[]} buttons\n     */\n    /**\n     *  @typedef {{rid: string, selectmode: boolean, elementid: string, categories: Category[], recent: *[]}} TemplateContext\n     */\n    /**\n     * Get the template context for the dialogue.\n     *\n     * @returns {TemplateContext} data\n     */\n    getPickTemplateContext() {\n        /** @type {Record<string, string>} */\n        const categoryOrderMap = {};\n        getGlobalConfig(this.editor, 'category.order', '')\n            .split(',')\n            .forEach(item => {\n                const itemOrder = item.split(':');\n                if (itemOrder.length === 2) {\n                    categoryOrderMap[itemOrder[0].trim().toLocaleUpperCase()] = itemOrder[1].trim();\n                }\n            });\n\n        const snptDict = this.editorOptions.widgetDict;\n        const allButtons = Object.values(snptDict);\n        // Parse filters that are autoset by the user.\n        const autoFilters = this.storage.getFromLocal(\"startup.filters\", \"\")\n            .split(\",\").map(f => f.trim());\n        /**\n         * @type {Object.<string, Category>}\n         **/\n        const categories = {};\n        allButtons.forEach(btn => {\n            const isFilter = btn.isFilter();\n            const catName = (btn.category ?? 'MISC').toUpperCase();\n            let found = categories[catName];\n            if (!found) {\n                const color = hashCode(catName) % 360;\n                let sat = '30%';\n                if (catName.toLowerCase().startsWith('obsolet')) {\n                    sat = '0%'; // Gray\n                }\n                found = {\n                    name: catName,\n                    order: categoryOrderMap[catName] ?? catName,\n                    hidden: false,\n                    color: color + ', ' + sat,\n                    buttons: []\n                };\n                categories[catName] = found;\n            }\n            found.buttons.push({\n                hidden: false,\n                category: catName,\n                widgetindex: btn.id,\n                widgetkey: btn.key,\n                widgetname: btn.name,\n                widgetorder: btn.prop('order') ?? btn.name ?? btn.key ?? '',\n                widgettitle: btn.name + \" \" + catName,\n                iconname: \"fa fas fa-eye\",\n                disabled: !btn.isUsableInScope(),\n                selectable: btn.insertquery != null,\n                isfilter: isFilter,\n                filterset: isFilter && autoFilters.includes(btn.key)\n            });\n        });\n        const categoriesList = Object.values(categories);\n        categoriesList.sort((a, b) => (a.order + '').localeCompare((b.order + '')));\n        categoriesList.forEach(cat => {\n            // Sort buttons by the order, not by the name\n            cat.buttons.sort((a, b) => (a.widgetorder + '').localeCompare((b.widgetorder + '')));\n            cat.hidden = cat.buttons.filter(btn => !btn.hidden).length == 0;\n        });\n\n        // Update the list of recently used widgets\n        const recentList = this.storage.getRecentUsed().filter((/** @type {any} **/ recent) => {\n            const key = recent.key;\n            const widget = snptDict[key];\n            if (!widget?.isUsableInScope()) {\n                return false;\n            }\n            // In select mode must filter widgets that do support it\n            const selectable = widget.insertquery !== undefined;\n            const isSelection = this.isSelectMode();\n            return key.length > 0 && (!isSelection || (isSelection && selectable));\n        })\n            .map((/** @type {any} **/ recent) => {\n                const key = recent.key;\n                const snpt = snptDict[key];\n                if (snpt) {\n                    return {\n                        key: key,\n                        name: snpt.name\n                    };\n                } else {\n                    return {\n                        key: key,\n                        name: \"\"\n                    };\n                }\n            });\n\n        return {\n            rid: genID(),\n            selectmode: this.isSelectMode(),\n            elementid: this.editor.id,\n            categories: categoriesList,\n            recent: recentList\n        };\n    }\n\n    /**\n     * Handle a click within the Modal.\n     *\n     * @param {JQuery.ClickEvent} event The click event\n     */\n    async handlePickModalClick(event) {\n        /** @type {any} */\n        const target = event.target;\n        if (!target) {\n            return;\n        }\n        /** @type {HTMLElement | undefined} */\n        const buttonWrapper = target.closest('[data-key]');\n        /** @type {import('../options').Widget | null} */\n        let widget = null;\n        if (buttonWrapper) {\n            const selectedButton = buttonWrapper?.dataset?.key;\n            if (selectedButton) {\n                widget = this.editorOptions.widgetDict[selectedButton];\n            }\n        }\n        if (!widget) {\n            return;\n        }\n        /** @type {HTMLElement | undefined} */\n        const button = target.closest('button.tiny_widgethub-btn');\n        // Check if it is a toggle button to autoset a filter\n        if (button?.dataset?.auto) {\n            const isSet = button.dataset.auto !== \"true\";\n            button.dataset.auto = isSet + '';\n            toggleClass(button, 'tiny_widgethub-btn-primary', 'tiny_widgethub-btn-outline-primary');\n            const key = widget.key;\n            // Persist option\n            const autoFilters = new Set(this.storage.getFromLocal('startup.filters', '').split(''));\n            if (isSet) {\n                autoFilters.add(key);\n            } else {\n                autoFilters.delete(key);\n            }\n            this.storage.setToLocal('startup.filters', [...autoFilters].join(\",\"), true);\n            return;\n        }\n        /** @type {HTMLElement | undefined} */\n        const aRecent = target.closest('a[data-key]');\n        // If it is a recently used widget, recover the used parameters\n        /** @type {Record<string, any> | undefined} */\n        let ctx;\n        if (aRecent) {\n            ctx = this.storage.getRecentUsed().filter(e => e.key === widget.key)[0]?.p;\n        }\n        // Must open a configuration dialogue for the current widget\n        let confirmMsg = null;\n\n        if (!widget.isUsableInScope()) {\n            confirmMsg = await get_string('confirmusage', 'tiny_widgethub');\n        }\n        const forceInsert = aRecent !== null || button?.dataset?.insert === 'true';\n        if (confirmMsg) {\n            this.editor.windowManager.confirm(confirmMsg,\n                /** @param {*} state */\n                (state) => {\n                    if (state) {\n                        this.handlePickModalAction(widget, forceInsert, ctx);\n                    }\n                });\n        } else {\n            this.handlePickModalAction(widget, forceInsert, ctx);\n        }\n    }\n\n    /**\n     * @param {import('../options').Widget} widget\n     * @param {boolean} [forceInsert]\n     * @param {Record<string, *>} [ctx]\n     */\n    handlePickModalAction(widget, forceInsert, ctx) {\n        this.modal?.hide();\n        const paramsController = this.widgetParamsFactory(widget);\n        // Keep reference to the calling parentCtrl\n        paramsController.parentCtrl = this;\n        // Decide whether to show the form or directly doInsert\n        if (forceInsert || ((widget.parameters ?? []).length === 0 && !widget.instructions)) {\n            // Do insert directly\n            paramsController.insertWidget(ctx ?? {});\n        } else {\n            paramsController.handleAction();\n        }\n    }\n}\n\nconst widgetPickerCtrlInstances = new Map();\n/**\n * @param {import('../plugin').TinyMCE} editor\n * @returns {WidgetPickerCtrl}\n */\nexport function getWidgetPickCtrl(editor) {\n    let instance = widgetPickerCtrlInstances.get(editor);\n    if (!instance) {\n        instance = new WidgetPickerCtrl(editor,\n            getEditorOptions(editor), getWidgetParamsFactory(editor),\n            getModalSrv(), getTemplateSrv(), getUserStorage(editor));\n        widgetPickerCtrlInstances.set(editor, instance);\n    }\n    return instance;\n}\n"],"names":["editor","instance","widgetPickerCtrlInstances","get","WidgetPickerCtrl","set","setVisibility","el","visible","classList","remove","add","modal","constructor","editorOptions","widgetParamsFactory","modalSrv","templateSrv","userStorage","storage","scrollPos","isSelectMode","this","selection","getContent","trim","length","setWidgetButtonsVisibility","bodyForm","searchtext","numshown","selectmode","find","each","i","dataset","selectable","el2","querySelector","textContent","title","onSearchKeyup","body","val","setToSession","_","count","querySelectorAll","evt","widget","widgetDict","target","closest","key","isFilter","html","_preview","generatePreview","css","getFromSession","data","getPickTemplateContext","create","blinkElem","document","createElement","selectModeStr","innerHTML","header","append","scrollspy","ex","console","error","timerEnter","timerOut","widgetSearchElem","debouncedKeyup","bind","on","rid","clear","trigger","event","clearTimeout","handlePickModalClick","setTimeout","onMouseEnterButton","movedFrom","movedTo","relatedTarget","contains","key1","parentElement","_movedFrom$parentElem","_movedFrom$parentElem2","key2","_movedTo$parentElemen","_movedTo$parentElemen2","scrollPane","Math","round","scrollTop","loadStore","getRecentUsed","filter","r","undefined","map","name","join","createModal","removeClass","addClass","show","_this$modal","toInterpolate","defaults","engine","prop","render","template","I18n","categoryOrderMap","split","forEach","item","itemOrder","toLocaleUpperCase","snptDict","allButtons","Object","values","autoFilters","getFromLocal","f","categories","btn","catName","category","toUpperCase","found","color","sat","toLowerCase","startsWith","order","hidden","buttons","push","widgetindex","id","widgetkey","widgetname","widgetorder","widgettitle","iconname","disabled","isUsableInScope","insertquery","isfilter","filterset","includes","categoriesList","sort","a","b","localeCompare","cat","recentList","recent","isSelection","snpt","elementid","buttonWrapper","selectedButton","_buttonWrapper$datase","button","_button$dataset","auto","isSet","Set","delete","setToLocal","aRecent","ctx","e","_this$storage$getRece","p","confirmMsg","forceInsert","insert","windowManager","confirm","state","handlePickModalAction","hide","paramsController","parentCtrl","parameters","instructions","insertWidget","handleAction","Map"],"mappings":"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"}