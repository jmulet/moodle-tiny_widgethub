{"version":3,"file":"widgetPickerCtrl.min.js","sources":["../../src/controller/widgetPickerCtrl.js"],"sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable no-eq-null */\n/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {get_string} from 'core/str';\nimport {getWidgetParamsFactory} from '../controller/widgetParamsCtrl';\nimport {getEditorOptions} from '../options';\nimport {getModalSrv} from '../service/modalSrv';\nimport {getTemplateSrv} from '../service/templateSrv';\nimport {getUserStorage} from '../service/userStorageSrv';\nimport {debounce, genID, hashCode, searchComp, toggleClass} from '../util';\n\n/**\n * @param {HTMLElement} el\n * @param {boolean} visible\n */\nexport const setVisibility = function(el, visible) {\n    if(!el) {\n        return;\n    }\n    if (visible) {\n        el.classList.remove(\"d-none\");\n    } else {\n        el.classList.add(\"d-none\");\n    }\n};\n\nexport class WidgetPickerCtrl {\n    /** @type {import('../service/modalSrv').ModalDialogue} */\n    // @ts-ignore\n    modal;\n\n    /**\n     * @param {import('../plugin').TinyMCE} editor\n     * @param {import('../options').EditorOptions} editorOptions\n     * @param {(widget: import('../options').Widget) => import('../controller/widgetParamsCtrl').WidgetParamsCtrl} widgetParamsFactory\n     * @param {import('../service/modalSrv').ModalSrv} modalSrv\n     * @param {import('../service/templateSrv').TemplateSrv} templateSrv\n     * @param {import('../service/userStorageSrv').UserStorageSrv} userStorage\n     */\n    constructor(editor, editorOptions, widgetParamsFactory, modalSrv, templateSrv, userStorage) {\n        /** @type {import('../plugin').TinyMCE} */\n        this.editor = editor;\n        /** @type {import('../options').EditorOptions} */\n        this.editorOptions = editorOptions;\n        /** @type {(widget: import('../options').Widget) => import('../controller/widgetParamsCtrl').WidgetParamsCtrl} */\n        this.widgetParamsFactory = widgetParamsFactory;\n        /** @type {import('../service/modalSrv').ModalSrv} */\n        this.modalSrv = modalSrv;\n        /** @type {import('../service/templateSrv').TemplateSrv} */\n        this.templateSrv = templateSrv;\n        /** @type {import('../service/userStorageSrv').UserStorageSrv} */\n        this.storage = userStorage;\n        /** @type {number} */\n        this.scrollPos = 0;\n    }\n\n    isSelectMode() {\n        return this.editor.selection.getContent().trim().length > 0;\n    }\n\n    /**\n     * Shows or hides buttons according to the search text condition\n     * When text == '', all non-hidden buttons should be displayed\n     * @param {JQuery<HTMLElement>} bodyForm\n     * @param {string} searchText\n     * @returns {number}\n     */\n    setWidgetButtonsVisibility(bodyForm, searchText) {\n        let numshown = 0;\n        const selectMode = this.isSelectMode();\n        /** @type {JQuery<HTMLDivElement>} */\n        const allbtns = bodyForm.find(\".btn-group\");\n        allbtns.each((i, el) => {\n            // Is supported in select mode?\n            let visible = !selectMode || (selectMode && el.dataset.selectable === \"true\");\n            const el2 = el.querySelector('button');\n            // Does fullfill the search criteria?\n            visible &&= el2 !== null && (searchText.trim() === '' || searchComp(el2.textContent ?? '', searchText) ||\n                searchComp(el2.title ?? '', searchText));\n            setVisibility(el, visible);\n            if (visible) {\n                numshown++;\n            }\n        });\n        return numshown;\n    }\n\n    /**\n     * Callback on keyup event\n     */\n    onSearchKeyup() {\n        const searchText = this.modal.body.find(\"input\").val() ?? '';\n        this.storage.setToSession('searchtext', searchText, true);\n\n        // Are we in selectMode, does the widget support it? insertquery\n        const numshown = this.setWidgetButtonsVisibility(this.modal.body, searchText);\n        // If no button visible, show emptyList message\n        setVisibility(this.modal.body.find(\".tiny_widgethub-emptylist\")[0], numshown == 0);\n\n        // Hide categories without any button visible\n        /** @type {JQuery<HTMLElement>} */\n        const allcatgs = this.modal.body.find(\".tiny_widgethub-category\");\n        allcatgs.each((_, el) => {\n            const count = el.querySelectorAll(\".btn-group:not(.d-none)\").length;\n            setVisibility(el, count > 0);\n        });\n    }\n\n    /**\n     * @param {*} evt\n     */\n    async onMouseEnterButton(evt) {\n        const widgetTable = this.editorOptions.widgetDict;\n        const key = evt.target?.closest('.btn-group')?.dataset?.key ?? '';\n        const widget = widgetTable[key];\n        if (!widget || widget.isFilter()) {\n            // Filters do not offer preview\n            return;\n        }\n        /** @type {string | undefined} */\n        let html = widget._preview;\n        if (!html) {\n            // Generate preview with default parameters\n            html = await this.generatePreview(widget);\n            widget._preview = html;\n        }\n        this.modal.body.find(\"div.tiny_widgethub-preview\")\n            .html(html)\n            .css(\"display\", \"block\");\n    }\n\n    async createModal() {\n        /** @type {string} */\n        const searchText = this.storage.getFromSession(\"searchtext\", \"\");\n        const data = {\n            ...this.getPickTemplateContext(),\n            searchText\n        };\n\n        this.modal = await this.modalSrv.create('picker', data);\n\n        // Add select mode identifier to the header\n        const blinkElem = document.createElement(\"SPAN\");\n        blinkElem.classList.add(\"tiny_widgethub-blink\", \"d-none\");\n        const selectModeStr = await get_string('selectmode', 'tiny_widgethub');\n        blinkElem.innerHTML = `<i class=\"twh-icon twh-object-group\"></i> ${selectModeStr}</span>`;\n        this.modal.header[0]?.append(blinkElem);\n\n        try {\n            this.modal.body.find(\".tiny_widgethub-categorycontainer\")\n                // @ts-ignore\n                .scrollspy('refresh');\n        } catch (ex) {\n            console.error(\"Problem setting scrollspy\", ex);\n        }\n\n        // Confiure preview panel events\n        const mouseEnterDebounced = debounce(this.onMouseEnterButton.bind(this), 1000);\n\n        const onMouseOut = () => {\n            mouseEnterDebounced.clear();\n            this.modal.body.find(\"div.tiny_widgethub-preview\")\n                .html('')\n                .css(\"display\", \"none\");\n        };\n\n        // Event listeners.\n        // Click on clear text\n        const widgetSearchElem = this.modal.body.find(\"input\");\n        widgetSearchElem.val(searchText);\n        const debouncedKeyup = debounce(this.onSearchKeyup.bind(this), 800);\n        widgetSearchElem.on('keyup', debouncedKeyup);\n\n        this.modal.body.find(`#widget-clearfilter-btn${data.rid}`).on('click', () => {\n            debouncedKeyup.clear();\n            widgetSearchElem.val(\"\");\n            widgetSearchElem.trigger(\"focus\");\n            this.onSearchKeyup();\n        });\n        // Click on any widget button (bubbles)\n        this.modal.body.find('div.tiny_widgethub-categorycontainer, div.tiny_widgethub-recent').on('click',\n            /** @param {Event} event */\n            (event) => {\n                mouseEnterDebounced.clear();\n                this.modal.body.find(\"div.tiny_widgethub-preview\")\n                    .css(\"display\", \"none\");\n                this.handlePickModalClick(event);\n            });\n\n        // Preview panel\n        this.modal.body.find(\".btn-group\")\n            .on(\"mouseenter\", mouseEnterDebounced)\n            .on(\"mouseout\", onMouseOut.bind(this));\n\n        // Store current scroll\n        const scrollPane = this.modal.body.find('.tiny_widgethub-categorycontainer');\n        scrollPane.on('scroll', debounce(() => {\n            this.scrollPos = Math.round(scrollPane.scrollTop() ?? 0);\n        }, 100));\n    }\n\n\n    async handleAction() {\n        this.storage.loadStore();\n\n        if (!this.modal) {\n            // Create the modal if not exists.\n            await this.createModal();\n        } else {\n            // Update list of recent\n            const widgetDict = this.editorOptions.widgetDict;\n            const html = this.storage.getRecentUsed()\n                .filter(r => widgetDict[r.key] !== undefined)\n                .map(r =>\n                    `<a href=\"javascript:void(0)\" data-key=\"${r.key}\" data-insert=\"recent\"><span class=\"badge badge-secondary\">${widgetDict[r.key].name}</span></a>`)\n                .join('\\n');\n            this.modal.body.find('.tiny_widgethub-recent').html(html);\n        }\n        // Call filter function to make sure the list is updated.\n        this.onSearchKeyup();\n\n        const selectMode = this.isSelectMode();\n        if (selectMode) {\n            this.modal.header.find(\"span.tiny_widgethub-blink\").removeClass(\"d-none\");\n        } else {\n            this.modal.header.find(\"span.tiny_widgethub-blink\").addClass(\"d-none\");\n        }\n\n        this.modal.show();\n\n        setTimeout(() => {\n            if (!this.modal?.body) {\n                return;\n            }\n            if (this.scrollPos > 0) {\n                this.modal.body.find('.tiny_widgethub-categorycontainer').scrollTop(this.scrollPos);\n            }\n            this.modal.body.find(\"input\").trigger('focus');\n        }, 200);\n    }\n\n\n    show() {\n        this.modal?.show();\n    }\n\n    /**\n     * @param {import('../options').Widget} widget\n     * @returns {Promise<string>}\n     */\n    generatePreview(widget) {\n        const toInterpolate = {...widget.defaults};\n        // Decide which template engine to use\n        const engine = widget.prop('engine');\n        return this.templateSrv.render(widget.template ?? \"\", toInterpolate, widget.I18n, engine);\n    }\n\n    /**\n     * @typedef {Object} Button\n     * @property {boolean} hidden\n     * @property {string} category\n     * @property {number} widgetindex\n     * @property {string} widgetkey\n     * @property {string} widgetname\n     * @property {string} widgettitle\n     * @property {string} iconname\n     * @property {boolean} disabled\n     * @property {boolean} selectable\n     * @property {boolean} isfilter\n     * @property {boolean} filterset\n     */\n    /**\n     * @typedef {Object} Category\n     * @property {string} name\n     * @property {boolean} hidden\n     * @property {string} color\n     * @property {Button[]} buttons\n     */\n    /**\n     *  @typedef {{rid: string, selectMode: boolean, elementid: string, categories: Category[], recent: *[]}} TemplateContext\n     */\n    /**\n     * Get the template context for the dialogue.\n     *\n     * @returns {TemplateContext} data\n     */\n    getPickTemplateContext() {\n        const snptDict = this.editorOptions.widgetDict;\n        const allButtons = Object.values(snptDict);\n        // Parse filters that are autoset by the user.\n        const autoFilters = this.storage.getFromLocal(\"startup.filters\", \"\")\n            .split(\",\").map(f => f.trim());\n        /**\n         * @type {Object.<string, Category>}\n         **/\n        const categories = {};\n        allButtons.forEach(btn => {\n            const isFilter = btn.isFilter();\n            const catName = (btn.category ?? 'MISC').toUpperCase();\n            let found = categories[catName];\n            if (!found) {\n                const color = hashCode(catName) % 360;\n                let sat = '30%';\n                if (catName.toLowerCase().startsWith('obsolet')) {\n                    sat = '0%'; // Gray\n                }\n                found = {\n                    name: catName,\n                    hidden: false,\n                    color: color + ', ' + sat,\n                    buttons: []\n                };\n                categories[catName] = found;\n            }\n            found.buttons.push({\n                hidden: false,\n                category: catName,\n                widgetindex: btn.id,\n                widgetkey: btn.key,\n                widgetname: btn.name,\n                widgettitle: btn.name + \" \" + catName,\n                iconname: \"fa fas fa-eye\",\n                disabled: !btn.isUsableInScope(),\n                selectable: btn.insertquery != null,\n                isfilter: isFilter,\n                filterset: isFilter && autoFilters.includes(btn.key)\n            });\n        });\n        const categoriesList = Object.values(categories);\n        categoriesList.sort((a, b) => {\n            if (a.name < b.name) {\n                return -1;\n            }\n            if (a.name > b.name) {\n                return 1;\n            }\n            return 0;\n        });\n        categoriesList.forEach(cat => {\n            cat.buttons.sort();\n            cat.hidden = cat.buttons.filter(btn => !btn.hidden).length == 0;\n        });\n\n        // Update the list of recently used widgets\n        const recentList = this.storage.getRecentUsed().filter((/** @type {any} **/ recent) => {\n            const key = recent.key;\n            const widget = snptDict[key];\n            if (!widget?.isUsableInScope()) {\n                return false;\n            }\n            // In select mode must filter widgets that do support it\n            const selectable = widget.insertquery !== undefined;\n            const isSelection = this.isSelectMode();\n            return key.length > 0 && (!isSelection || (isSelection && selectable));\n        })\n            .map((/** @type {any} **/ recent) => {\n                const key = recent.key;\n                const snpt = snptDict[key];\n                if (snpt) {\n                    return {\n                        key: key,\n                        name: snpt.name\n                    };\n                } else {\n                    return {\n                        key: key,\n                        name: \"\"\n                    };\n                }\n            });\n\n        return {\n            rid: genID(),\n            selectMode: this.isSelectMode(),\n            elementid: this.editor.id,\n            categories: categoriesList,\n            recent: recentList\n        };\n    }\n\n    /**\n     * Handle a click within the Modal.\n     *\n     * @param {Event} event The click event\n     */\n    async handlePickModalClick(event) {\n        /** @type {any} */\n        const target = event.target;\n        if (!target) {\n            return;\n        }\n        /** @type {HTMLElement | undefined} */\n        const buttonWrapper = target.closest('[data-key]');\n        /** @type {import('../options').Widget | null} */\n        let widget = null;\n        if (buttonWrapper) {\n            const selectedButton = buttonWrapper?.dataset?.key;\n            if (selectedButton) {\n                widget = this.editorOptions.widgetDict[selectedButton];\n            }\n        }\n        if (!widget) {\n            return;\n        }\n        /** @type {HTMLElement | undefined} */\n        const button = target.closest('button.btn');\n        // Check if it is a toggle button to autoset a filter\n        if (button?.dataset?.auto) {\n            const isSet = button.dataset.auto !== \"true\";\n            button.dataset.auto = isSet + '';\n            toggleClass(button, 'btn-primary', 'btn-outline-primary');\n            const key = widget.key;\n            // Persist option\n            const autoFilters = new Set(this.storage.getFromLocal('startup.filters', '').split(''));\n            if (isSet) {\n                autoFilters.add(key);\n            } else {\n                autoFilters.delete(key);\n            }\n            this.storage.setToLocal('startup.filters', [...autoFilters].join(\",\"), true);\n            return;\n        }\n        /** @type {HTMLElement | undefined} */\n        const aRecent = target.closest('a[data-key]');\n        // If it is a recently used widget, recover the used parameters\n        /** @type {Record<string, any> | undefined} */\n        let ctx;\n        if (aRecent) {\n            ctx = this.storage.getRecentUsed().filter(e => e.key === widget.key)[0]?.p;\n        }\n        // Must open a configuration dialogue for the current widget\n        let confirmMsg = null;\n\n        if (!widget.isUsableInScope()) {\n            confirmMsg = await get_string('confirmusage', 'tiny_widgethub');\n        }\n        const forceInsert = aRecent !== null || button?.dataset?.insert === 'true';\n        if (confirmMsg) {\n            this.editor.windowManager.confirm(confirmMsg,\n                /** @param {*} state */\n                (state) => {\n                    if (state) {\n                        this.handlePickModalAction(widget, forceInsert, ctx);\n                    }\n                });\n        } else {\n            this.handlePickModalAction(widget, forceInsert, ctx);\n        }\n    }\n\n    /**\n     * @param {import('../options').Widget} widget\n     * @param {boolean} [forceInsert]\n     * @param {Record<string, *>} [ctx]\n     */\n    handlePickModalAction(widget, forceInsert, ctx) {\n        this.modal?.hide();\n        const paramsController = this.widgetParamsFactory(widget);\n        // Keep reference to the calling parentCtrl\n        paramsController.parentCtrl = this;\n        // Decide whether to show the form or directly doInsert\n        if (forceInsert || ((widget.parameters ?? []).length === 0 && !widget.instructions)) {\n            // Do insert directly\n            paramsController.insertWidget(ctx ?? {});\n        } else {\n            paramsController.handleAction();\n        }\n    }\n}\n\nconst widgetPickerCtrlInstances = new Map();\n/**\n * @param {import('../plugin').TinyMCE} editor\n * @returns {WidgetPickerCtrl}\n */\nexport function getWidgetPickCtrl(editor) {\n    let instance = widgetPickerCtrlInstances.get(editor);\n    if (!instance) {\n        instance = new WidgetPickerCtrl(editor,\n            getEditorOptions(editor), getWidgetParamsFactory(editor),\n            getModalSrv(), getTemplateSrv(), getUserStorage(editor));\n        widgetPickerCtrlInstances.set(editor, instance);\n    }\n    return instance;\n}\n"],"names":["editor","instance","widgetPickerCtrlInstances","get","WidgetPickerCtrl","set","setVisibility","el","visible","classList","remove","add","modal","constructor","editorOptions","widgetParamsFactory","modalSrv","templateSrv","userStorage","storage","scrollPos","isSelectMode","this","selection","getContent","trim","length","setWidgetButtonsVisibility","bodyForm","searchText","numshown","selectMode","find","each","i","dataset","selectable","el2","querySelector","textContent","title","onSearchKeyup","body","val","setToSession","_","count","querySelectorAll","evt","widget","widgetDict","target","closest","key","isFilter","html","_preview","generatePreview","css","getFromSession","data","getPickTemplateContext","create","blinkElem","document","createElement","selectModeStr","innerHTML","header","append","scrollspy","ex","console","error","mouseEnterDebounced","onMouseEnterButton","bind","widgetSearchElem","debouncedKeyup","on","rid","clear","trigger","event","handlePickModalClick","scrollPane","Math","round","scrollTop","loadStore","getRecentUsed","filter","r","undefined","map","name","join","createModal","removeClass","addClass","show","setTimeout","_this$modal","toInterpolate","defaults","engine","prop","render","template","I18n","snptDict","allButtons","Object","values","autoFilters","getFromLocal","split","f","categories","forEach","btn","catName","category","toUpperCase","found","color","sat","toLowerCase","startsWith","hidden","buttons","push","widgetindex","id","widgetkey","widgetname","widgettitle","iconname","disabled","isUsableInScope","insertquery","isfilter","filterset","includes","categoriesList","sort","a","b","cat","recentList","recent","isSelection","snpt","elementid","buttonWrapper","selectedButton","_buttonWrapper$datase","button","_button$dataset","auto","isSet","Set","delete","setToLocal","aRecent","ctx","e","_this$storage$getRece","p","confirmMsg","forceInsert","insert","windowManager","confirm","state","handlePickModalAction","hide","paramsController","parentCtrl","parameters","instructions","insertWidget","handleAction","Map"],"mappings":"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"}