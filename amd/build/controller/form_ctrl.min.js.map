{"version":3,"file":"form_ctrl.min.js","sources":["../../src/controller/form_ctrl.js"],"sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {getFileSrv} from '../service/file_service';\nimport {getTemplateSrv} from '../service/template_service';\nimport {getUserStorage} from '../service/userstorage_service';\nimport {capitalize, cleanParameterName, evalInContext, genID, stream, toHexAlphaColor, toRgba} from '../util';\nimport jquery from \"jquery\";\n\nconst questionPopover = '{{#tooltip}}<a href=\"javascript:void(0)\" data-toggle=\"popover\" data-trigger=\"hover\" data-content=\"{{tooltip}}\" data-bs-toggle=\"popover\" data-bs-trigger=\"hover\" data-bs-content=\"{{tooltip}}\"><i class=\"fa fas fa-question-circle text-info\"></i></a>{{/tooltip}}';\n\nexport const Templates = {\n   TEXTFIELDTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row mx-1{{#hidden}} d-none{{/hidden}}\"><label class=\"col-sm-5 col-form-label\" for=\"{{elementid}}_ftmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <div class=\"col-sm-7\"><input type=\"text\" id=\"{{elementid}}_ftmpl\" class=\"form-control\" name=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalue}}\"/></div>\n   </div>`,\n\n   IMAGETEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row mx-1{{#hidden}} d-none{{/hidden}}\"><label class=\"col-sm-5 col-form-label\" for=\"{{elementid}}_ftmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <div class=\"col-sm-7\">\n   <input type=\"text\" id=\"{{elementid}}_ftmpl\" class=\"form-control d-inline-block w-75\" name=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalue}}\"/>\n   <button class=\"whb-image-picker btn btn-sm btn-secondary d-inline-block\" title=\"Search\"><i class=\"fas fa fa-search\"></i></button>\n   </div>\n   </div>`,\n\n   NUMERICTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row mx-1{{#hidden}} d-none{{/hidden}}\"><label class=\"col-sm-5 col-form-label\"  for=\"{{elementid}}_fntmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <div class=\"col-sm-7\"><input type=\"number\" id=\"{{elementid}}_fntmpl\" class=\"form-control\" name=\"{{varname}}\" {{{minMax}}} {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalue}}\"/></div>\n   </div>`,\n\n   COLORTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row mx-1{{#hidden}} d-none{{/hidden}}\"><label class=\"col-sm-5 col-form-label\"  for=\"{{elementid}}_fntmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <div class=\"col-sm-7\">\n   <span class=\"w-50 tiny_widgethub-pattern\">\n      <input type=\"color\" id=\"{{elementid}}_fctmpl\" name=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalue}}\"/>\n   </span>\n   <input type=\"range\" id=\"{{elementid}}_fcatmpl\" title=\"Opacity\" name=\"{{varname}}_alpha\" {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalueAlpha}}\" min=\"0\" max=\"1\" step=\"0.01\"/>\n   </div></div>`,\n\n   TEXTAREATEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group{{#hidden}} d-none{{/hidden}}\"><label for=\"{{elementid}}_tatmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <textarea id=\"{{elementid}}_tatmpl\" rows=\"3\" class=\"form-control\" name=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} {{#tooltip}}title=\"{{tooltip}}\"{{/tooltip}}>{{defaultvalue}}</textarea>\n   </div>`,\n\n   CHECKBOXTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group w-75 m-2{{#hidden}} d-none{{/hidden}}\">\n   <label>\n   <input title=\"{{varname}}\" id=\"{{elementid}}_cbtmpl\" {{#disabled}}disabled{{/disabled}} type=\"checkbox\" name=\"{{varname}}\" value=\"{{defaultvalue}}\" {{#defaultvalue}}checked{{/defaultvalue}}/></span>\n   {{vartitle}}</label> <span>&nbsp;&nbsp;  ${questionPopover}</span>\n   </div>`,\n\n   SELECTTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row mx-1{{#hidden}} d-none{{/hidden}}\">\n   <label class=\"col-sm-5 col-form-label\" for=\"{{elementid}}_stmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <div class=\"col-sm-7\">\n   <select id=\"{{elementid}}_stmpl\" class=\"form-control\" name=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} {{#tooltip}}title=\"{{tooltip}}\"{{/tooltip}}>\n   {{#options}}\n   <option value=\"{{optionValue}}\"{{#selected}} selected{{/selected}}>{{optionLabel}}</option>\n   {{/options}}\n   </select>\n   </div>\n   </div>`,\n\n   AUTOCOMPLETETEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row mx-1{{#hidden}} d-none{{/hidden}}\"><label class=\"col-sm-5 col-form-label\" for=\"{{elementid}}_ftmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <div class=\"col-sm-7\"><input type=\"text\" list=\"{{elementid}}_aclist\" id=\"{{elementid}}_actmpl\" class=\"form-control\" name=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalue}}\" autocomplete=\"off\"/>\n   <datalist id=\"{{elementid}}_aclist\">\n   {{#options}}\n   <option value=\"{{optionValue}}\"/>\n   {{/options}}\n   </datalist>\n   </div>\n   </div>`,\n\n   REPEATABLE: `<div id=\"{{elementid}}\" name=\"{{varname}}\" type=\"repeatable\" class=\"form-group row mx-1{{#hidden}} d-none{{/hidden}}\">\n      <label class=\"col-sm-5 col-form-label\" for=\"{{elementid}}_fntmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n      {{{#itemControls}}}\n   </div>`,\n};\n\n\nexport class FormCtrl {\n   /**\n    * @param {import('../plugin').TinyMCE} editor\n    * @param {import('../service/userstorage_service').UserStorageSrv} userStorage\n    * @param {import('../service/template_service').TemplateSrv} templateSrv\n    * @param {import('../service/file_service').FileSrv} fileSrv\n    * @param {JQueryStatic} jQuery\n    */\n   constructor(editor, userStorage, templateSrv, fileSrv, jQuery) {\n      /** @type {import('../plugin').TinyMCE} */\n      this.editor = editor;\n      /** @type {import('../service/userstorage_service').UserStorageSrv} */\n      this.storage = userStorage;\n      /** @type {import('../service/template_service').TemplateSrv} */\n      this.templateSrv = templateSrv;\n      /** @type {import('../service/file_service').FileSrv} */\n      this.fileSrv = fileSrv;\n      /** @type {JQueryStatic} */\n      this.jQuery = jQuery;\n   }\n\n   /**\n    * @param {import('../options').Widget} widget\n    * @returns {*} - The generated context\n    */\n   createContext(widget) {\n      /** @type {boolean} */\n      const mustSaveAll = this.storage.getFromLocal('saveall', false);\n      /** @type {Object.<string, any>} */\n      const saveAllData = this.storage.getFromLocal('saveall_data', {});\n      /** @type {Object.<string, any>} */\n      const values = this.storage.getFromLocal(\"values\", {});\n      const defaults = widget.defaults;\n\n      /**\n       * @param {import('../options').Param} param\n       * @returns {any}\n       */\n      const obtainCurrentValue = (param) => {\n         const sname = widget.key;\n         const pname = param.name;\n         let currentval = defaults[pname];\n         if (pname.startsWith(\"_\") && values[pname]) {\n            currentval = values[pname];\n         }\n         if (mustSaveAll) {\n            // Search the last used value of this parameter\n            if ((saveAllData[sname]?.[pname] ?? null) !== null) {\n               currentval = saveAllData[sname][pname];\n            }\n         }\n         return currentval;\n      };\n\n      const controls = widget.parameters.map(param => this.createControlHTML(this.editor.id, param, obtainCurrentValue(param)));\n\n      const ctx = {\n         idtabpane: genID(),\n         selectmode: this.editor.selection.getContent().trim().length > 0,\n         name: widget.name,\n         instructions: widget.instructions,\n         filter: widget.isFilter(),\n         controls: controls\n      };\n      return ctx;\n   }\n\n   /**\n    * @param {string} hostId - The id of the editor\n    * @param {import('../options').Param} param - The parameter object defining the control\n    * @param {any} defaultValue - Default values for the parameter\n    * @param {string} [prefixName] - Add a suffix to the control name\n    * @returns {string} - The generated HTML for this control\n    */\n   createControlHTML(hostId, param, defaultValue, prefixName) {\n      let markup = '';\n      let pname = cleanParameterName(param.name);\n      if (prefixName) {\n         pname = prefixName + \".\" + pname;\n      }\n      const generalCtx = {\n         elementid: hostId + \"_\" + pname,\n         varname: pname,\n         vartitle: param.title,\n         defaultvalue: defaultValue,\n         tooltip: param.tip || param.tooltip,\n         disabled: param.editable === false,\n         hidden: param.hidden === true\n      };\n      if (param.type === 'textarea') {\n         markup = this.templateSrv.renderMustache(Templates.TEXTAREATEMPLATE, generalCtx);\n      } else if (param.type === 'numeric') {\n         let minMax = \"\";\n         if (param.min) {\n            minMax += `min=\"${param.min}\"`;\n         }\n         if (param.max) {\n            minMax += ` max=\"${param.max}\"`;\n         }\n         markup = this.templateSrv.renderMustache(Templates.NUMERICTEMPLATE, {minMax: minMax, ...generalCtx});\n      } else if (param.type === 'checkbox') {\n         markup = this.templateSrv.renderMustache(Templates.CHECKBOXTEMPLATE, generalCtx);\n      } else if (param.type === 'select' || param.type === 'autocomplete') {\n         const options = (param.options ?? []).map(opt => {\n            let label;\n            let value;\n            if (typeof opt === 'string') {\n               label = capitalize(opt);\n               value = opt;\n            } else {\n               label = opt.l;\n               value = opt.v;\n            }\n            return {optionLabel: label, optionValue: value, selected: value === defaultValue};\n         });\n         const tmpl = param.type === 'select' ? Templates.SELECTTEMPLATE : Templates.AUTOCOMPLETETEMPLATE;\n         markup = this.templateSrv.renderMustache(tmpl, {options, ...generalCtx});\n      } else if (param.type === 'color') {\n         // Value must be in hex form and must find alpha (0-1)\n         const [hex, alpha] = toHexAlphaColor(generalCtx.defaultvalue);\n         generalCtx.defaultvalue = hex;\n         /** @ts-ignore */\n         generalCtx.defaultvalueAlpha = alpha;\n         markup = this.templateSrv.renderMustache(Templates.COLORTEMPLATE, generalCtx);\n      } else if (param.type === 'image') {\n         markup = this.templateSrv.renderMustache(Templates.IMAGETEMPLATE, generalCtx);\n      } else if (param.type === 'repeatable') {\n         let itemControls = '';\n         if (Array.isArray(defaultValue) && defaultValue.length) {\n            // Generate the controls statically (used in context menus)\n            const ul = RepeatableCtrl.createListGroup();\n            defaultValue.forEach(obj => {\n               if (typeof obj !== 'object') {\n                  return;\n               }\n               const tmpDiv = document.createElement(\"DIV\");\n               Object.keys(obj).forEach(key => {\n                  const field = param.fields?.filter(f => f.name === key)[0];\n                  if (field) {\n                     tmpDiv.append(this.createControlHTML(hostId, field, obj[key], pname));\n                  }\n               });\n               ul.append(RepeatableCtrl.createRegularItem(tmpDiv, false));\n            });\n            itemControls = ul.innerHTML;\n         }\n         markup = this.templateSrv.renderMustache(Templates.REPEATABLE, {...generalCtx, itemControls});\n      } else {\n         // Assume textfield\n         markup = this.templateSrv.renderMustache(Templates.TEXTFIELDTEMPLATE, generalCtx);\n      }\n      return markup;\n   }\n\n   /**\n    * It extracts the value of a single HTML control\n    * @param {JQuery<HTMLElement>} $elem\n    * @param {import('../options').Param} param\n    */\n   extractControlValue($elem, param) {\n      const type = $elem.attr(\"type\");\n      /** @type {*} */\n      let value = $elem.val() ?? \"\";\n      if ($elem.prop(\"tagName\") === \"INPUT\" && type === \"checkbox\") {\n         value = $elem.is(':checked');\n      } else if ($elem.prop(\"tagName\") === \"INPUT\" && type === \"number\") {\n         if (value.indexOf(\".\") >= 0) {\n            value = parseFloat(value);\n         } else {\n            value = parseInt(value);\n         }\n      } else if ($elem.prop(\"tagName\") === \"INPUT\" && type === \"color\") {\n         // Must also find the corresponding alpha channel value\n         const pname = param.name;\n         const cleanPname = cleanParameterName(pname);\n         const $slider = $elem.closest(\".form-group\").find(`[name=\"${cleanPname}_alpha\"]`);\n         const alpha = $slider.val() ?? 1;\n         value = toRgba(value, +alpha);\n      }\n\n      if (param.transform) {\n         value = stream(param.transform).reduce(value);\n      }\n      return value;\n   }\n\n   /**\n    * Obtains the updated parameter values from the modal\n    * This is used in insertWidget\n    * @param {import('../options').Widget} widget\n    * @param {JQuery<HTMLElement>} form\n    * @param {boolean} doStore\n    * @returns {Record<string, any>} - The updated parameters dict\n    */\n   extractFormParameters(widget, form, doStore) {\n      /** @type {Object.<string, any>}  */\n      const ctx = {};\n      /** @type {Object.<string, any>}  */\n      const toPersist = {};\n      const defaults = widget.defaults;\n      widget.parameters.forEach(param => {\n         const pname = param.name;\n         const cleanParamname = cleanParameterName(pname);\n         const $elem = form.find(`[name=\"${cleanParamname}\"]`);\n         if (!$elem.length) {\n            ctx[pname] = defaults[pname];\n            return;\n         }\n         // $elem might be a div for repeatable inputs\n         const type = $elem.attr(\"type\");\n         if (type === 'repeatable') {\n            /** @type {any[]}  */\n            const listValue = [];\n            $elem.find(\".list-group-item.repeatable-regular-item\").each((i, subform) => {\n               /** @type {Record<string, any>} */\n               const itemObj = {};\n               param.fields?.forEach(field => {\n                  const $subform = this.jQuery(subform);\n                  const cleanFieldname = cleanParameterName(field.name);\n                  const $subelem = $subform.find(`[name=\"${cleanParamname}.${cleanFieldname}\"]`);\n                  itemObj[field.name] = this.extractControlValue($subelem, field);\n               });\n               listValue.push(itemObj);\n            });\n            ctx[pname] = listValue;\n         } else {\n            ctx[pname] = this.extractControlValue($elem, param);\n         }\n\n         if (pname.trim().startsWith(\"_\")) {\n            toPersist[pname] = ctx[pname];\n         }\n      });\n\n      if (doStore && this.storage) {\n         if (Object.keys(toPersist).length) {\n            // Only those starting with $\n            this.storage.setToLocal('values', toPersist, true);\n         }\n         // Should all values be persisted?\n         const mustSaveAll = this.storage.getFromLocal('saveall', false);\n         if (mustSaveAll) {\n            /** @type {Object.<string, any>}  */\n            const previousAllData = this.storage.getFromLocal('saveall_data', {});\n            previousAllData[widget.name] = {...ctx};\n            this.storage.setToLocal('saveall_data', previousAllData, true);\n         }\n      }\n      return ctx;\n   }\n\n   /**\n    * @param {JQuery<HTMLElement>} body - The modal body\n    */\n   attachPickers(body) {\n      // Find all file pickers\n      const canShowFilePicker = typeof this.fileSrv.getImagePicker() !== 'undefined';\n      const picker = body.find('button.whb-image-picker').prop('disabled', !canShowFilePicker);\n      if (canShowFilePicker) {\n         // Attach a click handler to any image-picker buttons\n         picker.on(\"click\", /** @param {any} evt */ async(evt) => {\n            evt.preventDefault();\n            try {\n               /** @type {any} */\n               const params = await this.fileSrv.displayImagePicker();\n               if (params?.url) {\n                  this.jQuery(evt.currentTarget).parent().find('input').val(params.url);\n               }\n            } catch (ex) {\n               console.error(ex);\n            }\n         });\n      }\n\n      // Find all color pickers\n      body.find('input[type=\"color\"]').each((_, e) => {\n         const $inputColor = this.jQuery(e);\n         const name = ($inputColor.attr('name') ?? '');\n         // Find corresponding range slider\n         const $inputRange = body.find(`input[name=\"${name}_alpha\"]`);\n         const opacity = $inputRange.val() ?? 1;\n         $inputColor.css('opacity', '' + opacity);\n         // Bind envent change\n         $inputRange.on('change', () => {\n            const opacity = $inputRange.val() ?? 1;\n            $inputColor.css('opacity', '' + opacity);\n         });\n      });\n   }\n\n   /**\n    * @param {JQuery<HTMLElement>} $formElem\n    * @param {Object.<string, any>} defaultsData\n    * @param {import('../options').Widget} widget\n    * @param {boolean} selectmode\n    */\n   applyFieldWatchers($formElem, defaultsData, widget, selectmode) {\n      /** @type {string[]} */\n      const watchedvars = []; // All these variable names must be watched\n      /**\n       * all these components must be updated when one watcher changes\n       *  @type {{\n       *    condition: string,\n       *    component: JQuery<HTMLElement>,\n       *    type: string,\n       *    indx: number\n       *  }[]}\n       */\n      const updatableComponents = [];\n\n      const regex = /\\{{2}([^}]*)\\}{2}/gm;\n      for (let indx = 0, len = widget.parameters.length; indx < len; indx++) {\n\n         const varobj = widget.parameters[indx];\n\n         if (varobj.when) {\n            const condition = varobj.when;\n            const t = varobj.type;\n            const control = $formElem.find(`[name=\"${cleanParameterName(varobj.name)}\"]`);\n            if (!control.length || !t) {\n               continue;\n            }\n            updatableComponents.push({\n               condition: condition.replace(/[{}]{2}/g, ''),\n               component: control,\n               indx: indx,\n               type: t\n            });\n            const varsInvolved = condition.match(regex);\n            varsInvolved?.forEach(evar => {\n               evar = evar.replace(/[{}]*/g, '').trim();\n               // Can only watch real variables SELECT_MODE is not a variable\n               if (watchedvars.indexOf(evar) < 0 && (defaultsData[evar] ?? null) !== null) {\n                  watchedvars.push(evar);\n               }\n            });\n         }\n         watchedvars.push(varobj.name);\n      }\n\n      const doUpdateVisibilities = () => {\n         updatableComponents.forEach(cc => {\n            // Evaluate condition\n            const newVariables = this.extractFormParameters(widget, $formElem, false);\n            // Add to the new variables the internal variables\n            newVariables.SELECT_MODE = selectmode;\n            // Eval JS condition for new variables\n            const showme = evalInContext(newVariables, cc.condition);\n            let theComponent = cc.component;\n            if (theComponent) {\n               theComponent = theComponent.closest('.form-group');\n               // Only change visibilities of nodes not hidden from user\n               if (!theComponent.attr('data-amagat')) {\n                  if (showme) {\n                     theComponent.show();\n                  } else {\n                     theComponent.hide();\n                  }\n               }\n            }\n         });\n      };\n\n      // Apply the watchers\n      widget.parameters.forEach((varobj) => {\n         const control = $formElem.find(`[name=\"${cleanParameterName(varobj.name)}\"]`);\n         if (watchedvars.indexOf(varobj.name) < 0 || !control[0]) {\n            return;\n         }\n         let evtName = \"change\";\n         if (varobj.type === 'textfield' || varobj.type === 'textarea') {\n            evtName = \"keyup\";\n         }\n         control.on(evtName, () => {\n            doUpdateVisibilities();\n         });\n      });\n\n      // Decide which form elements are visible accoding to the current values of the parameters.\n      doUpdateVisibilities();\n   }\n   /**\n    * Create controllers for every repeatable element in form.\n    * @param {JQuery<HTMLElement>} $form\n    * @param {import(\"../options\").Widget} widget\n    */\n   attachRepeatable($form, widget) {\n      widget.parameters.filter(p => p.type === 'repeatable').forEach((param) => {\n         const cleanParamname = cleanParameterName(param.name);\n         const $subform = $form.find(`div[type=\"repeatable\"][name=\"${cleanParamname}\"]`);\n         if (!param.fields?.length) {\n            $subform.hide();\n            return;\n         }\n         /**\n          * Inform the controller how to create a new item\n          * @param {number} i\n          * @returns {HTMLElement}\n          */\n         const itemBuilder = (i) => {\n            const controls = (param.fields ?? []).map(field => {\n               // Field value must be interpolated with the {{i}} placeholder\n               let value = field.value;\n               if (typeof (value) === 'string' && value.indexOf(\"{{i}}\") >= 0) {\n                  value = this.templateSrv.mustache(value, {i});\n               }\n               return this.createControlHTML(this.editor.id, field, field.value, cleanParamname);\n            });\n            const div = document.createElement(\"div\");\n            div.innerHTML = controls.join(\" \");\n            return div;\n         };\n         new RepeatableCtrl($subform[0], itemBuilder, param);\n      });\n   }\n}\n\n/**\n * @typedef {Object} RepeatableOptions\n * @property {number} [min=1] - The minimum number of items allowed in the list.\n * @property {number} [max] - The maximum number of items allowed in the list.\n */\n\n/**\n * @callback ItemBuilder\n * @param {number} index - The index of the item being created.\n * @returns {HTMLElement} - The DOM Node to be inserted into the item.\n */\n\n/**\n * Controls a UI component that allows users to add and remove items from a list.\n * This class uses the underscore convention (_) to indicate private properties and methods.\n */\nclass RepeatableCtrl {\n   // Properties are defined in the constructor for broader compatibility.\n\n   /**\n    * @param {HTMLElement} form - The container element to append the list to.\n    * @param {ItemBuilder} itemBuilder - A function that returns the content for a new item.\n    * @param {RepeatableOptions} [opts={}] - Configuration options for the controller.\n    */\n   constructor(form, itemBuilder, opts = {}) {\n      /** @private */\n      this._form = form;\n      /** @private */\n      this._itemBuilder = itemBuilder;\n      /** @private */\n      this._opts = {min: 1, ...opts};\n      /** @private */\n      /** @type {HTMLUListElement} */\n      this._ul = document.createElement('ul');\n      /** @private */\n      this._itemCount = 0;\n      /** @private */\n      this._boundOnClick = this._onClick.bind(this);\n      this._init();\n   }\n\n   /**\n    * Initializes the list, creates the initial items, and attaches event listeners.\n    * @private\n    */\n   _init() {\n      this._ul.classList.add('list-group', 'list-group-flush');\n\n      this._ul.append(RepeatableCtrl.createAddItem());\n\n      const initialCount = this._opts.min;\n      for (let i = 0; i < initialCount; i++) {\n         // Generate the content\n         this._itemCount += 1;\n         const content = this._itemBuilder(this._itemCount);\n         this._ul.append(RepeatableCtrl.createRegularItem(content, true));\n         this._ul.append(RepeatableCtrl.createAddItem());\n      }\n\n      this._form.append(this._ul);\n      this._updateButtonStates();\n      this._ul.addEventListener('click', this._boundOnClick);\n   }\n   /**\n    * Creates a list group container for the list items\n    * @returns {HTMLUListElement}\n    */\n   static createListGroup() {\n      const ul = document.createElement('ul');\n      ul.classList.add('list-group', 'list-group-flush');\n      return ul;\n   }\n   /**\n    * Creates the \"add item\" separator row with a plus button.\n    * @private\n    * @returns {HTMLLIElement} The list item element representing the add button.\n    */\n   static createAddItem() {\n      const li = document.createElement('li');\n      li.classList.add('list-group-item', 'position-relative', 'text-center', 'repeatable-add-item');\n\n      const hr = document.createElement('hr');\n      hr.classList.add('position-absolute', 'top-50', 'start-0', 'w-100', 'm-0');\n\n      const button = document.createElement('button');\n      button.type = 'button';\n\n      button.className = 'tiny_widgethub-add-item btn btn-sm btn-outline-secondary bg-white text-secondary rounded-circle position-relative';\n\n      const icon = document.createElement('i');\n      icon.className = 'fa fa-plus';\n\n      button.append(icon);\n      li.append(hr, button);\n      return li;\n   }\n\n   /**\n    * Creates a regular list item containing user-defined content and a remove button.\n    * @param {string | Node} content\n    * @param {boolean} showDelBtn\n    * @returns {HTMLLIElement} The list item element.\n    */\n   static createRegularItem(content, showDelBtn) {\n      const li = document.createElement('li');\n      li.classList.add('list-group-item', 'd-flex', 'justify-content-between', 'align-items-center', 'repeatable-regular-item');\n\n      li.append(content);\n      if (showDelBtn) {\n         const button = document.createElement('button');\n         button.type = 'button';\n         button.className = 'tiny_widgethub-remove-item btn btn-sm btn-outline-danger';\n\n         const icon = document.createElement('i');\n         icon.className = 'fa fa-trash';\n\n         button.append(icon);\n         li.append(button);\n      }\n      return li;\n   }\n\n   /**\n    * Updates the enabled/disabled state of all add and remove buttons.\n    * @private\n    */\n   _updateButtonStates() {\n      const count = this._ul.querySelectorAll('.list-group-item:not(.repeatable-add-item-row)').length;\n\n      const canDelete = count > (this._opts.min ?? 1);\n      /** @type {NodeListOf<HTMLButtonElement>} */\n      let buttons = this._ul.querySelectorAll('button.tiny_widgethub-remove-item');\n      buttons.forEach(btn => (btn.disabled = !canDelete));\n\n      const canAdd = this._opts.max === undefined || count < this._opts.max;\n      buttons = this._ul.querySelectorAll('button.tiny_widgethub-add-item');\n      buttons.forEach(btn => (btn.disabled = !canAdd));\n   }\n\n   /**\n    * Handles click events on the list, delegating to add or remove actions.\n    * @private\n    * @param {MouseEvent} evt - The click event.\n    */\n   _onClick(evt) {\n      if (!(evt.target instanceof Element)) {\n         return;\n      }\n      const btn = evt.target?.closest(\"button\");\n      if (!btn || btn.disabled) {\n         return;\n      }\n\n      const li = btn.closest('li');\n      if (!li) {\n         return;\n      }\n\n      if (btn.classList.contains('tiny_widgethub-add-item')) {\n         this._itemCount += 1;\n         const content = this._itemBuilder(this._itemCount);\n         li.after(RepeatableCtrl.createRegularItem(content, true), RepeatableCtrl.createAddItem());\n      } else if (btn.classList.contains('tiny_widgethub-remove-item')) {\n         const separator = li.previousElementSibling;\n         if (separator) {\n            separator.remove();\n         }\n         li.remove();\n      }\n\n      this._updateButtonStates();\n   }\n   /**\n    * Removes the event listener on the list\n    */\n   destroy() {\n      this._ul.removeEventListener('click', this._boundOnClick);\n   }\n}\n\n\nconst formCtrlInstances = new Map();\n/**\n * @param {import('../plugin').TinyMCE} editor\n * @returns {FormCtrl}\n */\nexport function getFormCtrl(editor) {\n   let instance = formCtrlInstances.get(editor);\n   if (!instance) {\n      // @ts-ignore\n      instance = new FormCtrl(editor, getUserStorage(editor), getTemplateSrv(), getFileSrv(editor), jquery);\n      formCtrlInstances.set(editor, instance);\n   }\n   return instance;\n}\n"],"names":["editor","instance","formCtrlInstances","get","FormCtrl","jquery","set","questionPopover","Templates","TEXTFIELDTEMPLATE","IMAGETEMPLATE","NUMERICTEMPLATE","COLORTEMPLATE","TEXTAREATEMPLATE","CHECKBOXTEMPLATE","SELECTTEMPLATE","AUTOCOMPLETETEMPLATE","REPEATABLE","constructor","userStorage","templateSrv","fileSrv","jQuery","storage","createContext","widget","mustSaveAll","this","getFromLocal","saveAllData","values","defaults","controls","parameters","map","param","createControlHTML","id","sname","key","pname","name","currentval","startsWith","obtainCurrentValue","idtabpane","selectmode","selection","getContent","trim","length","instructions","filter","isFilter","hostId","defaultValue","prefixName","markup","generalCtx","elementid","varname","vartitle","title","defaultvalue","tooltip","tip","disabled","editable","hidden","type","renderMustache","minMax","min","max","options","opt","label","value","l","v","optionLabel","optionValue","selected","tmpl","hex","alpha","defaultvalueAlpha","itemControls","Array","isArray","ul","RepeatableCtrl","createListGroup","forEach","obj","tmpDiv","document","createElement","Object","keys","field","fields","_param$fields","f","append","createRegularItem","innerHTML","extractControlValue","$elem","attr","val","prop","is","indexOf","parseFloat","parseInt","cleanPname","closest","find","transform","reduce","extractFormParameters","form","doStore","ctx","toPersist","cleanParamname","listValue","each","i","subform","itemObj","$subform","cleanFieldname","$subelem","push","setToLocal","previousAllData","attachPickers","body","canShowFilePicker","getImagePicker","picker","on","async","evt","preventDefault","params","displayImagePicker","url","currentTarget","parent","ex","console","error","_","e","$inputColor","$inputRange","opacity","css","applyFieldWatchers","$formElem","defaultsData","watchedvars","updatableComponents","regex","indx","len","varobj","when","condition","t","control","replace","component","varsInvolved","match","evar","doUpdateVisibilities","cc","newVariables","SELECT_MODE","showme","theComponent","show","hide","evtName","attachRepeatable","$form","p","_param$fields3","mustache","div","join","itemBuilder","opts","_form","_itemBuilder","_opts","_ul","_itemCount","_boundOnClick","_onClick","bind","_init","classList","add","createAddItem","initialCount","content","_updateButtonStates","addEventListener","li","hr","button","className","icon","showDelBtn","count","querySelectorAll","canDelete","buttons","btn","canAdd","undefined","target","Element","_evt$target","contains","after","separator","previousElementSibling","remove","destroy","removeEventListener","Map"],"mappings":"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"}