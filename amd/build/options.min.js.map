{"version":3,"file":"options.min.js","sources":["../src/options.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getPluginOptionName} from 'editor_tiny/options';\nimport Common from './common';\nimport {WidgetWrapper} from './util';\nconst pluginName = Common.pluginName;\n\nconst showPlugin = getPluginOptionName(pluginName, 'showplugin');\nconst userId = getPluginOptionName(pluginName, 'userid');\nconst courseId = getPluginOptionName(pluginName, 'courseid');\nconst widgetList = getPluginOptionName(pluginName, 'widgetlist');\n\nconst shareStyles = getPluginOptionName(pluginName, 'sharestyles');\nconst additionalCss = getPluginOptionName(pluginName, 'additionalcss');\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n */\nexport const register = (editor) => {\n    const registerOption = editor.options.register;\n\n    registerOption(showPlugin, {\n        processor: 'boolean',\n        \"default\": true,\n    });\n\n    registerOption(userId, {\n        processor: 'string',\n        \"default\": \"-1\",\n    });\n\n    registerOption(courseId, {\n        processor: 'string',\n        \"default\": \"-1\",\n    });\n\n    registerOption(widgetList, {\n        processor: 'array',\n        \"default\": [],\n    });\n\n    registerOption(shareStyles, {\n        processor: 'boolean',\n        \"default\": true,\n    });\n\n    registerOption(additionalCss, {\n        processor: 'string',\n        \"default\": \"\",\n    });\n};\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @returns {boolean} - are the plugin buttons visible?\n */\nexport const isPluginVisible = (editor) => editor.options.get(showPlugin);\n\nexport class EditorOptions {\n    /** @type {Record<string, WidgetWrapper> | undefined} */\n    _widgetDict;\n\n    /**\n     * @param {import('./container').DIContainer} container\n     */\n    constructor({editor}) {\n        this.editor = editor;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    get pluginVisible() {\n        return this.editor.options.get(showPlugin);\n    }\n\n    /**\n     * @returns {number} - an integer with the id of the current user\n     */\n    get userId() {\n        return parseInt(this.editor.options.get(userId));\n    }\n\n    /**\n     * @returns {number} - an integer with the id of the current course\n     */\n    get courseId() {\n        return parseInt(this.editor.options.get(courseId));\n    }\n\n    /**\n     * @returns {string} - additional css that must be included in a <style> tag in editor's iframe\n     */\n    get additionalCss() {\n        return this.editor.options.get(additionalCss);\n    }\n\n    /**\n     * @returns {Object.<string,WidgetWrapper>} - a dictionary of \"usable\" widgets for the current userId\n     */\n    get widgetDict() {\n        if (!this._widgetDict) {\n            this._widgetDict = {};\n            // The widgetList is of type object[]\n            // partials is a special widget that is used to define common parameters shared by other widgets\n            /** @type {import('./util').Widget[]} */\n            let widgets = this.editor.options.get(widgetList);\n            let partials = widgets.filter(e => e.key === 'partials')[0];\n            if (partials) {\n                widgets = widgets.filter(e => e.key !== 'partials');\n            }\n            // Create a wrapper for the widget to handle operations\n            const wrappedWidgets = widgets\n                .map(w => new WidgetWrapper(w, partials || {}));\n            // Remove those buttons that aren't usable for the current user\n            wrappedWidgets.filter(w => w.isFor(this.userId)).forEach(w => {\n                if (this._widgetDict) {\n                    this._widgetDict[w.key] = w;\n                }\n            });\n        }\n        return this._widgetDict;\n    }\n}\n"],"names":["pluginName","showPlugin","userId","courseId","widgetList","shareStyles","additionalCss","editor","registerOption","options","register","processor","get","_widgetDict","constructor","pluginVisible","this","parseInt","widgetDict","widgets","partials","filter","e","key","map","w","WidgetWrapper","isFor","forEach"],"mappings":";;;;;;;4IA0BMA,6EAAoBA,WAEpBC,YAAa,gCAAoBD,WAAY,cAC7CE,QAAS,gCAAoBF,WAAY,UACzCG,UAAW,gCAAoBH,WAAY,YAC3CI,YAAa,gCAAoBJ,WAAY,cAE7CK,aAAc,gCAAoBL,WAAY,eAC9CM,eAAgB,gCAAoBN,WAAY,mCAK7BO,eACfC,eAAiBD,OAAOE,QAAQC,SAEtCF,eAAeP,WAAY,CACvBU,UAAW,mBACA,IAGfH,eAAeN,OAAQ,CACnBS,UAAW,iBACA,OAGfH,eAAeL,SAAU,CACrBQ,UAAW,iBACA,OAGfH,eAAeJ,WAAY,CACvBO,UAAW,gBACA,KAGfH,eAAeH,YAAa,CACxBM,UAAW,mBACA,IAGfH,eAAeF,cAAe,CAC1BK,UAAW,iBACA,+BAQaJ,QAAWA,OAAOE,QAAQG,IAAIX,yCAI1DY,YAKAC,sBAAYP,OAACA,kBACJA,OAASA,OAMdQ,2BACOC,KAAKT,OAAOE,QAAQG,IAAIX,YAM/BC,oBACOe,SAASD,KAAKT,OAAOE,QAAQG,IAAIV,SAMxCC,sBACOc,SAASD,KAAKT,OAAOE,QAAQG,IAAIT,WAMxCG,2BACOU,KAAKT,OAAOE,QAAQG,IAAIN,eAM/BY,qBACKF,KAAKH,YAAa,MACdA,YAAc,OAIfM,QAAUH,KAAKT,OAAOE,QAAQG,IAAIR,YAClCgB,SAAWD,QAAQE,QAAOC,GAAe,aAAVA,EAAEC,MAAoB,GACrDH,WACAD,QAAUA,QAAQE,QAAOC,GAAe,aAAVA,EAAEC,OAGbJ,QAClBK,KAAIC,GAAK,IAAIC,oBAAcD,EAAGL,UAAY,MAEhCC,QAAOI,GAAKA,EAAEE,MAAMX,KAAKd,UAAS0B,SAAQH,IACjDT,KAAKH,mBACAA,YAAYY,EAAEF,KAAOE,aAI/BT,KAAKH"}