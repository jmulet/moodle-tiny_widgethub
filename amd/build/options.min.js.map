{"version":3,"file":"options.min.js","sources":["../src/options.js"],"sourcesContent":["/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getPluginOptionName} from 'editor_tiny/options';\nimport Common from './common';\nconst pluginName = Common.pluginName;\n\nconst showPlugin = getPluginOptionName(pluginName, 'showplugin');\nconst userId = getPluginOptionName(pluginName, 'userid');\nconst courseId = getPluginOptionName(pluginName, 'courseid');\nconst widgetList = getPluginOptionName(pluginName, 'widgetlist');\n\nconst shareStyles = getPluginOptionName(pluginName, 'sharestyles');\nconst additionalCss = getPluginOptionName(pluginName, 'additionalcss');\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n */\nexport const register = (editor) => {\n    const registerOption = editor.options.register;\n\n    registerOption(showPlugin, {\n        processor: 'boolean',\n        \"default\": true,\n    });\n\n    registerOption(userId, {\n        processor: 'string',\n        \"default\": \"-1\",\n    });\n\n    registerOption(courseId, {\n        processor: 'string',\n        \"default\": \"-1\",\n    });\n\n    registerOption(widgetList, {\n        processor: 'array',\n        \"default\": [],\n    });\n\n    registerOption(shareStyles, {\n        processor: 'boolean',\n        \"default\": true,\n    });\n\n    registerOption(additionalCss, {\n        processor: 'string',\n        \"default\": \"\",\n    });\n};\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @returns {boolean} - are the plugin buttons visible?\n */\nexport const isPluginVisible = (editor) => editor.options.get(showPlugin);\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @returns {string} - additional css that must be included in a <style> tag in editor's iframe\n */\nexport const getAdditionalCss = (editor) => {\n    return editor.options.get(additionalCss);\n};\n\n/**\n * Wrapper version of the snippet definitions shared among all editors in page\n * @type {Record<string, Widget> | undefined}\n * */\nlet _widgetDict;\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @returns {Record<string, Widget>} - The available list of widgets\n */\nexport const getWidgetDict = (editor) => {\n    if (_widgetDict) {\n        return _widgetDict;\n    }\n    /** @type {RawWidget[]} */\n    let rawWidgets = editor.options.get(widgetList) ?? [];\n    _widgetDict = {};\n    // Partials is a special widget that is used to define common parameters shared by other widgets\n    /** @type {RawWidget | undefined} */\n    let partials = rawWidgets.filter(e => e.key === 'partials')[0];\n    if (partials) {\n        rawWidgets = rawWidgets.filter(e => e.key !== 'partials');\n    }\n    // Create a wrapper for the widget to handle operations\n    const wrappedWidgets = rawWidgets\n        .map(w => new Widget(w, partials || {}));\n\n    // Remove those buttons that aren't usable for the current user\n    const id = editor.options.get(userId);\n    wrappedWidgets.filter(w => w.isFor(id)).forEach(w => {\n        if (_widgetDict) {\n            _widgetDict[w.key] = w;\n        }\n    });\n    return _widgetDict;\n};\n\nexport class EditorOptions {\n    /**\n     * @param {import('./plugin').TinyMCE} editor\n     */\n    constructor(editor) {\n        this.editor = editor;\n    }\n\n    /**\n     * @returns {number} - an integer with the id of the current user\n     */\n    get userId() {\n        return parseInt(this.editor.options.get(userId));\n    }\n\n    /**\n     * @returns {number} - an integer with the id of the current course\n     */\n    get courseId() {\n        return parseInt(this.editor.options.get(courseId));\n    }\n\n    /**\n     * @returns {Object.<string, Widget>} - a dictionary of \"usable\" widgets for the current userId\n     */\n    get widgetDict() {\n       return getWidgetDict(this.editor);\n    }\n}\n\n/**\n * @typedef {object} Shared\n * @property {string} currentScope\n * @property {boolean} activatePopup\n * @property {object} globalConfig\n * @const\n */\nlet activatePopup = true;\nexport const Shared = {\n    // In which type of activity the editor is being used\n    currentScope: document.querySelector('body')?.id,\n    // Whether to activate the contextual popup or not\n    activatePopup: activatePopup,\n    // Hold other global configuration\n    globalConfig: {}\n};\n\n/**\n * @typedef {Object} ParamOption\n * @property {string} l\n * @property {string} v\n */\n/**\n * @typedef {Object} Param\n * @property {string=} partial\n * @property {string} name\n * @property {string} title\n * @property {'textfield' | 'numeric' | 'checkbox' | 'select' | 'textarea' | 'image' | 'color'} [type]\n * @property {(ParamOption | string)[]} [options]\n * @property {any} value\n * @property {string=} tip\n * @property {string=} tooltip\n * @property {number=} min\n * @property {number=} max\n * @property {string=} transform\n * @property {string | {get: string, set: string} } [bind]\n * @property {string=} when\n * @property {boolean} [hidden]\n * @property {boolean} [editable]\n */\n/**\n * @typedef {Object} Action\n * @property {string} predicate\n * @property {string} actions\n */\n/**\n * @typedef {Object} RawWidget\n * @property {number} id\n * @property {string} key\n * @property {string} category\n * @property {string=} scope - Regex for idenfying allowed body ids\n * @property {string} name\n * @property {string=} instructions\n * @property {'mustache' | 'ejs'} [engine]\n * @property {string} template\n * @property {Param[]=} parameters\n * @property {Object.<string, Object<string, string>>} [I18n]\n * @property {string | string[]} [selectors]\n * @property {string=} insertquery\n * @property {string=} unwrap\n * @property {string=} for\n * @property {string} version\n * @property {string} author\n * @property {boolean=} hidden\n * @property {Action[]} [contextmenu]\n * @property {Action[]} [contexttoolbar]\n */\n/**\n * @class\n * @classdesc Wrapper for Widget definition\n */\nexport class Widget {\n    #widget;\n    #instructionsParsed = false;\n\n    /**\n     * @param {RawWidget} widget\n     * @param {Object.<string, any>=} partials\n     */\n    constructor(widget, partials) {\n        partials = partials ?? {};\n        this.#widget = widget;\n        const parameters = widget.parameters;\n        if (!parameters) {\n            return;\n        }\n        // Do some fixes on parameters\n        parameters.forEach((param, i) => {\n            // Case of a partial\n            if (param.partial) {\n                if (!partials[param.partial]) {\n                    console.error(\"Cannot find partial for \", param.partial, partials);\n                    return;\n                }\n                parameters[i] = partials[param.partial];\n            }\n            if (!param.type) {\n                if (param.options) {\n                    param.type = 'select';\n                } else if (typeof param.value === \"boolean\") {\n                    // Infer type from value\n                    param.type = 'checkbox';\n                } else if (typeof param.value === \"number\") {\n                    param.type = 'numeric';\n                } else if (typeof param.value === \"string\") {\n                    param.type = param.options ? 'select' : 'textfield';\n                }\n            }\n            if (!param.value) {\n                switch (param.type) {\n                    case ('checkbox'):\n                        param.value = false; break;\n                    case ('numeric'):\n                        param.value = 0; break;\n                    case ('select'):\n                        param.value = param.options?.[0];\n                        if (typeof (param.value) === 'object') {\n                            param.value = param.value.v;\n                        }\n                        break;\n                    case ('color'):\n                        param.value = '#ffffff'; break;\n                    default:\n                        param.value = '';\n                }\n            }\n        });\n    }\n    /**\n     * @returns {string}\n     */\n    get name() {\n        return this.#widget.name;\n    }\n    /**\n     * @returns {string}\n     */\n    get key() {\n        return this.#widget.key;\n    }\n    /**\n     * @returns {Record<string, Record<string, string>>}\n     */\n    get I18n() {\n        return this.#widget.I18n || {};\n    }\n    /**\n     * @returns {string}\n     */\n    get template() {\n        return this.#widget.template;\n    }\n    /**\n     * @returns {string}\n     */\n    get category() {\n        return this.#widget.category ?? \"MISC\";\n    }\n    /**\n     * @returns {string=}\n     */\n    get insertquery() {\n        return this.#widget.insertquery;\n    }\n    /**\n     * @returns {string | string[] =}\n     */\n    get selectors() {\n        return this.#widget.selectors;\n    }\n    /**\n     * @returns {string=}\n     */\n    get unwrap() {\n        return this.#widget.unwrap;\n    }\n    /**\n     * @returns {string}\n     */\n    get version() {\n        return this.#widget.version || \"1.0.0\";\n    }\n    /**\n     * @returns {string}\n     */\n    get instructions() {\n        if (this.#widget.instructions && !this.#instructionsParsed) {\n            this.#widget.instructions = decodeURIComponent(this.#widget.instructions);\n            this.#instructionsParsed = true;\n        }\n        return this.#widget.instructions ?? '';\n    }\n    /**\n     * @returns {Param[]}\n     */\n    get parameters() {\n        return this.#widget.parameters ?? [];\n    }\n    /**\n     * @returns {Object.<string, any>}\n     */\n    get defaults() {\n        /** @type {Object.<string, any> } */\n        const obj = {};\n        this.parameters.forEach((param) => {\n            obj[param.name] = param.value;\n        });\n        return obj;\n    }\n    /**\n     * @param {number} userId\n     * @returns {boolean}\n     */\n    isFor(userId) {\n        // These are administrators\n        if (this.#widget.hidden === true) {\n            return false;\n        }\n        let grantStr = (this.#widget.for || '').trim();\n        if (grantStr === '' || grantStr === '*' || userId <= 2) {\n            return true;\n        }\n        let allowMode = true;\n        if (grantStr.startsWith('-')) {\n            allowMode = false;\n        }\n        grantStr = grantStr.replace(/[+\\- ]/g, '');\n        const grantList = grantStr.split(\",\");\n        const isAllowed = (allowMode && grantList.indexOf(userId + \"\") >= 0) || (!allowMode && grantList.indexOf(userId + \"\") < 0);\n        return isAllowed;\n    }\n    /**\n     * @param {string=} scope\n     * @returns {boolean}\n     */\n    isUsableInScope(scope) {\n        scope = scope ?? Shared.currentScope ?? '';\n        const widgetScopes = this.#widget.scope;\n        if (!scope || !widgetScopes || widgetScopes === \"*\") {\n            return true;\n        }\n        const regex = new RegExp(widgetScopes);\n        return (regex.exec(scope) ?? null) !== null;\n    }\n    /**\n     * @returns {boolean}\n     */\n    isFilter() {\n        return this.category?.toLowerCase() === \"filtres\";\n    }\n    /**\n     * @returns {boolean}\n     */\n    hasBindings() {\n        return this.parameters.filter(param => param.bind !== undefined).length > 0;\n    }\n    /**\n     * Recovers the property value named name of the original definition\n     * @param {string} name\n     * @returns {*}\n     */\n    prop(name) {\n        // @ts-ignore\n        return this.#widget[name];\n    }\n}\n\n\nconst editorOptionsInstances = new Map();\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @returns {EditorOptions}\n */\nexport function getEditorOptions(editor) {\n    let instance = editorOptionsInstances.get(editor);\n    if (!instance) {\n        instance = new EditorOptions(editor);\n        editorOptionsInstances.set(editor, instance);\n    }\n    return instance;\n}"],"names":["editor","instance","editorOptionsInstances","get","EditorOptions","set","pluginName","showPlugin","userId","courseId","widgetList","shareStyles","additionalCss","registerOption","options","register","processor","_widgetDict","getWidgetDict","rawWidgets","partials","filter","e","key","wrappedWidgets","map","w","Widget","id","isFor","forEach","constructor","parseInt","this","widgetDict","Shared","currentScope","document","querySelector","_document$querySelect","activatePopup","globalConfig","widget","parameters","param","i","partial","console","error","type","value","_param$options","v","name","I18n","template","category","insertquery","selectors","unwrap","version","instructions","instructionsParsed","decodeURIComponent","defaults","obj","hidden","grantStr","for","trim","allowMode","startsWith","replace","grantList","split","indexOf","isUsableInScope","scope","widgetScopes","RegExp","exec","isFilter","toLowerCase","hasBindings","undefined","bind","length","prop","Map"],"mappings":"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"}