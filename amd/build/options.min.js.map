{"version":3,"file":"options.min.js","sources":["../src/options.js"],"sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getPluginOptionName} from 'editor_tiny/options';\nimport Common from './common';\nimport {compareVersion, genID} from './util';\nimport {createDefaultsForParam} from './service/template_service';\nconst pluginName = Common.pluginName;\n\nconst showPlugin = getPluginOptionName(pluginName, 'showplugin');\nconst userInfoOpt = getPluginOptionName(pluginName, 'user');\nconst courseId = getPluginOptionName(pluginName, 'courseid');\nconst widgetList = getPluginOptionName(pluginName, 'widgetlist');\n\nconst shareCss = getPluginOptionName(pluginName, 'sharecss');\nconst additionalCss = getPluginOptionName(pluginName, 'additionalcss');\nconst globalConfig = getPluginOptionName(pluginName, 'cfg');\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n */\nexport const register = (editor) => {\n    const registerOption = editor.options.register;\n\n    registerOption(showPlugin, {\n        processor: 'boolean',\n        \"default\": true,\n    });\n\n    registerOption(userInfoOpt, {\n        processor: 'object',\n        \"default\": {\n            id: 0,\n            username: '',\n            roles: []\n        },\n    });\n\n    registerOption(courseId, {\n        processor: 'string',\n        \"default\": \"-1\",\n    });\n\n    registerOption(widgetList, {\n        processor: 'array',\n        \"default\": [],\n    });\n\n    registerOption(shareCss, {\n        processor: 'boolean',\n        \"default\": true,\n    });\n\n    registerOption(additionalCss, {\n        processor: 'string',\n        \"default\": \"\",\n    });\n\n    registerOption(globalConfig, {\n        processor: 'object',\n        \"default\": {},\n    });\n};\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @returns {boolean} - are the plugin buttons visible?\n */\nexport const isPluginVisible = (editor) => editor.options.get(showPlugin);\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @returns {string} - additional css that must be included in a <style> tag in editor's iframe\n */\nexport const getAdditionalCss = (editor) => {\n    return editor.options.get(additionalCss);\n};\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @returns {boolean} - whether site styles should be inserted into iframe\n */\nexport const isShareCss = (editor) => {\n    return editor.options.get(shareCss);\n};\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @param {string} key\n * @param {string} defaultValue\n * @returns {string} - An object with the key/value properties\n */\nexport const getGlobalConfig = (editor, key, defaultValue) => {\n    const dict = editor.options.get(globalConfig) ?? {};\n    return dict[key]?.trim() ?? defaultValue;\n};\n\n/**\n * Wrapper version of the snippet definitions shared among all editors in page\n * @type {Record<string, Widget> | undefined}\n * */\nlet _widgetDict;\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @returns {Record<string, Widget>} - The available list of widgets\n */\nexport const getWidgetDict = (editor) => {\n    if (_widgetDict) {\n        return _widgetDict;\n    }\n    /** @type {RawWidget[]} */\n    let rawWidgets = editor.options.get(widgetList) ?? [];\n    _widgetDict = {};\n    // Partials is a special widget that is used to define common parameters shared by other widgets\n    /** @type {RawWidget | undefined} */\n    let partials = rawWidgets.filter(e => e.key === 'partials')[0];\n    if (partials) {\n        rawWidgets = rawWidgets.filter(e => e.key !== 'partials');\n    }\n    // Create a wrapper for the widget to handle operations\n    const wrappedWidgets = rawWidgets\n        .map(w => new Widget(w, partials || {}));\n\n    // Remove those widgets that aren't usable for the current user\n    // and not supported by the currentVersion of the plugin.\n    const userInfo = editor.options.get(userInfoOpt);\n    wrappedWidgets.filter(w => w.isFor(userInfo) && compareVersion(Common.currentRelease, w.prop('plugin_release')))\n        .forEach(w => {\n            if (_widgetDict) {\n                _widgetDict[w.key] = w;\n            }\n        });\n    return _widgetDict;\n};\n\nexport class EditorOptions {\n    /**\n     * @param {import('./plugin').TinyMCE} editor\n     */\n    constructor(editor) {\n        this.editor = editor;\n    }\n\n    /**\n     * @returns {{id: number, username: string, roles: string[]}} - an integer with the id of the current user\n     */\n    get userInfo() {\n        return this.editor.options.get(userInfoOpt);\n    }\n\n    /**\n     * @returns {number} - an integer with the id of the current course\n     */\n    get courseId() {\n        return parseInt(this.editor.options.get(courseId));\n    }\n\n    /**\n     * @returns {Object.<string, Widget>} - a dictionary of \"usable\" widgets for the current userId\n     */\n    get widgetDict() {\n       return getWidgetDict(this.editor);\n    }\n}\n\n/**\n * @typedef {object} Shared\n * @property {string} currentScope\n */\nexport const Shared = {\n    // In which type of activity the editor is being used\n    currentScope: document.querySelector('body')?.id ?? '',\n};\n\n/**\n * Add missing properties in the param definition\n * that can be derived from existing data.\n * @param {Param} param\n */\nexport function fixMissingParamProperties(param) {\n    if (!param.type) {\n        if (param.options) {\n            param.type = 'select';\n        } else if (typeof param.value === \"boolean\") {\n            // Infer type from value\n            param.type = 'checkbox';\n        } else if (typeof param.value === \"number\") {\n            param.type = 'numeric';\n        } else if (typeof param.value === \"string\") {\n            param.type = param.options ? 'select' : 'textfield';\n        }\n    }\n    if (!param.value) {\n        switch (param.type) {\n            case ('checkbox'):\n                param.value = false; break;\n            case ('numeric'):\n                param.value = 0; break;\n            case ('select'):\n            case ('autocomplete'):\n                param.value = param.options?.[0];\n                if (typeof (param.value) === 'object') {\n                    param.value = param.value.v;\n                }\n                break;\n            case ('color'):\n                param.value = '#ffffff'; break;\n            default:\n                param.value = '';\n        }\n    }\n}\n\n/**\n * @param {*} obj - The object to expand\n * @param {Record<string, *>} partials - The dictionary with partials\n * @returns {*} The modified object\n */\nexport function expandPartial(obj, partials) {\n    if ((obj ?? null) === null) {\n        return obj;\n    }\n    let partialKey;\n    if (typeof obj === 'string' && obj.startsWith('__') && obj.endsWith('__')) {\n        partialKey = obj;\n        obj = {};\n    } else if (typeof obj === 'object' && obj.partial) {\n        partialKey = obj.partial;\n        delete obj.partial;\n    }\n    if (partialKey) {\n        partialKey = partialKey.replace(/__/g, '');\n        if (!partials[partialKey]) {\n            console.error(`Cannot find partial for ${partialKey}`);\n        } else {\n            // Override with passed properties.\n            obj = {...partials[partialKey], ...obj};\n        }\n    }\n    return obj;\n}\n\n/**\n * Partials are variables that start with @ which\n * can be expanded in different parts of the widget\n * definition.\n * @param {RawWidget} widget\n * @param {Record<string, *>} partials\n * @returns {void} The same widget with partials expanded\n */\nexport function applyPartials(widget, partials) {\n    // Expand partials in template.\n    const regex = /__([\\w\\d]+)__/g;\n    if (widget.template) {\n        widget.template = widget.template.replace(regex, (s0, s1) => {\n            return partials[s1] ?? s0;\n        });\n    }\n\n    // Expand partials in parameters.\n    const parameters = widget.parameters;\n    if (parameters) {\n        parameters.forEach((/** @type {*} */ param, i) => {\n            param = expandPartial(param, partials);\n            parameters[i] = param;\n            // Treat inner partials\n            let prop = expandPartial(param.bind, partials);\n            if (prop) {\n                param.bind = prop;\n            }\n            prop = expandPartial(param.transform, partials);\n            if (prop) {\n                param.transform = prop;\n            }\n            // Do some fixes on parameters.\n            fixMissingParamProperties(param);\n        });\n    }\n}\n\n/**\n * @typedef {Object} ParamOption\n * @property {string} l\n * @property {string} v\n * @property {{to: string, content: string}} [a]\n */\n/**\n * @typedef {Object} Param\n * @property {string=} partial\n * @property {string} name\n * @property {string} title\n * @property {'textfield' | 'numeric' | 'checkbox' | 'select' | 'autocomplete' | 'textarea' | 'image' | 'color' | 'repeatable'} [type]\n * @property {(ParamOption | string)[]} [options]\n * @property {any} value\n * @property {string=} tip\n * @property {string=} tooltip\n * @property {number=} min\n * @property {number=} max\n * @property {string=} transform\n * @property {string | {get?: string, set?: string, getValue?: string, setValue?: string} } [bind]\n * @property {string} [item_selector]\n * @property {string=} when\n * @property {boolean} [hidden]\n * @property {boolean} [editable]\n * @property {string} [for]\n * @property {Param[]} [fields]\n */\n/**\n * @typedef {Object} Action\n * @property {string} [predicate] - If predicate is absent, it assumes the element holding the widget root.\n * @property {string} actions - Space separated and use | to define a separator.\n * @property {string} [description] - Description is used in context menus and context toolbars.\n */\n/**\n * @typedef {Object} RawWidget\n * @property {string} [plugin_release]\n * @property {number} id\n * @property {string} key\n * @property {string} name\n * @property {string} category\n * @property {string} [scope] - Regex for idenfying allowed body ids\n * @property {string} [instructions]\n * @property {'mustache' | 'ejs'} [engine]\n * @property {string} [template]\n * @property {string} [filter]\n * @property {Param[]} [parameters]\n * @property {Object.<string, Object<string, string>>} [I18n]\n * @property {string | string[]} [selectors]\n * @property {string} [insertquery]\n * @property {string} [unwrap]\n * @property {string} [for]\n * @property {string} [forids] - Equivalent to [for]\n * @property {string} [forusernames]\n * @property {string} [forroles]\n * @property {string} [formatch] - AND or OR, Defaults to AND (The rules must be satified if present)\n * @property {string} [autocomplete]\n * @property {string} version\n * @property {string} author\n * @property {string} [requires]\n * @property {boolean} [hidden]\n * @property {number} [stars]\n * @property {Action[]} [contextmenu]\n * @property {Action[]} [contexttoolbar]\n */\n/**\n * @class\n * @classdesc Wrapper for Widget definition\n */\nexport class Widget {\n    _widget;\n    #instructionsParsed = false;\n    /** @type {string | undefined} */\n    _preview;\n\n    /**\n     * @param {RawWidget} widget\n     * @param {Object.<string, any>=} partials\n     */\n    constructor(widget, partials) {\n        if (!widget.key) {\n            // Define a random key\n            widget.key = 'w' + genID();\n        }\n        partials = partials ?? {};\n        applyPartials(widget, partials);\n        this._widget = widget;\n    }\n    /**\n     * @returns {number}\n     */\n     get id() {\n        return this._widget.id;\n    }\n    /**\n     * @returns {string}\n     */\n    get name() {\n        return this._widget.name;\n    }\n    /**\n     * @returns {string}\n     */\n    get key() {\n        return this._widget.key;\n    }\n    /**\n     * @returns {Record<string, Record<string, string>>}\n     */\n    get I18n() {\n        return this._widget.I18n || {};\n    }\n    /**\n     * @returns {string}\n     */\n    get template() {\n        return this._widget.template ?? this._widget.filter ?? '';\n    }\n    /**\n     * @returns {string | undefined}\n     */\n    get category() {\n        return this._widget.category;\n    }\n    /**\n     * @returns {string=}\n     */\n    get insertquery() {\n        return this._widget.insertquery;\n    }\n    /**\n     * @returns {string | string[] =}\n     */\n    get selectors() {\n        return this._widget.selectors;\n    }\n    /**\n     * @returns {string=}\n     */\n    get unwrap() {\n        return this._widget.unwrap;\n    }\n    /**\n     * @returns {string}\n     */\n    get version() {\n        return this._widget.version || \"1.0.0\";\n    }\n    /**\n     * @returns {string}\n     */\n    get instructions() {\n        if (this._widget.instructions && !this.#instructionsParsed) {\n            this._widget.instructions = decodeURIComponent(this._widget.instructions);\n            this.#instructionsParsed = true;\n        }\n        return this._widget.instructions ?? '';\n    }\n    /**\n     * @returns {Param[]}\n     */\n    get parameters() {\n        return this._widget.parameters ?? [];\n    }\n    /**\n     * @returns {Object.<string, any>}\n     */\n    get defaults() {\n        return this.defaultsWithRepeatable(false);\n    }\n    /**\n     * @param {boolean} [populateRepeatable]\n     * @returns {Object.<string, any>}\n     */\n    defaultsWithRepeatable(populateRepeatable = true) {\n        /** @type {Object.<string, any> } */\n        const obj = {};\n        (this._widget.parameters ?? []).forEach((param) => {\n            obj[param.name] = createDefaultsForParam(param, populateRepeatable);\n        });\n        return obj;\n    }\n    /**\n     * @param {{id: number, username: string, roles: string[]}} userInfo\n     * @returns {boolean}\n     */\n    isFor(userInfo) {\n        if (this._widget.hidden === true) {\n            return false;\n        }\n\n        const checkList = (/** @type {any} **/ value, /** @type {string} */ ruleStr) => {\n            if (!ruleStr || ruleStr.trim() === '') {\n                return null; // Null means \"no rule set\".\n            } else if (ruleStr.trim() === '*') {\n                return true;\n            }\n\n            let allowMode = ruleStr.trim().startsWith('+') || !ruleStr.trim().startsWith('-');\n            const list = ruleStr.replace(/[+\\-\\s]/g, '').split(',');\n            return allowMode ? list.includes(String(value)) : !list.includes(String(value));\n        };\n\n        const idRule = this._widget.for || this._widget.forids || '';\n        const usernameRule = this._widget.forusernames || '';\n        const roleRule = this._widget.forroles || '';\n\n        const results = [];\n\n        const idResult = checkList(userInfo.id, idRule);\n        if (idResult !== null) {\n            results.push(idResult);\n        }\n\n        const usernameResult = checkList(userInfo.username, usernameRule);\n        if (usernameResult !== null) {\n            results.push(usernameResult);\n        }\n\n        const roleResult = roleRule.trim() === '' ?\n            null : userInfo.roles.some(role => checkList(role?.toLowerCase(), roleRule?.toLowerCase()));\n        if (roleResult !== null) {\n            results.push(roleResult);\n        }\n\n        const matchMode = (this._widget.formatch || 'AND').toUpperCase();\n\n        // No rules at all? Allow by default\n        if (results.length === 0) {\n            return true;\n        }\n\n        const isAllowed = matchMode === 'OR' ? results.some(Boolean) : results.every(Boolean);\n\n        if (!isAllowed) {\n            console.warn(`Widget ${this._widget.key} not allowed for user ${userInfo.id}`);\n        }\n\n        return isAllowed;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isFilter() {\n        return this._widget.template === undefined && this._widget.filter !== undefined;\n    }\n\n    /**\n     * @param {string=} scope\n     * @returns {boolean}\n     */\n    isUsableInScope(scope) {\n        scope = scope ?? Shared.currentScope ?? '';\n        const widgetScopes = this._widget.scope;\n        if (!scope || !widgetScopes || widgetScopes === \"*\") {\n            return true;\n        }\n        return new RegExp(widgetScopes).test(scope);\n    }\n    /**\n     * @returns {boolean}\n     */\n    isSelectCapable() {\n        return this._widget.selectors !== undefined && this._widget.insertquery !== undefined;\n    }\n    /**\n     * @returns {boolean}\n     */\n    hasBindings() {\n        const parameters = this._widget.parameters ?? [];\n        const repeatable = parameters.filter(param => param.type === 'repeatable')\n            .map(rep => (rep.fields || []).some(field => field.bind !== undefined));\n        return parameters.some(param => param.bind !== undefined) ||\n            repeatable.some(rep => rep);\n    }\n    /**\n     * Recovers the property value named name of the original definition\n     * @param {string} name\n     * @returns {*}\n     */\n    prop(name) {\n        // @ts-ignore\n        return this._widget[name];\n    }\n}\n\n\nconst editorOptionsInstances = new Map();\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @returns {EditorOptions}\n */\nexport function getEditorOptions(editor) {\n    let instance = editorOptionsInstances.get(editor);\n    if (!instance) {\n        instance = new EditorOptions(editor);\n        editorOptionsInstances.set(editor, instance);\n    }\n    return instance;\n}\n"],"names":["editor","instance","editorOptionsInstances","get","EditorOptions","set","pluginName","showPlugin","userInfoOpt","courseId","widgetList","shareCss","additionalCss","globalConfig","registerOption","options","register","processor","id","username","roles","_widgetDict","key","defaultValue","trim","getWidgetDict","rawWidgets","partials","filter","e","wrappedWidgets","map","w","Widget","userInfo","isFor","Common","currentRelease","prop","forEach","constructor","this","parseInt","widgetDict","Shared","currentScope","document","querySelector","fixMissingParamProperties","param","type","value","_param$options","v","expandPartial","obj","partialKey","startsWith","endsWith","partial","replace","console","error","applyPartials","widget","regex","template","s0","s1","parameters","i","bind","transform","_widget","_preview","name","I18n","category","insertquery","selectors","unwrap","version","instructions","instructionsParsed","decodeURIComponent","defaults","defaultsWithRepeatable","populateRepeatable","hidden","checkList","ruleStr","allowMode","list","split","includes","String","idRule","for","forids","usernameRule","forusernames","roleRule","forroles","results","idResult","push","usernameResult","roleResult","some","role","toLowerCase","matchMode","formatch","toUpperCase","length","isAllowed","Boolean","every","warn","isFilter","undefined","isUsableInScope","scope","widgetScopes","RegExp","test","isSelectCapable","hasBindings","repeatable","rep","fields","field","Map"],"mappings":"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"}