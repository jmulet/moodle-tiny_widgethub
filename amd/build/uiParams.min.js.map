{"version":3,"file":"uiParams.min.js","sources":["../src/uiParams.js"],"sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable no-eq-null */\n/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport {IBParamsModal} from './modal';\nimport ModalEvents from 'core/modal_events';\n// eslint-disable-next-line no-unused-vars\nimport {stream, genID, templateRendererMustache, UserStorage, cleanParameterName, evalInContext, applyWidgetFilter, WidgetWrapper, capitalize} from './util';\nimport {getCourseId, getUserId} from './options';\n// eslint-disable-next-line no-unused-vars\nimport {UiPickCtrl} from './uiPick';\n\nconst questionPopover = '{{#tooltip}}<a href=\"javascript:void(0)\" data-toggle=\"popover\" data-trigger=\"hover\" data-content=\"{{tooltip}}\"><i class=\"fa fas fa-question-circle text-info\"></i></a>{{/tooltip}}';\n\nconst Templates = {\n   FIELDTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row{{#hidden}} tiny_widgethub-hidden{{/hidden}}\"><label class=\"col-sm-5 col-form-label\" for=\"{{elementid}}_ftmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <div class=\"col-sm-7\"><input type=\"text\" id=\"{{elementid}}_ftmpl\" class=\"form-control\" data-bar=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalue}}\"/></div>\n   </div>`,\n\n   IMAGETEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row{{#hidden}} tiny_widgethub-hidden{{/hidden}}\"><label class=\"col-sm-5 col-form-label\" for=\"{{elementid}}_ftmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <div class=\"col-sm-7\">\n   <input type=\"text\" id=\"{{elementid}}_ftmpl\" class=\"form-control d-inline-block\" data-bar=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalue}}\"/>\n   <button class=\"whb-image-picker btn btn-sm btn-secondary d-inline-block\" title=\"Search\"><i class=\"fas fa fa-search\"></i></button>\n   </div>\n   </div>`,\n\n   NUMERICTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row{{#hidden}} tiny_widgethub-hidden{{/hidden}}\"><label class=\"col-sm-5 col-form-label\"  for=\"{{elementid}}_fntmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <div class=\"col-sm-7\"><input type=\"number\" id=\"{{elementid}}_fntmpl\" class=\"form-control\" data-bar=\"{{varname}}\" {{{minMax}}} {{#disabled}}disabled{{/disabled}} value=\"{{defaultvalue}}\"/></div>\n   </div>`,\n\n   TEXTAREATEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group{{#hidden}} tiny_widgethub-hidden{{/hidden}}\"><label for=\"{{elementid}}_tatmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <textarea id=\"{{elementid}}_tatmpl\" rows=\"3\" class=\"form-control\" data-bar=\"{{varname}}\" {{#disabled}}disabled{{/disabled}} {{#tooltip}}title=\"{{tooltip}}\"{{/tooltip}}>{{defaultvalue}}</textarea>\n   </div>`,\n\n   CHECKBOXTEMPLATE: `<div id=\"{{elementid}}\" class=\"d-table w-75 m-2{{#hidden}} tiny_widgethub-hidden{{/hidden}}\">\n   <span class=\"mr-2\"><input title=\"{{varname}}\" id=\"{{elementid}}_cbtmpl\" {{#disabled}}disabled{{/disabled}}  type=\"checkbox\" data-bar=\"{{varname}}\" value=\"{{defaultvalue}}\" {{#defaultvalue}}checked{{/defaultvalue}}/></span>\n   <span>{{vartitle}}&nbsp;&nbsp;  ${questionPopover}</span>\n   </div>`,\n\n   SELECTTEMPLATE: `<div id=\"{{elementid}}\" class=\"form-group row{{#hidden}} tiny_widgethub-hidden{{/hidden}}\">\n   <label class=\"col-sm-5 col-form-label\" for=\"{{elementid}}_stmpl\" title=\"{{varname}}\">{{vartitle}} ${questionPopover}</label>\n   <div class=\"col-sm-7\">\n   <select id=\"{{elementid}}_stmpl\" class=\"form-control\" data-bar=\"{{varname}}\" {{#if disabled}}disabled{{/if}} {{#if tooltip}}title=\"{{tooltip}}\"{{/if}}>\n   {{#options}}\n   <option value=\"{{optionValue}}\"{{#selected}} selected{{/selected}}>{{optionLabel}}</option>\n   {{/options}}\n   </select>\n   </div>\n   </div>`\n};\n\nexport class UiParamsCtrl {\n   uiPickCtrl;\n   widget;\n   editor;\n   /**\n    * @param {UiPickCtrl} uiPickCtrl\n    * @param {import('./util').WidgetWrapper} widget\n    */\n   constructor(uiPickCtrl, widget) {\n      this.uiPickCtrl = uiPickCtrl;\n      this.widget = widget;\n      this.editor = uiPickCtrl.editor;\n      this.userStorage = UserStorage.getInstance(getUserId(this.editor), getCourseId(this.editor));\n   }\n   /**\n    * Displays a dialogue for configuring the parameters of the selected snpt\n    */\n   async handleAction() {\n      // Show modal with buttons.\n      const data = await createParametersContext(this.editor, this.widget, this.userStorage);\n      // @ts-ignore\n      const modal = await ModalFactory.create({\n         type: IBParamsModal.TYPE,\n         templateContext: data,\n         large: true,\n      });\n      this.modal = modal;\n      // @ts-ignore\n      modal.getRoot().on(ModalEvents.hidden, () => {\n         // Simply close\n         modal.destroy();\n      });\n      modal.body.find(`a[href=\"#${data.idTabpane}_1\"`).on(\"click\", async() => {\n         // Handle preview;\n         const ctxFromDialogue = getParametersFromForm(this.widget, modal.body.find(\"form\"), null);\n         await this.updatePreview(data.idTabpane, ctxFromDialogue);\n      });\n      modal.footer.show();\n      modal.footer.find(\"button.btn-secondary\").on(\"click\", async() => {\n         // Go back to main menú\n         modal.destroy();\n         await this.uiPickCtrl.handleAction();\n      });\n      modal.footer.find(\"button.btn-primary\").on(\"click\", async() => {\n         // Go back to main menú\n         const ctxFromDialogue = getParametersFromForm(this.widget, modal.body.find(\"form\"), this.userStorage);\n         modal.hide();\n         await this.insertWidget(ctxFromDialogue);\n         modal.destroy();\n      });\n\n      // Change input fields visibilities upon conditions\n      const selectMode = this.editor.selection.getContent().trim() != '';\n      applyFieldWatchers(modal.body, this.widget.defaults, this.widget, selectMode);\n\n      modal.show();\n   }\n\n   destroy() {\n      if (this.modal) {\n         this.modal.destroy();\n      }\n   }\n\n   /**\n    * @param {Object.<string, any>} ctxFromDialogue\n    * @returns {Promise<string>}\n    */\n   async generateInterpolatedCode(ctxFromDialogue) {\n      const sel = this.editor.selection.getContent();\n      // Decideix quin mode de selecció estam\n      console.log(\"Selection\", this.editor.selection, sel);\n      let interpoledComponentCode = await this.widget.render(ctxFromDialogue);\n      if (sel.trim() && this.widget.insertquery) {\n         let query = this.widget.insertquery.trim();\n         let replaceMode = query.startsWith('r!');\n         if (replaceMode) {\n            query = query.substring(2).trim();\n         }\n         // We are in selection mode\n         const tmpDiv = document.createElement(\"div\");\n         tmpDiv.innerHTML = interpoledComponentCode;\n         const insertPoint = tmpDiv.querySelector(this.widget.insertquery);\n         if (insertPoint) {\n            if (replaceMode) {\n               // Replace the insertPoint by the interpolated HTML\n               insertPoint.outerHTML = sel;\n            } else {\n               // Inserts the interpolated HTML into the insertPoint\n               insertPoint.innerHTML = sel;\n            }\n            interpoledComponentCode = tmpDiv.innerHTML;\n         }\n      }\n      return interpoledComponentCode;\n   }\n\n   /**\n    * @param {number} idTabpane\n    * @param {Object.<string, any>} ctxFromDialogue\n    * @returns\n    */\n   async updatePreview(idTabpane, ctxFromDialogue) {\n      const interpoledCode = await this.generateInterpolatedCode(ctxFromDialogue);\n      const $previewPanel = this.modal.body.find(`#${idTabpane}_1`);\n      $previewPanel.html(interpoledCode);\n   }\n\n   /**\n    * @param {Object.<string, any>} ctxFromDialogue\n    * @returns\n    */\n   async insertWidget(ctxFromDialogue) {\n      const recentWidgets = this.userStorage.getFromSession(\"recentsnpt\", \"\").split(\",\").filter(e=>e.trim());\n      const pos = recentWidgets.indexOf(this.widget.key);\n      if (pos >= 0) {\n         recentWidgets.splice(pos, 1);\n      }\n      recentWidgets.unshift(this.widget.key);\n      if (recentWidgets.length > 4) {\n         recentWidgets.splice(5, recentWidgets.length - 4);\n      }\n\n      this.userStorage.setToSession(\"recentsnpt\", recentWidgets.join(\",\"), true);\n\n      if (this.widget.isFilter()) {\n         applyWidgetFilter(this.editor, this.widget.template || '', false, ctxFromDialogue);\n         return;\n      }\n      const interpoledCode = await this.generateInterpolatedCode(ctxFromDialogue);\n      // Normal insert mode\n      this.editor.selection.setContent(interpoledCode);\n      this.editor.focus();\n   }\n}\n\n/**\n * Generates the context to render the modal dialogue with mustache template\n * @param {import('./plugin').TinyMCE} editor\n * @param {WidgetWrapper} widget - the widget for which to show de dialogue\n * @param {UserStorage} userStorage\n * @returns {Promise<Object.<string, any>>} - The generated context\n */\nconst createParametersContext = async(editor, widget, userStorage) => {\n   /** @type {boolean} */\n   const mustSaveAll = userStorage.getFromLocal('saveall', false);\n   /** @type {Object.<string, any>} */\n   const saveAllData = userStorage.getFromLocal('saveall_data', {});\n   /** @type {Object.<string, any>} */\n   const valors = userStorage.getFromLocal(\"valors\", {});\n   const defaults = widget.defaults;\n\n   /**\n    * @param {import('./util').Param} param\n    * @returns {*}\n    */\n   const obtainCurrentValue = function(param) {\n      const sname = widget.name;\n      const pname = param.name;\n      let currentval = defaults[pname];\n      if (mustSaveAll) {\n         // Search the last used value of this parameter\n         if (saveAllData[sname]?.[pname] != null) {\n            currentval = saveAllData[sname][pname];\n         }\n      }\n      if (pname.startsWith(\"$\") && valors[pname]) {\n         currentval = valors[pname];\n      }\n      return currentval;\n   };\n\n   const controls = widget.parameters.map(param =>\n      createControlHTML(editor.id, param, obtainCurrentValue(param)));\n\n   const ctx = {\n      idTabpane: genID(),\n      selectMode: editor.selection.getContent().trim().length > 0,\n      name: widget.name,\n      instructions: widget.instructions,\n      filter: widget.isFilter(),\n      controls: controls\n   };\n   return ctx;\n};\n\n/**\n * Generates the HTML to render the control associated with the parameter\n * @param {string} hostId - The id of the editor\n * @param {import('./util').Param} param - The parameter object defining the control\n * @param {any} defaultValue - Default values for all parameters\n * @returns {string} - The generated HTML for this control\n */\nexport const createControlHTML = function(hostId, param, defaultValue) {\n   let template = '';\n   const pname = cleanParameterName(param.name);\n   const generalCtx = {\n      elementid: hostId + \"_\" + pname,\n      varname: pname,\n      vartitle: param.title,\n      defaultvalue: defaultValue,\n      tooltip: param.tip || param.tooltip,\n      disabled: param.editable === false,\n      hidden: param.hidden === true\n   };\n   if (param.type === 'textarea') {\n      template = templateRendererMustache(Templates.TEXTAREATEMPLATE, generalCtx);\n   } else if (param.type === 'numeric') {\n      let minMax = \"\";\n      if (param.min) {\n         minMax += `min=\"${param.min}\"`;\n      }\n      if (param.max) {\n         minMax += ` max=\"${param.max}\"`;\n      }\n      template = templateRendererMustache(Templates.NUMERICTEMPLATE, {minMax: minMax, ...generalCtx});\n   } else if (param.type === 'checkbox') {\n      template = templateRendererMustache(Templates.CHECKBOXTEMPLATE, generalCtx);\n   } else if (param.type === 'select') {\n      const options = (param.options ?? []).map(opt => {\n         let label;\n         let value;\n         if (typeof opt === 'string') {\n            label = capitalize(opt);\n            value = opt;\n         } else {\n            label = opt.l;\n            value = opt.v;\n         }\n         return {optionLabel: label, optionValue: value, selected: value === defaultValue};\n      });\n      template = templateRendererMustache(Templates.SELECTTEMPLATE, {options, ...generalCtx});\n   } else if (param.type === 'image') {\n      template = templateRendererMustache(Templates.IMAGETEMPLATE, generalCtx);\n   } else {\n      // Assume textfield\n      template = templateRendererMustache(Templates.FIELDTEMPLATE, generalCtx);\n   }\n   return template;\n};\n\n\n/**\n * Obtains the updated parameter values from the modal\n * This is used in insertWidget\n * @param {WidgetWrapper} widget\n * @param {JQuery<HTMLElement>} form\n * @param {UserStorage?} userStorage\n * @returns {Object.<string, any>} - The updated parameters dict\n */\nexport const getParametersFromForm = (widget, form, userStorage) => {\n   /** @type {Object.<string, any>}  */\n   const ctx = {};\n   /** @type {Object.<string, any>}  */\n   const toPersist = {};\n   const defaults = widget.defaults;\n   widget.parameters.forEach(param => {\n      const pname = param.name;\n      const cleanPname = cleanParameterName(pname);\n      const $elem = form.find(`[data-bar=\"${cleanPname}\"]`);\n      if (!$elem.length) {\n         ctx[pname] = defaults[pname];\n         return;\n      }\n      /** @type {*} */\n      let value = $elem.val() || \"\";\n      if ($elem.prop(\"tagName\") === \"INPUT\" && $elem.attr(\"type\") === \"checkbox\") {\n         value = $elem.is(':checked');\n      } else if (param.transform) {\n         value = stream(param.transform).reduce(value);\n      }\n      ctx[pname] = value;\n      if (pname.trim().startsWith(\"$\")) {\n         toPersist[pname] = value;\n      }\n   });\n   if (userStorage) {\n      if (Object.keys(toPersist).length) {\n         // Only those starting with $\n         userStorage.setToLocal('valors', toPersist, true);\n      }\n      // Ha de persistir tots els valors?\n      const mustSaveAll = userStorage.getFromLocal('saveall', false);\n      if (mustSaveAll) {\n         /** @type {Object.<string, any>}  */\n         const previousAllData = userStorage.getFromLocal('saveall_data', {});\n         previousAllData[widget.name] = {...ctx};\n         userStorage.setToLocal('saveall_data', previousAllData, true);\n      }\n   }\n   return ctx;\n};\n\n\n/**\n * @param {JQuery<HTMLElement>} $formElem\n * @param {Object.<string, any>} defaultsData\n * @param {WidgetWrapper} widget\n * @param {boolean} selectMode\n */\nexport const applyFieldWatchers = function($formElem, defaultsData, widget, selectMode) {\n   /** @type {string[]} */\n   const watchedvars = []; // All these variable names must be watched\n   /**\n    * all these components must be updated when one watcher changes\n    *  @type {{\n    *    condition: string,\n    *    component: JQuery<HTMLElement>,\n    *    type: string,\n    *    indx: number\n    *  }[]}\n    */\n   const updatableComponents = [];\n\n   const regex = /\\{{2}([^}]*)\\}{2}/gm;\n   for (let indx = 0, len = widget.parameters.length; indx < len; indx++) {\n\n      const varobj = widget.parameters[indx];\n\n      if (varobj.when) {\n         const condition = varobj.when;\n         const t = varobj.type;\n         const control = $formElem.find(`[data-bar=\"${cleanParameterName(varobj.name)}\"]`);\n         if (!control.length || !t) {\n            continue;\n         }\n         updatableComponents.push({\n            condition: condition.replace(/[{}]{2}/g, ''),\n            component: control,\n            indx: indx,\n            type: t\n         });\n         const varsInvolved = condition.match(regex);\n         varsInvolved?.forEach(evar => {\n            evar = evar.replace(/[{}]*/g, '').trim();\n            // Can only watch real variables SELECT_MODE is not a variable\n            console.log(\"evar\", evar, defaultsData);\n            if (watchedvars.indexOf(evar) < 0 && defaultsData[evar] != null) {\n               console.log(\"ADDED AS WATCH\");\n               watchedvars.push(evar);\n            }\n         });\n      }\n      watchedvars.push(varobj.name);\n   }\n\n   console.log(watchedvars);\n   console.log(updatableComponents);\n\n\n   const doUpdateVisibilities = () => {\n      updatableComponents.forEach(cc => {\n         // Evaluate condition\n         console.log(\"Amagant \", cc);\n         const condicio = cc.condition;\n         const novesVariables = getParametersFromForm(widget, $formElem, null);\n         console.log(\"Obtained the new variables from the form \", novesVariables);\n         // Add to the new variables the internal variables\n         novesVariables.SELECT_MODE = selectMode;\n         // Eval JS condition for new variables\n         const showme = evalInContext(novesVariables, condicio);\n         let theComponent = cc.component;\n         if (theComponent) {\n            theComponent = theComponent.parent();\n            if (cc.type === 'checkbox') {\n               theComponent = theComponent.parent();\n            }\n            // Only change visibilities of nodes not hidden from user\n            console.log(\"Changing visibilities of \", theComponent, \" condition \", condicio, \" evals to \", showme);\n            if (!theComponent.attr('data-amagat')) {\n               if (showme) {\n                  theComponent.show();\n               } else {\n                  theComponent.hide();\n               }\n            }\n         }\n      });\n   };\n\n   // Apply the watchers\n   widget.parameters.forEach((varobj) => {\n      const control = $formElem.find(`[data-bar=\"${cleanParameterName(varobj.name)}\"]`);\n      if (watchedvars.indexOf(varobj.name) < 0 || !control) {\n         return;\n      }\n      console.log(\"that must be watched\", varobj);\n      let evtName = \"change\";\n      if (varobj.type === 'textfield' || varobj.type === 'textarea') {\n         evtName = \"keyup\";\n      }\n      control.on(evtName, (e) => {\n         console.log(e);\n         doUpdateVisibilities();\n      });\n   });\n\n   // Decide which form elements are visible accoding to the current values of the parameters.\n   doUpdateVisibilities();\n};\n"],"names":["questionPopover","Templates","FIELDTEMPLATE","IMAGETEMPLATE","NUMERICTEMPLATE","TEXTAREATEMPLATE","CHECKBOXTEMPLATE","SELECTTEMPLATE","uiPickCtrl","widget","editor","constructor","userStorage","UserStorage","getInstance","this","data","createParametersContext","modal","ModalFactory","create","type","IBParamsModal","TYPE","templateContext","large","getRoot","on","ModalEvents","hidden","destroy","body","find","idTabpane","async","ctxFromDialogue","getParametersFromForm","updatePreview","footer","show","handleAction","hide","insertWidget","selectMode","selection","getContent","trim","applyFieldWatchers","defaults","sel","console","log","interpoledComponentCode","render","insertquery","query","replaceMode","startsWith","substring","tmpDiv","document","createElement","innerHTML","insertPoint","querySelector","outerHTML","interpoledCode","generateInterpolatedCode","html","recentWidgets","getFromSession","split","filter","e","pos","indexOf","key","splice","unshift","length","setToSession","join","isFilter","template","setContent","focus","mustSaveAll","getFromLocal","saveAllData","valors","controls","parameters","map","param","createControlHTML","id","sname","name","pname","currentval","obtainCurrentValue","instructions","hostId","defaultValue","generalCtx","elementid","varname","vartitle","title","defaultvalue","tooltip","tip","disabled","editable","minMax","min","max","options","opt","label","value","l","v","optionLabel","optionValue","selected","form","ctx","toPersist","forEach","cleanPname","$elem","val","prop","attr","is","transform","reduce","Object","keys","setToLocal","previousAllData","$formElem","defaultsData","watchedvars","updatableComponents","regex","indx","len","varobj","when","condition","t","control","push","replace","component","varsInvolved","match","evar","doUpdateVisibilities","cc","condicio","novesVariables","SELECT_MODE","showme","theComponent","parent","evtName"],"mappings":"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"}