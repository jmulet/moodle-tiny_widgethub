{"version":3,"file":"util.min.js","sources":["../src/util.js"],"sourcesContent":["/* eslint-disable no-console */\n\n/* eslint-disable no-eq-null */\n/* eslint-disable no-bitwise */\n/* eslint-disable no-new-func */\n/* eslint-disable dot-notation */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Mustache from 'core/mustache';\nimport {get_strings as getStrings} from 'core/str';\nimport jQuery from 'jquery';\n\n/**\n * Load on demand the template engine EJS\n * @typedef {Object} EJS\n * @property {(template: string, ctx: Object.<string,any>) => string} render\n */\n/** @type {EJS} */\nlet Ejs;\n/**\n * @returns {Promise<EJS>}\n */\nfunction getEJS() {\n    if (Ejs) {\n        return Promise.resolve(Ejs);\n    }\n    return new Promise((resolve, reject) => {\n        // @ts-ignore\n        require(['tiny_widgethub/ejs-lazy'], (ejsModule) => {\n            Ejs = ejsModule;\n            resolve(Ejs);\n        }, reject);\n    });\n}\n\n/**\n * @typedef {object} Shared\n * @property {string} currentScope\n * @property {boolean} activatePopup\n * @property {object} globalConfig\n * @const\n */\nlet activatePopup = true;\nexport const Shared = {\n    // In which type of activity the editor is being used\n    currentScope: document.querySelector('body')?.id,\n    // Whether to activate the contextual popup or not\n    activatePopup: activatePopup,\n    // Hold other global configuration\n    globalConfig: {}\n};\n\n/**\n * @returns {string} a randomID\n */\nexport function genID() {\n    return 'g' + Math.random().toString(32).substring(2);\n}\n\n/**\n * @param {Object.<string, any>} ctx\n * @param {string} expr\n * @param {boolean=} keepFns - Keep or not the funcions in the ctx\n * @returns {any} The evaluated expression within the context ctx\n */\nexport function evalInContext(ctx, expr, keepFns) {\n    const listArgs = [];\n    const listVals = [];\n\n    if (ctx) {\n        Object.keys(ctx).forEach((key) => {\n            // Remove functions from ctx\n            if (keepFns || typeof ctx[key] !== \"function\") {\n                listArgs.push(key);\n                listVals.push(ctx[key]);\n            }\n        });\n    }\n    listArgs.push('expr');\n    listArgs.push('return eval(expr)');\n    listVals.push(expr);\n    // console.log('listArgs', listArgs);\n    // console.log('expr', expr, 'listVals', listVals);\n\n    const evaluator = new Function(...listArgs);\n    return evaluator(...listVals);\n}\n\n/**\n * @param {string} text\n * @param {Object.<string, any>} ctx2\n * @returns {string}\n */\nconst defineVar = function(text, ctx2) {\n    const pos = text.indexOf(\"=\");\n    const varname = text.substring(0, pos).trim();\n    const varvalue = evalInContext(ctx2, text.substring(pos + 1).trim());\n    ctx2[varname] = varvalue;\n    return varname;\n};\n\n/**\n * Extends Mustache templates with some helpers\n * @param {Object.<string, any>} ctx\n * @param {Object.<string, Object.<string, string>>} translations\n */\nconst applyMustacheHelpers = function(ctx, translations) {\n\n    ctx[\"if\"] = () =>\n        /**\n         * @param {string} text\n         * @param {Mustache.render} render\n         */\n        function(text, render) {\n            const pos = text.indexOf(\"]\");\n            const condition = text.substring(0, pos).trim().substring(1);\n            const show = evalInContext(ctx, condition);\n            if (show) {\n                return render(text.substring(pos + 1).trim());\n            }\n            return \"\";\n        };\n    ctx[\"var\"] = () =>\n        /**\n         * @param {string} text\n         */\n        function(text) {\n            defineVar(text, ctx);\n        };\n    ctx[\"eval\"] = () =>\n        /**\n         * @param {string} text\n         */\n        function(text) {\n            return evalInContext(ctx, text) + \"\";\n        };\n    ctx[\"I18n\"] = () =>\n        /**\n         * @param {string} text\n         * @param {Mustache.render} render\n         */\n        function(text, render) {\n            const key = render(text).trim();\n            const dict = translations[key] || {};\n            return dict[ctx[\"LANG\"]] || dict[\"en\"] || dict[\"ca\"] || key;\n        };\n    ctx[\"each\"] = () =>\n        /**\n         * @param {string} text\n         */\n        function(text) {\n            const pos = text.indexOf(\"]\");\n            const cond = text.substring(0, pos).trim().substring(1);\n            const components = cond.split(\",\");\n            const dim = components.length;\n            const maxValues = new Array(dim);\n            const loopVars = new Array(dim);\n            let total = 1;\n            const cc = 'i'.charCodeAt(0);\n            components.forEach((def, i) => {\n                const parts = def.split(\"=\");\n                if (parts.length === 1) {\n                    parts.unshift(String.fromCharCode(cc + i));\n                }\n                const cname = parts[0].trim();\n                loopVars[i] = cname;\n                const dm = evalInContext(ctx, parts[1]);\n                total = total * dm;\n                maxValues[i] = dm;\n                ctx[cname] = 1;\n            });\n            let output = [];\n            for (let _ei = 0; _ei < total; _ei++) {\n                // @ts-ignore\n                output.push(Mustache.render(text.substring(pos + 1), ctx));\n                let currentDim = dim - 1;\n                let incrUp;\n                do {\n                    const oldValue = ctx[loopVars[currentDim]] - 1;\n                    const newValue = (oldValue + 1) % maxValues[currentDim] + 1;\n                    ctx[loopVars[currentDim]] = newValue;\n                    incrUp = newValue < oldValue;\n                    currentDim--;\n                } while (currentDim >= 0 && incrUp);\n            }\n            return output.join('');\n        };\n    ctx[\"for\"] = () =>\n        /**\n         * @param {string} text\n         */\n        function(text) {\n            const pos = text.indexOf(\"]\");\n            const condition = text.substring(0, pos).trim().substring(1);\n            const parts = condition.split(\";\");\n            const loopvar = defineVar(parts[0], ctx);\n            let output = \"\";\n            let maxIter = 0; // Prevent infinite loop imposing a limit of 1000\n            while (evalInContext(ctx, parts[1]) && maxIter < 1000) {\n                // @ts-ignore\n                output += Mustache.render(text.substring(pos + 1), ctx);\n                if (parts.length === 3 && parts[2].trim()) {\n                    defineVar(loopvar + \"=\" + parts[2], ctx);\n                } else {\n                    ctx[loopvar] = ctx[loopvar] + 1;\n                }\n                maxIter++;\n            }\n            return output;\n        };\n};\n\n/**\n * @param {string} template\n * @param {Object.<string, any>} context\n * @param {Object.<string, Object.<string, string>>} [translations]\n * @returns {string} The interpolated template given a context and translations map\n */\nexport function templateRendererMustache(template, context, translations) {\n    const ctx = {...context};\n    Object.keys(ctx).forEach(key => {\n        if (ctx[key] === \"$RND\") {\n            ctx[key] = genID();\n        }\n    });\n    applyMustacheHelpers(ctx, translations ?? {});\n    // @ts-ignore\n    return Mustache.render(template, ctx);\n}\n\n\n/**\n * @param {string} template\n * @param {Object.<string, any>} context\n * @param {Object.<string, Object.<string, any>>} translations\n * @returns {Promise<string>} The interpolated template given a context and translations map\n */\nasync function templateRendererEJS(template, context, translations) {\n    /** @type {Object.<string, any>} */\n    const ctx = {...context, I18n: {}};\n    Object.keys(ctx).forEach(key => {\n        if (ctx[key] === \"$RND\") {\n            ctx[key] = genID();\n        }\n    });\n    const lang = ctx[\"LANG\"];\n    for (let wordKey in translations) {\n        const dict = translations[wordKey];\n        ctx[\"I18n\"][wordKey] = dict[lang] || dict[\"en\"] || dict[\"es\"] || wordKey;\n    }\n    const _ejs = await getEJS();\n    return _ejs.render(template, ctx);\n}\n\n/**\n * @param {string} template\n * @param {Object.<string, any>} context\n * @param {Object.<string, Object.<string, any>>} translations\n * @param {string=} engine - (ejs | mustache) optional\n * @returns {Promise<string>} - The interpolated template given a context and translations map\n */\nexport function templateRenderer(template, context, translations, engine) {\n    if (!engine) {\n        engine = template.includes(\"<%\") ? \"ejs\" : \"mustache\";\n    }\n    if (engine === \"ejs\") {\n        return templateRendererEJS(template, context, translations);\n    }\n    // Default to Mustache\n    const tmpl = templateRendererMustache(template, context, translations);\n    return Promise.resolve(tmpl);\n}\n\n/**\n * @typedef {Object} ParamOption\n * @property {string} l\n * @property {string} v\n */\n/**\n * @typedef {Object} Param\n * @property {string=} partial\n * @property {string} name\n * @property {string} title\n * @property {'textfield' | 'numeric' | 'checkbox' | 'select' | 'textarea' | 'image' | 'color'} [type]\n * @property {(ParamOption | string)[]} [options]\n * @property {any} value\n * @property {string=} tip\n * @property {string=} tooltip\n * @property {number=} min\n * @property {number=} max\n * @property {string=} transform\n * @property {string | {get: string, set: string} } [bind]\n * @property {string=} when\n * @property {boolean} [hidden]\n * @property {boolean} [editable]\n */\n/**\n * @typedef {Object} Action\n * @property {string} predicate\n * @property {string} actions\n */\n/**\n * @typedef {Object} Widget\n * @property {number} id\n * @property {string} key\n * @property {string} category\n * @property {string=} scope - Regex for idenfying allowed body ids\n * @property {string} name\n * @property {string=} instructions\n * @property {'mustache' | 'ejs'} [engine]\n * @property {string} template\n * @property {Param[]=} parameters\n * @property {Object.<string, Object<string, string>>} [I18n]\n * @property {string | string[]} [selectors]\n * @property {string=} insertquery\n * @property {string=} unwrap\n * @property {string=} for\n * @property {string} version\n * @property {string} author\n * @property {boolean=} hidden\n * @property {Action[]} [contextmenu]\n */\n/**\n * @class\n * @classdesc Wrapper for Widget definition\n */\nexport class WidgetWrapper {\n    #widget;\n    #instructionsParsed = false;\n\n    /**\n     * @param {Widget} widget\n     * @param {Object.<string, any>=} partials\n     */\n    constructor(widget, partials) {\n        partials = partials ?? {};\n        this.#widget = widget;\n        const parameters = widget.parameters;\n        if (!parameters) {\n            return;\n        }\n        // Do some fixes on parameters\n        parameters.forEach((param, i) => {\n            // Case of a partial\n            if (param.partial) {\n                if (!partials[param.partial]) {\n                    console.error(\"Cannot find partial for \", param.partial, partials);\n                    return;\n                }\n                parameters[i] = partials[param.partial];\n            }\n            if (!param.type) {\n                // Infer type from value\n                if (typeof param.value === \"boolean\") {\n                    param.type = 'checkbox';\n                } else if (typeof param.value === \"number\") {\n                    param.type = 'numeric';\n                } else if (typeof param.value === \"string\") {\n                    param.type = param.options ? 'select' : 'textfield';\n                }\n            }\n            if (!param.value) {\n                switch (param.type) {\n                    case ('checkbox'):\n                        param.value = false; break;\n                    case ('numeric'):\n                        param.value = 0; break;\n                    case ('select'):\n                        param.value = param.options?.[0];\n                        if (typeof (param.value) === 'object') {\n                            param.value = param.value.v;\n                        }\n                        break;\n                    case ('color'):\n                        param.value = '#ffffff'; break;\n                    default:\n                        param.value = '';\n                }\n            }\n        });\n    }\n    /**\n     * @returns {string}\n     */\n    get name() {\n        return this.#widget.name;\n    }\n    /**\n     * @returns {string}\n     */\n    get key() {\n        return this.#widget.key;\n    }\n    /**\n     * @returns {Object}\n     */\n    get I18n() {\n        return this.#widget.I18n || {};\n    }\n    /**\n     * @returns {string}\n     */\n    get template() {\n        return this.#widget.template;\n    }\n    /**\n     * @returns {string}\n     */\n    get category() {\n        return this.#widget.category ?? \"MISC\";\n    }\n    /**\n     * @returns {string=}\n     */\n    get insertquery() {\n        return this.#widget.insertquery;\n    }\n    /**\n     * @returns {string | string[] =}\n     */\n    get selectors() {\n        return this.#widget.selectors;\n    }\n    /**\n     * @returns {string=}\n     */\n    get unwrap() {\n        return this.#widget.unwrap;\n    }\n    /**\n     * @returns {string}\n     */\n    get version() {\n        return this.#widget.version || \"1.0.0\";\n    }\n    /**\n     * @returns {string}\n     */\n    get instructions() {\n        if (this.#widget.instructions && !this.#instructionsParsed) {\n            this.#widget.instructions = decodeURIComponent(this.#widget.instructions);\n            this.#instructionsParsed = true;\n        }\n        return this.#widget.instructions ?? '';\n    }\n    /**\n     * @returns {Param[]}\n     */\n    get parameters() {\n        return this.#widget.parameters ?? [];\n    }\n    /**\n     * @returns {Object.<string, any>}\n     */\n    get defaults() {\n        /** @type {Object.<string, any> } */\n        const obj = {};\n        this.parameters.forEach((param) => {\n            obj[param.name] = param.value;\n        });\n        return obj;\n    }\n    /**\n     * @param {object} ctx\n     * @returns {Promise<string>} The rendered template\n     */\n    render(ctx) {\n        const defaultsCopy = {...this.defaults};\n        const toInterpolate = Object.assign(defaultsCopy, ctx || {});\n        // Decide which template engine to use\n        let engine = this.#widget.engine;\n        return templateRenderer(this.template ?? \"\", toInterpolate,\n            this.#widget.I18n ?? {}, engine);\n    }\n    /**\n     * @param {number} userId\n     * @returns {boolean}\n     */\n    isFor(userId) {\n        // These are administrators\n        if (this.#widget.hidden === true) {\n            return false;\n        }\n        let grantStr = (this.#widget.for || '').trim();\n        if (grantStr === '' || grantStr === '*' || userId <= 2) {\n            return true;\n        }\n        let allowMode = true;\n        if (grantStr.startsWith('-')) {\n            allowMode = false;\n        }\n        grantStr = grantStr.replace(/[+\\- ]/g, '');\n        const grantList = grantStr.split(\",\");\n        const isAllowed = (allowMode && grantList.indexOf(userId + \"\") >= 0) || (!allowMode && grantList.indexOf(userId + \"\") < 0);\n        return isAllowed;\n    }\n    /**\n     * @param {string=} scope\n     * @returns {boolean}\n     */\n    isUsableInScope(scope) {\n        scope = scope ?? Shared.currentScope ?? '';\n        const widgetScopes = this.#widget.scope;\n        if (!scope || !widgetScopes || widgetScopes === \"*\") {\n            return true;\n        }\n        const regex = new RegExp(widgetScopes);\n        return regex.exec(scope) != null;\n    }\n    /**\n     * @returns {boolean}\n     */\n    isFilter() {\n        return this.category?.toLowerCase() === \"filtres\";\n    }\n    /**\n     * @returns {boolean}\n     */\n    hasBindings() {\n        return this.parameters.filter(param => param.bind !== undefined).length > 0;\n    }\n    /**\n     * Recovers the property value named name of the original definition\n     * @param {string} name\n     * @returns {*}\n     */\n    prop(name) {\n        // @ts-ignore\n        return this.#widget[name];\n    }\n}\n\n/**\n * @param {string} s - string to the hashed\n * @returns {number}\n */\nexport function hashCode(s) {\n    s = s || \"\";\n    let h = 0;\n    const l = s.length;\n    let i = 0;\n    if (l > 0) {\n        while (i < l) {\n            h = (h << 6) + ((s.charCodeAt(i) - 65) | 0);\n            i++;\n        }\n    }\n    return Math.abs(h);\n}\n\n/**\n * @class\n * @classdesc Defines local and session storage classes for a given context (user & course)\n */\nexport class UserStorage {\n    static _instances = {};\n    _userId = 0;\n    _courseId = 0;\n    _localStore;\n    _sessionStore;\n    STORE_KEY;\n    /**\n     * @param {number} userId\n     * @param {number} courseId\n     * @static\n     * @returns {UserStorage} - The instance\n     */\n    static getInstance(userId, courseId) {\n        const key = userId + \"_\" + courseId;\n        // @ts-ignore\n        if (!UserStorage._instances[key]) {\n            // @ts-ignore\n            UserStorage._instances[key] = new UserStorage(userId, courseId);\n        }\n        // @ts-ignore\n        return UserStorage._instances[key];\n    }\n    // Private constructor\n    // @ts-ignore\n    constructor(userId, courseId) {\n        this._userId = userId;\n        this._courseId = courseId;\n        this.STORE_KEY = \"iedib-widgets_\" + userId;\n        this._localStore = {valors: {}};\n        this._sessionStore = {searchtext: ''};\n        this.loadStore();\n    }\n    /**\n     * @returns {void}\n     */\n    loadStore() {\n        if (typeof window.localStorage !== 'undefined') {\n            const txt = window.localStorage.getItem(this.STORE_KEY);\n            if (txt) {\n                try {\n                    this._localStore = JSON.parse(txt);\n                } catch (ex) {\n                    console.error(ex);\n                }\n            }\n        }\n        // Added storage for this _course\n        // @ts-ignore\n        if (!this._localStore[\"_\" + this._courseId]) {\n            // @ts-ignore\n            this._localStore[\"_\" + this._courseId] = {};\n        }\n        if (typeof window.sessionStorage !== 'undefined') {\n            const txt2 = window.sessionStorage.getItem(this.STORE_KEY);\n            if (txt2) {\n                try {\n                    this._sessionStore = JSON.parse(txt2);\n                } catch (ex) {\n                    console.error(ex);\n                }\n            }\n        }\n    }\n    /**\n     * @template T\n     * @param {string} key\n     * @param {T} defaultValue\n     * @returns {T}\n     */\n    getFromLocal(key, defaultValue) {\n        if (!this._localStore) {\n            return defaultValue;\n        }\n        // @ts-ignore\n        const MLSC = this._localStore[\"_\" + this._courseId]; // Almost everything goes here\n        const MLS = this._localStore; // Only configuration params\n        if (MLSC) {\n            // @ts-ignore\n            return MLSC[key] || MLS[key] || defaultValue;\n        } else if (MLS) {\n            // @ts-ignore\n            return MLS[key] || defaultValue;\n        }\n        return defaultValue;\n    }\n    /**\n     * @template T\n     * @param {string} key\n     * @param {T} defaultValue\n     * @returns {T}\n     */\n    getFromSession(key, defaultValue) {\n        // @ts-ignore\n        return (this._sessionStore[key] != null ? this._sessionStore[key] : defaultValue);\n    }\n    /**\n     * @param {'local' | 'session' | undefined} type\n     */\n    saveStore(type) {\n        if (type === 'local' && typeof window.localStorage !== 'undefined') {\n            window.localStorage.setItem(this.STORE_KEY, JSON.stringify(this._localStore));\n        } else if (type === 'session' && typeof window.sessionStorage !== 'undefined') {\n            window.sessionStorage.setItem(this.STORE_KEY, JSON.stringify(this._sessionStore));\n        } else if (type == null) {\n            if (typeof window.localStorage !== 'undefined') {\n                window.localStorage.setItem(this.STORE_KEY, JSON.stringify(this._localStore));\n            }\n            if (typeof window.sessionStorage !== 'undefined') {\n                window.sessionStorage.setItem(this.STORE_KEY, JSON.stringify(this._sessionStore));\n            }\n        }\n    }\n    /**\n     * @template T\n     * @param {string} key\n     * @param {T} value\n     * @param {boolean=} persist\n     * @returns {void}\n     */\n    setToLocal(key, value, persist) {\n        if (this._localStore == null) {\n            return;\n        }\n        // @ts-ignore\n        const MLSC = this._localStore[\"_\" + this._courseId]; // Almost everything goes here\n        const MLS = this._localStore; // Only configuration params\n\n        // @ts-ignore\n        if (typeof (theValueMap) === 'object') {\n            if (MLSC && key === 'saveall_data' || key === 'valors') {\n                MLSC[key] = MLSC[key] || {};\n            } else {\n                // @ts-ignore\n                MLS[key] = MLS[key] || {};\n            }\n            // @ts-ignore\n            const keys = Object.keys(value);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const theKey = keys[i];\n                // @ts-ignore\n                const val = value[theKey];\n                if (MLSC && key === 'saveall_data' || key === 'valors') {\n                    MLSC[key][theKey] = val;\n                } else {\n                    // @ts-ignore\n                    MLS[key][theKey] = val;\n                }\n            }\n        } else {\n            // @ts-ignore\n            MLS[key] = value;\n        }\n        if (persist) {\n            this.saveStore(\"local\");\n        }\n    }\n    /**\n     * @template T\n     * @param {string} key\n     * @param {T} value\n     * @param {boolean} persist\n     * @returns {void}\n     */\n    setToSession(key, value, persist) {\n        if (typeof (value) === 'object') {\n            // @ts-ignore\n            this._sessionStore[key] = this._sessionStore[key] || {};\n            // @ts-ignore\n            const keys = Object.keys(value);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const theKey = keys[i];\n                // @ts-ignore\n                const val = value[theKey];\n                // @ts-ignore\n                this._sessionStore[key][theKey] = val;\n            }\n        } else {\n            // @ts-ignore\n            this._sessionStore[key] = value;\n        }\n        if (persist) {\n            this.saveStore(\"session\");\n        }\n    }\n\n}\n\n\n/**\n * @param {string} str1\n * @param {string} needle\n * @returns {boolean} Whether str1 contains needle or not\n */\nexport function searchComp(str1, needle) {\n    str1 = (str1 || '').trim().toLowerCase();\n    needle = (needle || '').trim().toLowerCase();\n    str1 = str1.replace(/[àáâãäå]/, \"a\")\n        .replace(/[èéêë]/, \"e\")\n        .replace(/[ìíîï]/, \"i\")\n        .replace(/[òóôö]/, \"o\")\n        .replace(/[ùúüû]/, \"u\")\n        .replace(/ç/, \"c\")\n        .replace(/·/, \"\");\n    needle = needle.replace(/[àáâãäå]/, \"a\")\n        .replace(/[èéêë]/, \"e\")\n        .replace(/[ìíîï]/, \"i\")\n        .replace(/[òóôö]/, \"o\")\n        .replace(/[ùúüû]/, \"u\")\n        .replace(/ç/, \"c\")\n        .replace(/·/, \"\");\n    return str1.indexOf(needle) >= 0;\n}\n\n/** Default transformers */\nconst Transformers = {\n    // @ts-ignore\n    \"toUpperCase\": function(txt) {\n        return (txt + \"\").toUpperCase();\n    },\n    // @ts-ignore\n    \"toLowerCase\": function(txt) {\n        return (txt + \"\").toLowerCase();\n    },\n    // @ts-ignore\n    \"trim\": function(txt) {\n        return (txt + \"\").trim();\n    },\n    // @ts-ignore\n    \"ytId\": function(txt) {\n        // Finds the youtubeId in a text\n        const rx = /^.*(?:(?:youtu\\.be\\/|v\\/|vi\\/|u\\/\\w\\/|embed\\/|shorts\\/)|(?:(?:watch)?\\?v(?:i)?=|&v(?:i)?=))([^#&?]*).*/;\n        const r = (txt || '').match(rx);\n        if (r?.length) {\n            return r[1];\n        }\n        return txt;\n    },\n    // @ts-ignore\n    \"vimeoId\": function(txt) {\n        const regExp = /^.*(vimeo\\.com\\/)((channels\\/[A-z]+\\/)|(groups\\/[A-z]+\\/videos\\/))?(\\d+)/;\n        const match = (txt || \"\").match(regExp);\n        if (match?.[5]) {\n            return match[5];\n        }\n        return txt;\n    },\n    // @ts-ignore\n    \"serveGDrive\": function(txt) {\n        // Expecting https://drive.google.com/file/d/1DDUzcFrOlzWb3CBdFPJ1NCNXClvPbm5B/preview\n        const res = (txt + \"\").match(/https:\\/\\/drive.google.com\\/file\\/d\\/([a-zA-Z0-9_]+)\\//);\n        if (res?.length) {\n            const driveId = res[1];\n            return \"https://docs.google.com/uc?export=open&id=\" + driveId;\n        }\n        return txt;\n    },\n    // @ts-ignore\n    \"removeHTML\": function(txt) {\n        return (txt || '').replace(/<[^>]*>?/gm, '');\n    },\n    // @ts-ignore\n    \"escapeHTML\": function(txt) {\n        return (txt || '').replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    },\n    // @ts-ignore\n    \"encodeHTML\": function(txt) {\n        // @ts-ignore\n        return this.encodeURIComponent(txt || \"\");\n    },\n    // @ts-ignore\n    \"escapeQuotes\": function(txt) {\n        return (txt || '').replace(/\"/gm, \"'\");\n    }\n};\n\n\nclass Builder {\n    transSeq;\n    // @ts-ignore\n    constructor(transformStr) {\n        const parts = transformStr.split('|');\n        this.transSeq = [];\n        for (let j = 0, lenj = parts.length; j < lenj; j++) {\n            const prts = parts[j].trim();\n            // @ts-ignore\n            const transfunc = Transformers[prts];\n            if (transfunc != null) {\n                this.transSeq.push(transfunc);\n            } else {\n                console.error(\"Cannot find transformer named \" + prts);\n            }\n        }\n    }\n\n    // @ts-ignore\n    reduce(text) {\n        for (let j = 0, lenj = this.transSeq.length; j < lenj; j++) {\n            const transfunc = this.transSeq[j];\n            text = transfunc(text);\n        }\n        return text;\n    }\n}\n\n/**\n * @param {string} transformStr\n * @returns {Builder} call reduce(text) function\n */\nexport function stream(transformStr) {\n    return new Builder(transformStr);\n}\n\n/**\n * @param {string} name\n * @returns {string} Replaces $ apperences by _ to make the name compatible by data attributes\n */\nexport function cleanParameterName(name) {\n    return name.replace(/\\$/g, '_');\n}\n\n/**\n * Creates a filter funcion from filterCode\n * @param {string} filterCode\n * @returns {Function?}\n */\nexport function createFilterFunction(filterCode) {\n    filterCode = filterCode.replace('<!--<widgetcode>', '').replace('</widgetcode>-->', '');\n    let userWidgetFilter = null;\n    try {\n        userWidgetFilter = new Function('text', 'tiny', 'opts', filterCode);\n    } catch (ex) {\n        userWidgetFilter = null;\n        console.error(ex);\n    }\n    return userWidgetFilter;\n}\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @param {string} widgetTemplate\n * @param {boolean} silent\n * @param {object?} mergevars\n * @returns {Promise<boolean>} - True if the filter can be compiled\n */\nexport async function applyWidgetFilter(editor, widgetTemplate, silent, mergevars) {\n    const translations = await getStrings([\n        {key: 'filterres', component: 'tiny_widgethub'},\n        {key: 'nochanges', component: 'tiny_widgethub'}\n    ]);\n    // Es tracta d'un filtre, no d'un widget i s'ha de tractar de forma diferent\n    const userWidgetFilter = createFilterFunction(widgetTemplate);\n\n    if (!userWidgetFilter) {\n        editor.notificationManager.open({\n            text: translations[0] + \": Invalid filter\",\n            type: 'danger',\n            timeout: 4000\n        });\n        return false;\n    }\n    // @ts-ignore\n    const handleFilterResult = function(res) {\n        const out = res[0];\n        let msg = res[1];\n        if (out != null) {\n            if (typeof out === \"string\") {\n                editor.setContent(out);\n                editor.notificationManager.open({\n                    text: translations[0] + \": \" + msg,\n                    type: 'success',\n                    timeout: 5000\n                });\n            } else if (out === true) {\n                editor.notificationManager.open({\n                    text: translations[0] + \": \" + msg,\n                    type: 'success',\n                    timeout: 5000\n                });\n            } else if (out === false && !silent) {\n                editor.notificationManager.open({\n                    text: translations[1],\n                    type: 'info',\n                    timeout: 4000\n                });\n            }\n        } else if (!silent) {\n            editor.notificationManager.open({\n                text: translations[1],\n                type: 'info',\n                timeout: 4000\n            });\n        }\n    };\n\n    const initialHTML = editor.getContent();\n    const filteredResult = userWidgetFilter(initialHTML, editor.dom.window, mergevars);\n    // Hi ha la possibilitat que el filtre retorni una promesa o un array\n    const isPromise = filteredResult != null && typeof (filteredResult) === 'object' && ('then' in filteredResult);\n    if (isPromise) {\n        filteredResult.then(handleFilterResult);\n    } else {\n        handleFilterResult(filteredResult || [null, translations[1]]);\n    }\n    return true;\n}\n\n/**\n * Safe conversion of a string to integer by handling errors and NaN values\n * In this case, the def number passed is returned\n * @param {string | undefined | null | number} str\n * @param {number} def - default value\n * @returns {number}\n */\nexport function convertInt(str, def) {\n    if (str && typeof str === 'number') {\n        return Math.floor(str);\n    }\n    if (!str || !(str + \"\").trim() || !RegExp(/^\\s*[+-]?\\d+(\\.\\d*)?\\s*$/).exec(str + \"\")) {\n        return def;\n    }\n    try {\n        const val = parseInt(str + \"\");\n        if (!isNaN(val)) {\n            return val;\n        }\n    } catch (ex) {\n        // Pass\n    }\n    return def;\n}\n\n/**\n * Finds the parameter with a given name within the list of objects\n * @param {string} varname\n * @param {Param[]} listVars\n * @returns {Param | null}\n */\nexport function findVariableByName(varname, listVars) {\n    if (!listVars) {\n        return null;\n    }\n    let found = null;\n    const len = listVars.length;\n    let k = 0;\n    while (k < len && !found) {\n        if (listVars[k].name === varname) {\n            found = listVars[k];\n        }\n        k++;\n    }\n    return found;\n}\n\n/**\n * Safely joins two parts of an url\n * @param {string} a\n * @param {string=} b\n * @returns {string}\n */\nexport function pathJoin(a, b) {\n    a = (a || \"\").trim();\n    b = (b || \"\").trim();\n    if (!a.endsWith('/')) {\n        a = a + '/';\n    }\n    if (b.startsWith('/')) {\n        b = b.substring(1);\n    }\n    return a + b;\n}\n\n/**\n * Adds the baseurl if the passed url does not start with http or https\n * @param {string} base\n * @param {string=} url\n * @returns {string}\n */\nexport function addBaseToUrl(base, url) {\n    url = (url || \"\").trim();\n    if (url.toLowerCase().startsWith(\"http\")) {\n        return url;\n    }\n    // Afegir la base\n    const out = pathJoin(base, url);\n    return out;\n}\n/**\n * Creates a script tag and adds it to the head section. It handles loading and error cases\n * @param {string} url\n * @param {string} [id]\n * @param {() => void} [onSuccess]\n * @param {() => void} [onError]\n */\nexport function addScript(url, id, onSuccess, onError) {\n    if (id && document.head.querySelector('script#' + id) != null) {\n        // Check if already in head\n        return;\n    }\n    const newScript = document.createElement('script');\n    newScript.type = \"text/javascript\";\n    newScript.src = url;\n    if (id) {\n        newScript.setAttribute(\"id\", id);\n    }\n    newScript.onload = () => {\n        console.info(\"Loaded \", url);\n        if (onSuccess) {\n            onSuccess();\n        }\n    };\n    newScript.onerror = function() {\n        console.error(\"Error loading \", url);\n        if (onError) {\n            onError();\n        }\n    };\n    document.head.append(newScript);\n}\n\n// @ts-ignore\nconst performCasting = function(value, type) {\n    switch (type) {\n        case (\"boolean\"):\n            if (value === 1 || value === \"1\" || value === true || value === \"true\") {\n                value = true;\n            } else {\n                value = false;\n            }\n            break;\n        case (\"number\"):\n            try {\n                value = parseInt(value);\n            } catch (ex) {\n                console.error(\"Error parsing number\", ex);\n            }\n            break;\n        case (\"string\"):\n            value = value + \"\";\n            break;\n    }\n    return value;\n};\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n */\nconst xor = function(a, b) {\n    return !a !== !b;\n};\n\n/**\n *\n * @param {JQuery<HTMLElement>} $e\n * @returns\n */\nconst bindingFactory = function($e) {\n    /** @this {Record<string, Function>} */\n    const methods = {\n        /**\n         * @param {string} className\n         * @param {string=} query\n         * @param {boolean=} neg\n         * @returns {Binding}\n         */\n        \"hasClass\": (className, query, neg) => {\n            /** @type {JQuery<HTMLElement>} */\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            return {\n                // @ts-ignore\n                getValue: () => {\n                    const res = xor(neg, elem.hasClass(className));\n                    return Boolean(res);\n                },\n                // @ts-ignore\n                setValue: (bool) => {\n                    if (xor(neg, bool)) {\n                        elem.addClass(className);\n                    } else {\n                        elem.removeClass(className);\n                    }\n                }\n            };\n        },\n        /**\n         * @param {string} className\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        notHasClass: (className, query) => {\n            return methods['hasClass'](className, query, true);\n        },\n        /**\n         * @param {string} classExpr\n         * @param {string=} castTo\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        \"classRegex\": (classExpr, castTo, query) => {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            return {\n                getValue: () => {\n                    let ret = \"\";\n                    // @ts-ignore\n                    const cl = elem.attr('class')?.split(/\\s+/) ?? [];\n                    cl.forEach(c => {\n                        const match = c.match(classExpr);\n                        if (match?.[1] && typeof (match[1]) === \"string\") {\n                            ret = match[1];\n                        }\n                    });\n                    return performCasting(ret, castTo);\n                },\n                // @ts-ignore\n                setValue: (val) => {\n                    const cl = elem.attr('class')?.split(/\\s+/) ?? [];\n                    // @ts-ignore\n                    cl.forEach(c => {\n                        if (c.match(classExpr)) {\n                            elem.removeClass(c);\n                        }\n                    });\n                    elem.addClass(classExpr.replace(\"(.*)\", val + \"\"));\n                }\n            };\n        },\n        /**\n         * @param {string} attrName\n         * @param {string=} castTo\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        \"attr\": (attrName, castTo, query) => {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            return {\n                getValue: () => {\n                    return performCasting(elem.attr(attrName), castTo);\n                },\n                // @ts-ignore\n                setValue: (val) => {\n                    if (typeof val === \"boolean\") {\n                        val = val ? 1 : 0;\n                    }\n                    return elem.attr(attrName, val + \"\");\n                }\n            };\n        },\n        /**\n         * @param {string} attr\n         * @param {string=} query\n         * @param {boolean=} neg\n         * @returns {Binding}\n         */\n        \"hasAttr\": (attr, query, neg) => {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            const parts = attr.split(\"=\");\n            const attrName = parts[0].trim();\n            let attrValue = '';\n            if (parts.length > 1) {\n                attrValue = parts[1].replace(/[\"']/g, '').trim();\n            }\n            return {\n                getValue: () => {\n                    let found = elem.attr(attrName) != null;\n                    if (attrValue) {\n                        found = found && elem.attr(attrName) === attrValue;\n                    }\n                    return xor(neg, found);\n                },\n                // @ts-ignore\n                setValue: (bool) => {\n                    if (xor(neg, bool)) {\n                        elem.attr(attrName, attrValue || '');\n                    } else {\n                        elem.removeAttr(attrName);\n                    }\n                }\n            };\n        },\n         /**\n          * @param {string} attr\n          * @param {string=} query\n          * @returns {Binding}\n          */\n        \"notHasAttr\": (attr, query) => {\n            return methods['hasAttr'](attr, query, true);\n        },\n        /**\n         * @param {string} attr - Regex of attr\n         * @param {string=} castTo\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        \"attrRegex\": function(attr, castTo, query) {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            const parts = attr.split(\"=\");\n            const attrName = parts[0].trim();\n            let attrValue = '';\n            if (parts.length > 1) {\n                attrValue = parts[1].replace(/[\"']/g, '').trim();\n            }\n            return {\n                getValue() {\n                    let found = elem.attr(attrName) != null;\n                    if (found) {\n                        const match = elem.attr(attrName)?.match(attrValue);\n                        if (match?.[1] && typeof (match[1]) === \"string\") {\n                            return performCasting(match[1], castTo);\n                        }\n                        return '';\n                    }\n                    return null;\n                },\n                // @ts-ignore\n                setValue(val) {\n                    elem.attr(attrName, attrValue.replace(\"(.*)\", val + \"\"));\n                }\n            };\n        },\n        /**\n         * @param {string} sty\n         * @param {string=} query\n         * @param {boolean=} neg\n         * @returns {Binding}\n         */\n        \"hasStyle\": function(sty, query, neg) {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            const parts = sty.split(\":\");\n            let styName = parts[0].trim();\n            let styValue = '';\n            if (parts.length > 1) {\n                styValue = parts[1].replace(/[\"']/g, '').trim();\n            }\n            return {\n                getValue() {\n                    const st = elem.prop('style');\n                    const has = st.getPropertyValue(styName) === styValue;\n                    return xor(has, neg);\n                },\n                // @ts-ignore\n                setValue(bool) {\n                    if (xor(bool, neg)) {\n                        elem.css(styName, styValue);\n                    } else {\n                        const st = elem.prop('style');\n                        st.removeProperty(styName);\n                    }\n                }\n            };\n        },\n         /**\n          * @param {string} sty\n          * @param {string=} query\n          * @returns {Binding}\n          */\n        \"notHasStyle\": (sty, query) => {\n            return methods['hasStyle'](sty, query, true);\n        },\n        /**\n         * @param {string} attr\n         * @param {string=} castTo\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        \"styleRegex\": function(attr, castTo, query) {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            const parts = attr.split(\":\");\n            const styName = parts[0].trim();\n            let styValue = '';\n            if (parts.length > 1) {\n                styValue = parts[1].replace(/[\"']/g, '').trim();\n            }\n            return {\n                getValue() {\n                    const st = elem.prop('style');\n                    const has = st.getPropertyValue(styName) != null;\n                    if (has) {\n                        const match = st.getPropertyValue(styName).match(styValue);\n                        if (match?.[1] && (typeof match[1]) === \"string\") {\n                            return performCasting(match[1], castTo);\n                        }\n                        return '';\n                    }\n                    return null;\n                },\n                // @ts-ignore\n                setValue(val) {\n                    elem.css(styName, styValue.replace(\"(.*)\", val + \"\"));\n                }\n            };\n        }\n    };\n    return methods;\n};\n\n/**\n * @typedef {Object} Binding\n * @property {() => unknown} getValue\n * @property {(value: unknown) => void} setValue\n */\n/**\n * @param {string | {get: string, set: string}} definition\n * @param {JQuery<HTMLElement>} elem  - The root of widget\n * @param {string} castTo  - The type that must be returned\n * @returns {Binding | null}\n */\nexport const createBinding = (definition, elem, castTo) => {\n    /** @type {Binding | null} */\n    let bindFn = null;\n    if (typeof (definition) === 'string') {\n        return evalInContext({...bindingFactory(elem)}, definition, true);\n    } else {\n        // The user provides the get and set functions\n        bindFn = {\n            getValue: () => {\n                let v = evalInContext({elem}, `(${definition.get})(elem)`);\n                if (castTo) {\n                    v = performCasting(v, castTo);\n                }\n                return v;\n            },\n            setValue: (v) => evalInContext({elem, v}, `(${definition.set})(elem, v)`)\n        };\n    }\n    return bindFn;\n};\n\n/**\n * Capitalizes the first letter of a string\n * @param {string | undefined | null} s\n * @returns {string}\n */\nexport const capitalize = s => (s && s[0].toUpperCase() + s.slice(1)) || \"\";\n\n/**\n * When creating a clone of an element must update all its id's\n * @param {JQuery<HTMLElement>} $e - The element to be treated\n * @param {JQuery<HTMLElement>} $target - The root element being cloned\n * @param {JQuery<HTMLElement>} $root - The root element providing the context\n * @param {Record<string, string>} idMap - A dictionary to store assigned id's\n */\nconst treatElementIds = function($e, $target, $root, idMap) {\n    const oldId = $e.prop('id');\n    if (oldId) {\n        let newId = idMap[oldId];\n        if (!newId) {\n            const ext = Math.random().toString(32).substring(2, 5);\n            newId = oldId + ext;\n            idMap[oldId] = newId;\n        }\n        $e.prop('id', newId);\n    }\n    // Does $e contain references to another elements in the $root which are not in $target?\n    ['data-target', 'data-bs-target', 'href'].forEach((dataX) => {\n        const attr = $e.attr(dataX);\n        if (attr?.startsWith(\"#\")) {\n            $e.removeClass('active show');\n            const rootRef = $root.find(attr);\n            const targetRef = $target.find(attr);\n            if (rootRef.length) {\n                if (targetRef.length) {\n                    // Simply rename property\n                    const oldId = attr.substring(1);\n                    let newId = idMap[oldId];\n                    if (!newId) {\n                        const ext = Math.random().toString(32).substring(2, 5);\n                        newId = oldId + ext;\n                        idMap[oldId] = newId;\n                    }\n                    $e.attr(dataX, \"#\" + newId);\n                } else {\n                    // (TODO: Deep cloning here?) Must clone the reference as well\n                    const newId = 'd' + Math.random().toString(32).substring(2);\n                    const clonedRef = rootRef.clone().prop(\"id\", newId);\n                    $e.prop(dataX, \"#\" + newId);\n                    clonedRef.insertAfter(rootRef).removeClass(\"active show\");\n                }\n            }\n        }\n    });\n};\n\n/**\n * @param {JQuery<HTMLElement>} $e - the element that must be cloned\n * @param {JQuery<HTMLElement>} $root - the root element (widget root)\n * @param {Record<string,string>} idMap - old vs new id map\n * @returns {JQuery<HTMLElement>} The cloned element with new id's\n */\nexport const smartClone = ($e, $root, idMap) => {\n    const clone = $e.clone();\n    treatElementIds(clone, $e, $root, idMap);\n    clone.find('*').each((_, e) => {\n        treatElementIds(jQuery(e), $e, $root, idMap);\n    });\n    return clone;\n};\n\n/**\n * @param {JQuery<HTMLElement>} $e - Look in $e and all its descendants if references any other element in $root\n * @param {JQuery<HTMLElement>} $root\n * @returns {JQuery<HTMLElement>[]} - A list of referenced elements in $e\n */\nexport function findReferences($e, $root) {\n    const searchFor = '[data-target^=\"#\"], [data-bs-target^=\"#\"], [href^=\"#\"]';\n    /** @type {HTMLElement[]} */\n    const found = [];\n    if ($e.is(searchFor)) {\n        let attr = $e.attr('data-target') ?? $e.attr('data-bs-target') ?? $e.attr('href');\n        if (attr) {\n            found.push(...$root.find(attr).toArray());\n        }\n    }\n    if (!found.length) {\n        // Look in descendants\n        const $descendants = $e.find(searchFor);\n        if ($descendants.length) {\n            let attr = $descendants.attr('data-target') ?? $descendants.attr('data-bs-target') ?? $descendants.attr('href');\n            if (attr) {\n                found.push(...$root.find(attr).toArray());\n            }\n        }\n    }\n    return found.map(e => jQuery(e));\n}"],"names":["Ejs","base","url","trim","toLowerCase","startsWith","pathJoin","id","onSuccess","onError","document","head","querySelector","newScript","createElement","type","src","setAttribute","onload","console","info","onerror","error","append","editor","widgetTemplate","silent","mergevars","translations","key","component","userWidgetFilter","createFilterFunction","notificationManager","open","text","timeout","handleFilterResult","res","out","msg","setContent","initialHTML","getContent","filteredResult","dom","window","then","name","replace","str","def","Math","floor","RegExp","exec","val","parseInt","isNaN","ex","$e","$root","searchFor","found","is","attr","push","find","toArray","length","$descendants","map","e","varname","listVars","len","k","s","h","l","i","charCodeAt","abs","str1","needle","indexOf","transformStr","Builder","Shared","currentScope","_document$querySelect","activatePopup","globalConfig","genID","random","toString","substring","evalInContext","ctx","expr","keepFns","listArgs","listVals","Object","keys","forEach","Function","evaluator","defineVar","ctx2","pos","varvalue","templateRendererMustache","template","context","render","condition","dict","components","split","dim","maxValues","Array","loopVars","total","cc","parts","unshift","String","fromCharCode","cname","dm","output","_ei","Mustache","incrUp","currentDim","oldValue","newValue","join","loopvar","maxIter","applyMustacheHelpers","templateRendererEJS","I18n","lang","wordKey","Promise","resolve","reject","require","ejsModule","templateRenderer","engine","includes","tmpl","constructor","widget","partials","parameters","param","partial","value","options","_param$options","v","this","category","insertquery","selectors","unwrap","version","instructions","instructionsParsed","decodeURIComponent","defaults","obj","defaultsCopy","toInterpolate","assign","isFor","userId","hidden","grantStr","for","allowMode","grantList","isUsableInScope","scope","widgetScopes","isFilter","hasBindings","filter","undefined","bind","prop","UserStorage","_userId","_courseId","_localStore","_sessionStore","STORE_KEY","courseId","_instances","valors","searchtext","loadStore","localStorage","txt","getItem","JSON","parse","sessionStorage","txt2","getFromLocal","defaultValue","MLSC","MLS","getFromSession","saveStore","setItem","stringify","setToLocal","persist","theValueMap","theKey","setToSession","Transformers","toUpperCase","r","match","encodeURIComponent","transSeq","j","lenj","prts","transfunc","reduce","filterCode","a","b","endsWith","performCasting","xor","bindingFactory","methods","className","query","neg","elem","getValue","hasClass","Boolean","setValue","bool","addClass","removeClass","notHasClass","classExpr","castTo","ret","c","attrName","attrValue","removeAttr","_elem$attr3","sty","styName","styValue","has","getPropertyValue","css","removeProperty","st","definition","bindFn","get","set","slice","treatElementIds","$target","idMap","oldId","newId","dataX","rootRef","targetRef","clonedRef","clone","insertAfter","each","_"],"mappings":"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"}