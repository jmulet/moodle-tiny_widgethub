{"version":3,"file":"util.min.js","sources":["../src/util.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable max-len */\n/* eslint-disable no-eq-null */\n/* eslint-disable no-bitwise */\n/* eslint-disable no-new-func */\n/* eslint-disable dot-notation */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Mustache from 'core/mustache';\nimport { get_strings as getStrings } from 'core/str';\n\n// Load on demand the template engines\n/**\n * @typedef {Object} EJS\n * @property {(template: string, ctx: Object.<string,any>) => string} render\n */\n/** @type {EJS} */\nlet Ejs;\n/**\n * @returns {Promise<EJS>}\n */\nfunction getEJS() {\n    if (Ejs) {\n        return Promise.resolve(Ejs);\n    }\n    return new Promise((resolve, reject) => {\n        // @ts-ignore\n        require(['tiny_widgethub/ejs-lazy'], (ejsModule) => {\n            Ejs = ejsModule;\n            resolve(Ejs);\n        }, reject);\n    });\n}\n\n/**\n * @typedef {object} Shared\n * @property {string} currentScope\n * @property {string} SNPT_MODE\n * @property {object} globalConfig\n * @const\n */\nlet activatePopup = true;\nexport const Shared = {\n    // In which type of activity the editor is being used\n    currentScope: document.querySelector('body')?.id,\n    // Whether to activate the contextual popup or not\n    activatePopup: activatePopup,\n    // Hold other global configuration\n    globalConfig: {}\n};\n\n/**\n * @returns {string} a randomID\n */\nexport function genID() {\n    return 'g' + Math.random().toString(32).substring(2);\n}\n\n/**\n * @param {Object.<string, any>} ctx\n * @param {string} expr\n * @param {boolean=} keepFns - Keep or not the funcions in the ctx\n * @returns {any} The evaluated expression within the context ctx\n */\nexport function evalInContext(ctx, expr, keepFns) {\n    const listArgs = [];\n    const listVals = [];\n\n    if (ctx) {\n        Object.keys(ctx).forEach((key) => {\n            // Remove functions from ctx\n            if (keepFns || typeof ctx[key] !== \"function\") {\n                listArgs.push(key);\n                listVals.push(ctx[key]);\n            }\n        });\n    }\n    listArgs.push('expr');\n    listArgs.push('return eval(expr)');\n    listVals.push(expr);\n    console.log('listArgs', listArgs);\n    console.log('expr', expr, 'listVals', listVals);\n\n    const evaluator = new Function(...listArgs);\n    return evaluator(...listVals);\n}\n\n/**\n * @param {string} text\n * @param {Object.<string, any>} ctx2\n * @returns {string}\n */\nconst defineVar = function (text, ctx2) {\n    const pos = text.indexOf(\"=\");\n    const varname = text.substring(0, pos).trim();\n    const varvalue = evalInContext(ctx2, text.substring(pos + 1).trim());\n    ctx2[varname] = varvalue;\n    return varname;\n};\n\n/**\n * Extends Mustache templates with some helpers\n * @param {Object.<string, any>} ctx\n * @param {Object.<string, Object.<string, string>>} translations\n */\nconst applyMustacheHelpers = function (ctx, translations) {\n\n    ctx[\"if\"] = () =>\n        /**\n         * @param {string} text\n         * @param {Mustache.render} render\n         */\n        function (text, render) {\n            const pos = text.indexOf(\"]\");\n            const condition = text.substring(0, pos).trim().substring(1);\n            const show = evalInContext(ctx, condition);\n            if (show) {\n                return render(text.substring(pos + 1).trim());\n            }\n            return \"\";\n        };\n    ctx[\"var\"] = () =>\n        /**\n        * @param {string} text\n        */\n        function (text) {\n            defineVar(text, ctx);\n        };\n    ctx[\"eval\"] = () =>\n        /**\n         * @param {string} text\n         */\n        function (text) {\n            return evalInContext(ctx, text) + \"\";\n        };\n    ctx[\"I18n\"] = () =>\n        /**\n         * @param {string} text\n         * @param {Mustache.render} render\n         */\n        function (text, render) {\n            const key = render(text).trim();\n            const dict = translations[key] || {};\n            return dict[ctx[\"LANG\"]] || dict[\"en\"] || dict[\"ca\"] || key;\n        };\n    ctx[\"each\"] = () =>\n        /**\n         * @param {string} text\n         */\n        function (text) {\n            const pos = text.indexOf(\"]\");\n            const cond = text.substring(0, pos).trim().substring(1);\n            const components = cond.split(\",\");\n            const dim = components.length;\n            const maxValues = new Array(dim);\n            const loopVars = new Array(dim);\n            let total = 1;\n            const cc = 'i'.charCodeAt(0);\n            components.forEach((def, i) => {\n                const parts = def.split(\"=\");\n                if (parts.length === 1) {\n                    parts.unshift(String.fromCharCode(cc + i));\n                }\n                const cname = parts[0].trim();\n                loopVars[i] = cname;\n                const dm = evalInContext(ctx, parts[1]);\n                total = total * dm;\n                maxValues[i] = dm;\n                ctx[cname] = 1;\n            });\n            let output = [];\n            for (let _ei = 0; _ei < total; _ei++) {\n                // @ts-ignore\n                output.push(Mustache.render(text.substring(pos + 1), ctx));\n                let currentDim = dim - 1;\n                let incrUp;\n                do {\n                    const oldValue = ctx[loopVars[currentDim]] - 1;\n                    const newValue = (oldValue + 1) % maxValues[currentDim] + 1;\n                    ctx[loopVars[currentDim]] = newValue;\n                    incrUp = newValue < oldValue;\n                    currentDim--;\n                } while (currentDim >= 0 && incrUp);\n            }\n            return output.join('');\n        };\n    ctx[\"for\"] = () =>\n        /**\n        * @param {string} text\n        */\n        function (text) {\n            const pos = text.indexOf(\"]\");\n            const condition = text.substring(0, pos).trim().substring(1);\n            const parts = condition.split(\";\");\n            const loopvar = defineVar(parts[0], ctx);\n            let output = \"\";\n            let maxIter = 0; // Prevent infinite loop imposing a limit of 1000\n            while (evalInContext(ctx, parts[1]) && maxIter < 1000) {\n                // @ts-ignore\n                output += Mustache.render(text.substring(pos + 1), ctx);\n                if (parts.length === 3 && parts[2].trim()) {\n                    defineVar(loopvar + \"=\" + parts[2], ctx);\n                } else {\n                    ctx[loopvar] = ctx[loopvar] + 1;\n                }\n                maxIter++;\n            }\n            return output;\n        };\n};\n\n/**\n * @param {string} template\n * @param {Object.<string, any>} context\n * @param {Object.<string, Object.<string, string>>} [translations]\n * @returns {string} The interpolated template given a context and translations map\n */\nexport function templateRendererMustache(template, context, translations) {\n    const ctx = { ...context };\n    Object.keys(ctx).forEach(key => {\n        if (ctx[key] === \"$RND\") {\n            ctx[key] = genID();\n        }\n    });\n    applyMustacheHelpers(ctx, translations ?? {});\n    // @ts-ignore\n    return Mustache.render(template, ctx);\n}\n\n\n/**\n * @param {string} template\n * @param {Object.<string, any>} context\n * @param {Object.<string, Object.<string, any>>} translations\n * @returns {Promise<string>} The interpolated template given a context and translations map\n */\nasync function templateRendererEJS(template, context, translations) {\n    /** @type {Object.<string, any>} */\n    const ctx = { ...context, I18n: {} };\n    Object.keys(ctx).forEach(key => {\n        if (ctx[key] === \"$RND\") {\n            ctx[key] = genID();\n        }\n    });\n    const lang = ctx[\"LANG\"];\n    for (let wordKey in translations) {\n        const dict = translations[wordKey];\n        ctx[\"I18n\"][wordKey] = dict[lang] || dict[\"en\"] || dict[\"es\"] || wordKey;\n    }\n    const _ejs = await getEJS();\n    return _ejs.render(template, ctx);\n}\n\n/**\n * @param {string} template\n * @param {Object.<string, any>} context\n * @param {Object.<string, Object.<string, any>>} translations\n * @param {string=} engine - (ejs | mustache) optional\n * @returns {Promise<string>} - The interpolated template given a context and translations map\n */\nexport function templateRenderer(template, context, translations, engine) {\n    if (!engine) {\n        engine = template.includes(\"<%\") ? \"ejs\" : \"mustache\";\n    }\n    if (engine === \"ejs\") {\n        return templateRendererEJS(template, context, translations);\n    }\n    // Default to Mustache\n    const tmpl = templateRendererMustache(template, context, translations);\n    return Promise.resolve(tmpl);\n}\n\n/**\n * @typedef {Object} ParamOption\n * @property {string} l\n * @property {string} v\n */\n/**\n * @typedef {Object} Param\n * @property {string=} partial\n * @property {string} name\n * @property {string} title\n * @property {'textfield' | 'numeric' | 'checkbox' | 'select' | 'textarea' | 'image' | 'color'} [type]\n * @property {(ParamOption | string)[]} [options]\n * @property {any} value\n * @property {string=} tip\n * @property {string=} tooltip\n * @property {number=} min\n * @property {number=} max\n * @property {string=} transform\n * @property {string | {get: string, set: string} } [bind]\n * @property {string=} when\n * @property {boolean} [hidden]\n * @property {boolean} [editable]\n */\n/**\n * @typedef {Object} Action\n * @property {string} predicate\n * @property {string} actions\n */\n/**\n * @typedef {Object} Widget\n * @property {number} id\n * @property {string} key\n * @property {string} category\n * @property {string=} scope - Regex for idenfying allowed body ids\n * @property {string} name\n * @property {string=} instructions\n * @property {'mustache' | 'ejs'} [engine]\n * @property {string} template\n * @property {Param[]=} parameters\n * @property {Object.<string, Object<string, string>>} [I18n]\n * @property {string | string[]} [selectors]\n * @property {string=} insertquery\n * @property {string=} unwrap\n * @property {string=} for\n * @property {string} version\n * @property {string} author\n * @property {boolean=} hidden\n * @property {Action[]} [contextmenu]\n */\n/**\n * @class\n * @classdesc Wrapper for Widget definition\n */\nexport class WidgetWrapper {\n    #widget;\n    #instructionsParsed = false;\n\n    /**\n     * @param {Widget} widget\n     * @param {Object.<string, any>} partials\n     */\n    constructor(widget, partials) {\n        this.#widget = widget;\n        const parameters = widget.parameters;\n        if (!parameters) {\n            return;\n        }\n        // Do some fixes on parameters\n        parameters.forEach((param, i) => {\n            // Case of a partial\n            if (param.partial) {\n                if (!partials[param.partial]) {\n                    console.error(\"Cannot find partial for \", param.partial, partials);\n                    return;\n                }\n                parameters[i] = partials[param.partial];\n            }\n            if (!param.type) {\n                // Infer type from value\n                if (typeof param.value === \"boolean\") {\n                    param.type = 'checkbox';\n                } else if (typeof param.value === \"number\") {\n                    param.type = 'numeric';\n                } else if (typeof param.value === \"string\") {\n                    param.type = param.options ? 'select' : 'textfield';\n                }\n            }\n        });\n    }\n    /**\n     * @returns {string}\n     */\n    get name() {\n        return this.#widget.name;\n    }\n    /**\n     * @returns {string}\n     */\n    get key() {\n        return this.#widget.key;\n    }\n    /**\n     * @returns {Object}\n     */\n    get I18n() {\n        return this.#widget.I18n || {};\n    }\n    /**\n     * @returns {string}\n     */\n    get template() {\n        return this.#widget.template;\n    }\n    /**\n     * @returns {string}\n     */\n    get category() {\n        return this.#widget.category ?? \"MISC\";\n    }\n    /**\n     * @returns {string=}\n     */\n    get insertquery() {\n        return this.#widget.insertquery;\n    }\n    /**\n     * @returns {string | string[] =}\n     */\n    get selectors() {\n        return this.#widget.selectors;\n    }\n    /**\n     * @returns {string=}\n     */\n    get unwrap() {\n        return this.#widget.unwrap;\n    }\n    /**\n     * @returns {string}\n    */\n    get version() {\n        return this.#widget.version || \"1.0.0\";\n    }\n    /**\n     * @returns {string}\n     */\n    get instructions() {\n        if (this.#widget.instructions && !this.#instructionsParsed) {\n            this.#widget.instructions = decodeURIComponent(this.#widget.instructions);\n            this.#instructionsParsed = true;\n        }\n        return this.#widget.instructions ?? '';\n    }\n    /**\n     * @returns {Param[]}\n     */\n    get parameters() {\n        return this.#widget.parameters ?? [];\n    }\n    /**\n     * @returns {Object.<string, any>}\n     */\n    get defaults() {\n        /** @type {Object.<string, any> } */\n        const obj = {};\n        this.parameters.forEach((param) => {\n            obj[param.name] = param.value;\n        });\n        return obj;\n    }\n    /**\n     * @param {object} ctx\n     * @returns {Promise<string>} The rendered template\n     */\n    render(ctx) {\n        const defaultsCopy = { ...this.defaults };\n        const toInterpolate = Object.assign(defaultsCopy, ctx || {});\n        // Decide which template engine to use\n        let engine = this.#widget.engine;\n        return templateRenderer(this.template ?? \"\", toInterpolate,\n            this.#widget.I18n ?? {}, engine);\n    }\n    /**\n     * @param {number} userId\n     * @returns {boolean}\n     */\n    isFor(userId) {\n        // These are administrators\n        if (this.#widget.hidden === true) {\n            return false;\n        }\n        let grantStr = (this.#widget.for || '').trim();\n        if (grantStr === '' || grantStr === '*' || userId <= 2) {\n            return true;\n        }\n        let allowMode = true;\n        if (grantStr.startsWith('-')) {\n            allowMode = false;\n        }\n        grantStr = grantStr.replace(/[+\\- ]/g, '');\n        const grantList = grantStr.split(\",\");\n        const isAllowed = (allowMode && grantList.indexOf(userId + \"\") >= 0) || (!allowMode && grantList.indexOf(userId + \"\") < 0);\n        return isAllowed;\n    }\n    /**\n     * @param {string=} scope\n     * @returns {boolean}\n     */\n    isUsableInScope(scope) {\n        scope = scope ?? Shared.currentScope ?? '';\n        const widgetScopes = this.#widget.scope;\n        if (!scope || !widgetScopes || widgetScopes === \"*\") {\n            return true;\n        }\n        const regex = new RegExp(widgetScopes);\n        return regex.exec(scope) != null;\n    }\n    /**\n     * @returns {boolean}\n     */\n    isFilter() {\n        return this.category?.toLowerCase() === \"filtres\";\n    }\n    /**\n     * @returns {boolean}\n     */\n    hasBindings() {\n        return this.parameters.filter(param => param.bind !== undefined).length > 0;\n    }\n    /**\n     * Recovers the property value named name of the original definition\n     * @param {string} name\n     * @returns {*}\n     */\n    prop(name) {\n        // @ts-ignore\n        return this.#widget[name];\n    }\n}\n\n/**\n * @param {string} s - string to the hashed\n * @returns {number}\n */\nexport function hashCode(s) {\n    s = s || \"\";\n    let h = 0;\n    const l = s.length;\n    let i = 0;\n    if (l > 0) {\n        while (i < l) {\n            h = (h << 6) + ((s.charCodeAt(i) - 65) | 0);\n            i++;\n        }\n    }\n    return Math.abs(h);\n}\n\n/**\n * @class\n * @classdesc Defines local and session storage classes for a given context (user & course)\n */\nexport class UserStorage {\n    static _instances = {};\n    _userId = 0;\n    _courseId = 0;\n    _localStore;\n    _sessionStore;\n    STORE_KEY;\n    /**\n     * @param {number} userId\n     * @param {number} courseId\n     * @static\n     * @returns {UserStorage} - The instance\n     */\n    static getInstance(userId, courseId) {\n        const key = userId + \"_\" + courseId;\n        // @ts-ignore\n        if (!UserStorage._instances[key]) {\n            // @ts-ignore\n            UserStorage._instances[key] = new UserStorage(userId, courseId);\n        }\n        // @ts-ignore\n        return UserStorage._instances[key];\n    }\n    // Private constructor\n    // @ts-ignore\n    constructor(userId, courseId) {\n        this._userId = userId;\n        this._courseId = courseId;\n        this.STORE_KEY = \"iedib-widgets_\" + userId;\n        this._localStore = { valors: {} };\n        this._sessionStore = { searchtext: '' };\n        this.loadStore();\n    }\n    /**\n     * @returns {void}\n     */\n    loadStore() {\n        if (typeof window.localStorage !== 'undefined') {\n            const txt = window.localStorage.getItem(this.STORE_KEY);\n            if (txt) {\n                try {\n                    this._localStore = JSON.parse(txt);\n                } catch (ex) {\n                    console.error(ex);\n                }\n            }\n        }\n        // Added storage for this _course\n        // @ts-ignore\n        if (!this._localStore[\"_\" + this._courseId]) {\n            // @ts-ignore\n            this._localStore[\"_\" + this._courseId] = {};\n        }\n        if (typeof window.sessionStorage !== 'undefined') {\n            const txt2 = window.sessionStorage.getItem(this.STORE_KEY);\n            if (txt2) {\n                try {\n                    this._sessionStore = JSON.parse(txt2);\n                } catch (ex) {\n                    console.error(ex);\n                }\n            }\n        }\n    }\n    /**\n     * @template T\n     * @param {string} key\n     * @param {T} defaultValue\n     * @returns {T}\n     */\n    getFromLocal(key, defaultValue) {\n        if (!this._localStore) {\n            return defaultValue;\n        }\n        // @ts-ignore\n        const MLSC = this._localStore[\"_\" + this._courseId]; // Almost everything goes here\n        const MLS = this._localStore; // Only configuration params\n        if (MLSC) {\n            // @ts-ignore\n            return MLSC[key] || MLS[key] || defaultValue;\n        } else if (MLS) {\n            // @ts-ignore\n            return MLS[key] || defaultValue;\n        }\n        return defaultValue;\n    }\n    /**\n     * @template T\n     * @param {string} key\n     * @param {T} defaultValue\n     * @returns {T}\n     */\n    getFromSession(key, defaultValue) {\n        // @ts-ignore\n        return (this._sessionStore[key] != null ? this._sessionStore[key] : defaultValue);\n    }\n    /**\n     * @param {'local' | 'session' | undefined} type\n     */\n    saveStore(type) {\n        if (type === 'local' && typeof window.localStorage !== 'undefined') {\n            window.localStorage.setItem(this.STORE_KEY, JSON.stringify(this._localStore));\n        } else if (type === 'session' && typeof window.sessionStorage !== 'undefined') {\n            window.sessionStorage.setItem(this.STORE_KEY, JSON.stringify(this._sessionStore));\n        } else if (type == null) {\n            if (typeof window.localStorage !== 'undefined') {\n                window.localStorage.setItem(this.STORE_KEY, JSON.stringify(this._localStore));\n            }\n            if (typeof window.sessionStorage !== 'undefined') {\n                window.sessionStorage.setItem(this.STORE_KEY, JSON.stringify(this._sessionStore));\n            }\n        }\n    }\n    /**\n     * @template T\n     * @param {string} key\n     * @param {T} value\n     * @param {boolean} persist\n     * @returns {void}\n     */\n    setToLocal(key, value, persist) {\n        if (this._localStore == null) {\n            return;\n        }\n        // @ts-ignore\n        const MLSC = this._localStore[\"_\" + this._courseId]; // Almost everything goes here\n        const MLS = this._localStore; // Only configuration params\n\n        // @ts-ignore\n        if (typeof (theValueMap) === 'object') {\n            if (MLSC && key === 'saveall_data' || key === 'valors') {\n                MLSC[key] = MLSC[key] || {};\n            } else {\n                // @ts-ignore\n                MLS[key] = MLS[key] || {};\n            }\n            // @ts-ignore\n            const keys = Object.keys(value);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const theKey = keys[i];\n                // @ts-ignore\n                const val = value[theKey];\n                if (MLSC && key === 'saveall_data' || key === 'valors') {\n                    MLSC[key][theKey] = val;\n                } else {\n                    // @ts-ignore\n                    MLS[key][theKey] = val;\n                }\n            }\n        } else {\n            // @ts-ignore\n            MLS[key] = value;\n        }\n        if (persist) {\n            this.saveStore(\"local\");\n        }\n    }\n    /**\n     * @template T\n     * @param {string} key\n     * @param {T} value\n     * @param {boolean} persist\n     * @returns {void}\n     */\n    setToSession(key, value, persist) {\n        if (typeof (value) === 'object') {\n            // @ts-ignore\n            this._sessionStore[key] = this._sessionStore[key] || {};\n            // @ts-ignore\n            const keys = Object.keys(value);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const theKey = keys[i];\n                // @ts-ignore\n                const val = value[theKey];\n                // @ts-ignore\n                this._sessionStore[key][theKey] = val;\n            }\n        } else {\n            // @ts-ignore\n            this._sessionStore[key] = value;\n        }\n        if (persist) {\n            this.saveStore(\"session\");\n        }\n    }\n\n}\n\n\n/**\n * @param {string} str1\n * @param {string} needle\n * @returns {boolean} Whether str1 contains needle or not\n */\nexport function searchComp(str1, needle) {\n    str1 = (str1 || '').trim().toLowerCase();\n    needle = (needle || '').trim().toLowerCase();\n    str1 = str1.replace(/[àáâãäå]/, \"a\")\n        .replace(/[èéêë]/, \"e\")\n        .replace(/[ìíîï]/, \"i\")\n        .replace(/[òóôö]/, \"o\")\n        .replace(/[ùúüû]/, \"u\")\n        .replace(/ç/, \"c\")\n        .replace(/·/, \"\");\n    needle = needle.replace(/[àáâãäå]/, \"a\")\n        .replace(/[èéêë]/, \"e\")\n        .replace(/[ìíîï]/, \"i\")\n        .replace(/[òóôö]/, \"o\")\n        .replace(/[ùúüû]/, \"u\")\n        .replace(/ç/, \"c\")\n        .replace(/·/, \"\");\n    return str1.indexOf(needle) >= 0;\n}\n\n/** Default transformers */\nconst Transformers = {\n    // @ts-ignore\n    \"toUpperCase\": function (txt) {\n        return (txt + \"\").toUpperCase();\n    },\n    // @ts-ignore\n    \"toLowerCase\": function (txt) {\n        return (txt + \"\").toLowerCase();\n    },\n    // @ts-ignore\n    \"trim\": function (txt) {\n        return (txt + \"\").trim();\n    },\n    // @ts-ignore\n    \"ytId\": function (txt) {\n        // Finds the youtubeId in a text\n        const rx = /^.*(?:(?:youtu\\.be\\/|v\\/|vi\\/|u\\/\\w\\/|embed\\/|shorts\\/)|(?:(?:watch)?\\?v(?:i)?=|&v(?:i)?=))([^#&?]*).*/;\n        const r = (txt || '').match(rx);\n        if (r?.length) {\n            return r[1];\n        }\n        return txt;\n    },\n    // @ts-ignore\n    \"vimeoId\": function (txt) {\n        const regExp = /^.*(vimeo\\.com\\/)((channels\\/[A-z]+\\/)|(groups\\/[A-z]+\\/videos\\/))?(\\d+)/;\n        const match = (txt || \"\").match(regExp);\n        if (match?.[5]) {\n            return match[5];\n        }\n        return txt;\n    },\n    // @ts-ignore\n    \"serveGDrive\": function (txt) {\n        // Expecting https://drive.google.com/file/d/1DDUzcFrOlzWb3CBdFPJ1NCNXClvPbm5B/preview\n        const res = (txt + \"\").match(/https:\\/\\/drive.google.com\\/file\\/d\\/([a-zA-Z0-9_]+)\\//);\n        if (res?.length) {\n            const driveId = res[1];\n            return \"https://docs.google.com/uc?export=open&id=\" + driveId;\n        }\n        return txt;\n    },\n    // @ts-ignore\n    \"removeHTML\": function (txt) {\n        return (txt || '').replace(/<[^>]*>?/gm, '');\n    },\n    // @ts-ignore\n    \"escapeHTML\": function (txt) {\n        return (txt || '').replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    },\n    // @ts-ignore\n    \"encodeHTML\": function (txt) {\n        // @ts-ignore\n        return this.encodeURIComponent(txt || \"\");\n    },\n    // @ts-ignore\n    \"escapeQuotes\": function (txt) {\n        return (txt || '').replace(/\"/gm, \"'\");\n    }\n};\n\n\nclass Builder {\n    transSeq;\n    // @ts-ignore\n    constructor(transformStr) {\n        const parts = transformStr.split('|');\n        this.transSeq = [];\n        for (let j = 0, lenj = parts.length; j < lenj; j++) {\n            const prts = parts[j].trim();\n            // @ts-ignore\n            const transfunc = Transformers[prts];\n            if (transfunc != null) {\n                this.transSeq.push(transfunc);\n            } else {\n                console.error(\"Cannot find transformer named \" + prts);\n            }\n        }\n    }\n\n    // @ts-ignore\n    reduce(text) {\n        for (let j = 0, lenj = this.transSeq.length; j < lenj; j++) {\n            const transfunc = this.transSeq[j];\n            text = transfunc(text);\n        }\n        return text;\n    }\n}\n\n/**\n * @param {string} transformStr\n * @returns {Builder} call reduce(text) function\n */\nexport function stream(transformStr) {\n    return new Builder(transformStr);\n}\n\n/**\n * @param {string} name\n * @returns {string} Replaces $ apperences by _ to make the name compatible by data attributes\n */\nexport function cleanParameterName(name) {\n    return name.replace(/\\$/g, '_');\n}\n\n/**\n * Creates a filter funcion from filterCode\n * @param {string} filterCode\n * @returns {Function?}\n */\nexport function createFilterFunction(filterCode) {\n    filterCode = filterCode.replace('<!--<widgetcode>', '').replace('</widgetcode>-->', '');\n    let userWidgetFilter = null;\n    try {\n        userWidgetFilter = new Function('text', 'tiny', 'opts', filterCode);\n    } catch (ex) {\n        userWidgetFilter = null;\n        console.error(ex);\n    }\n    return userWidgetFilter;\n}\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @param {string} widgetTemplate\n * @param {boolean} silent\n * @param {object?} mergevars\n * @returns {Promise<boolean>} - True if the filter can be compiled\n */\nexport async function applyWidgetFilter(editor, widgetTemplate, silent, mergevars) {\n    const translations = await getStrings([\n        { key: 'filterres', component: 'tiny_widgethub' },\n        { key: 'nochanges', component: 'tiny_widgethub' }\n    ]);\n    // Es tracta d'un filtre, no d'un widget i s'ha de tractar de forma diferent\n    const userWidgetFilter = createFilterFunction(widgetTemplate);\n\n    if (!userWidgetFilter) {\n        editor.notificationManager.open({\n            text: translations[0] + \": Invalid filter\",\n            type: 'danger',\n            timeout: 4000\n        });\n        return false;\n    }\n    // @ts-ignore\n    const handleFilterResult = function (res) {\n        const out = res[0];\n        let msg = res[1];\n        if (out != null) {\n            if (typeof out === \"string\") {\n                editor.setContent(out);\n                editor.notificationManager.open({\n                    text: translations[0] + \": \" + msg,\n                    type: 'success',\n                    timeout: 5000\n                });\n            } else if (out === true) {\n                editor.notificationManager.open({\n                    text: translations[0] + \": \" + msg,\n                    type: 'success',\n                    timeout: 5000\n                });\n            } else if (out === false && !silent) {\n                editor.notificationManager.open({\n                    text: translations[1],\n                    type: 'info',\n                    timeout: 4000\n                });\n            }\n        } else if (!silent) {\n            editor.notificationManager.open({\n                text: translations[1],\n                type: 'info',\n                timeout: 4000\n            });\n        }\n    };\n\n    const initialHTML = editor.getContent();\n    const filteredResult = userWidgetFilter(initialHTML, editor.dom.window, mergevars);\n    // Hi ha la possibilitat que el filtre retorni una promesa o un array\n    const isPromise = filteredResult != null && typeof (filteredResult) === 'object' && ('then' in filteredResult);\n    if (isPromise) {\n        filteredResult.then(handleFilterResult);\n    } else {\n        handleFilterResult(filteredResult || [null, \"El filter no ha produït canvis\"]);\n    }\n    return true;\n}\n\n/**\n * Safe conversion of a string to integer by handling errors and NaN values\n * In this case, the def number passed is returned\n * @param {string | undefined | null | number} str\n * @param {number} def - default value\n * @returns {number}\n */\nexport function convertInt(str, def) {\n    if (str && typeof str === 'number') {\n        return Math.floor(str);\n    }\n    if (!str || !(str + \"\").trim() || !(str + \"\").match(/^\\s*[+-]?\\d+(\\.\\d*)?\\s*$/)) {\n        return def;\n    }\n    try {\n        const val = parseInt(str + \"\");\n        if (!isNaN(val)) {\n            return val;\n        }\n    } catch (ex) {\n        // Pass\n    }\n    return def;\n}\n\n/**\n * Finds the parameter with a given name within the list of objects\n * @param {string} varname\n * @param {Param[]} listVars\n * @returns {Param | null}\n */\nexport function findVariableByName(varname, listVars) {\n    if (!listVars) {\n        return null;\n    }\n    let found = null;\n    const len = listVars.length;\n    let k = 0;\n    while (k < len && !found) {\n        if (listVars[k].name === varname) {\n            found = listVars[k];\n        }\n        k++;\n    }\n    return found;\n}\n\n/**\n * Safely joins two parts of an url\n * @param {string} a\n * @param {string?} b\n * @returns {string}\n */\nexport function pathJoin(a, b) {\n    a = (a || \"\").trim();\n    b = (b || \"\").trim();\n    if (!a.endsWith('/')) {\n        a = a + '/';\n    }\n    if (b.startsWith('/')) {\n        b = b.substring(1);\n    }\n    return a + b;\n}\n\n/**\n * Adds the baseurl if the passed url does not start with http or https\n * @param {string} base\n * @param {string?} url\n * @returns {string}\n */\nexport function addBaseToUrl(base, url) {\n    url = (url || \"\").trim();\n    if (url.toLowerCase().startsWith(\"http\")) {\n        return url;\n    }\n    // Afegir la base\n    const out = pathJoin(base, url);\n    return out;\n}\n/**\n * Creates a script tag and adds it to the head section. It handles loading and error cases\n * @param {string} url\n * @param {string} [id]\n * @param {() => void} [onSuccess]\n * @param {() => void} [onError]\n */\nexport function addScript(url, id, onSuccess, onError) {\n    if (id && document.head.querySelector('script#' + id) != null) {\n        // Check if already in head\n        return;\n    }\n    const newScript = document.createElement('script');\n    newScript.type = \"text/javascript\";\n    newScript.src = url;\n    if (id) {\n        newScript.setAttribute(\"id\", id);\n    }\n    newScript.onload = () => {\n        console.info(\"Loaded \", url);\n        if (onSuccess) {\n            onSuccess();\n        }\n    };\n    newScript.onerror = function () {\n        console.error(\"Error loading \", url);\n        if (onError) {\n            onError();\n        }\n    };\n    document.head.append(newScript);\n}\n\n// @ts-ignore\nconst performCasting = function (value, type) {\n    switch (type) {\n        case (\"boolean\"):\n            if (value === 1 || value === \"1\" || value === true || value === \"true\") {\n                value = true;\n            } else {\n                value = false;\n            }\n            break;\n        case (\"number\"):\n            try {\n                value = parseInt(value);\n            } catch (ex) {\n                console.error(\"Error parsing number\", ex);\n            }\n            break;\n        case (\"string\"):\n            value = value + \"\";\n            break;\n    }\n    return value;\n};\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n */\nconst xor = function(a, b) {\n    return !a !== !b;\n};\n\n/**\n *\n * @param {JQuery<HTMLElement>} $e\n * @returns\n */\nconst bindingFactory = function($e) {\n    /** @this {Record<string, Function>} */\n    const methods = {\n        /**\n         * @param {string} className\n         * @param {string=} query\n         * @param {boolean=} neg\n         * @returns {Binding}\n         */\n        \"hasClass\": (className, query, neg) => {\n            /** @type {JQuery<HTMLElement>} */\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            return {\n                // @ts-ignore\n                getValue: () => {\n                    const res = xor(neg, elem.hasClass(className));\n                    return Boolean(res);\n                },\n                // @ts-ignore\n                setValue: (bool) => {\n                    if (xor(neg, bool)) {\n                        elem.addClass(className);\n                    } else {\n                        elem.removeClass(className);\n                    }\n                }\n            };\n        },\n        /**\n         * @param {string} className\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        notHasClass: (className, query) => {\n            return methods['hasClass'](className, query, true);\n        },\n        /**\n         * @param {string} classExpr\n         * @param {string=} castTo\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        \"classRegex\": (classExpr, castTo, query) => {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            return {\n                getValue: () => {\n                    let ret = \"\";\n                    // @ts-ignore\n                    const cl = elem.attr('class')?.split(/\\s+/) ?? [];\n                    cl.forEach(c => {\n                        const match = c.match(classExpr);\n                        if (match?.[1] && typeof (match[1]) === \"string\") {\n                            ret = match[1];\n                        }\n                    });\n                    return performCasting(ret, castTo);\n                },\n                // @ts-ignore\n                setValue: (val) => {\n                    const cl = elem.attr('class')?.split(/\\s+/) ?? [];\n                    // @ts-ignore\n                    cl.forEach(c => {\n                        if (c.match(classExpr)) {\n                            elem.removeClass(c);\n                        }\n                    });\n                    elem.addClass(classExpr.replace(\"(.*)\", val + \"\"));\n                }\n            };\n        },\n        /**\n         * @param {string} attrName\n         * @param {string=} castTo\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        \"attr\": (attrName, castTo, query) => {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            return {\n                getValue: () => {\n                    return performCasting(elem.attr(attrName), castTo);\n                },\n                // @ts-ignore\n                setValue: (val) => {\n                    if (typeof val === \"boolean\") {\n                        val = val ? 1 : 0;\n                    }\n                    return elem.attr(attrName, val + \"\");\n                }\n            };\n        },\n        /**\n        * @param {string} attr\n        * @param {string=} query\n        * @param {boolean=} neg\n        * @returns {Binding}\n        */\n        \"hasAttr\": (attr, query, neg) => {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            const parts = attr.split(\"=\");\n            const attrName = parts[0].trim();\n            let attrValue = '';\n            if (parts.length > 1) {\n                attrValue = parts[1].replace(/[\"']/g, '').trim();\n            }\n            return {\n                getValue: () => {\n                    let found = elem.attr(attrName) != null;\n                    if (attrValue) {\n                        found = found && elem.attr(attrName) === attrValue;\n                    }\n                    return xor(neg, found);\n                },\n                // @ts-ignore\n                setValue: (bool) => {\n                    if (xor(neg, bool)) {\n                        elem.attr(attrName, attrValue || '');\n                    } else {\n                        elem.removeAttr(attrName);\n                    }\n                }\n            };\n        },\n         /**\n         * @param {string} attr\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        \"notHasAttr\": (attr, query) => {\n            return methods['hasAttr'](attr, query, true);\n        },\n        /**\n         * @param {string} attr - Regex of attr\n         * @param {string=} castTo\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        \"attrRegex\": function(attr, castTo, query) {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            const parts = attr.split(\"=\");\n            const attrName = parts[0].trim();\n            let attrValue = '';\n            if (parts.length > 1) {\n                attrValue = parts[1].replace(/[\"']/g, '').trim();\n            }\n            return {\n                getValue() {\n                    let found = elem.attr(attrName) != null;\n                    if (found) {\n                        const match = elem.attr(attrName)?.match(attrValue);\n                        if (match?.[1] && typeof (match[1]) === \"string\") {\n                            return performCasting(match[1], castTo);\n                        }\n                        return '';\n                    }\n                    return null;\n                },\n                // @ts-ignore\n                setValue(val) {\n                    elem.attr(attrName, attrValue.replace(\"(.*)\", val + \"\"));\n                }\n            };\n        },\n        /**\n         * @param {string} sty\n         * @param {string=} query\n         * @param {boolean=} neg\n         * @returns {Binding}\n         */\n        \"hasStyle\": function(sty, query, neg) {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            const parts = sty.split(\":\");\n            let styName = parts[0].trim();\n            let styValue = '';\n            if (parts.length > 1) {\n                styValue = parts[1].replace(/[\"']/g, '').trim();\n            }\n            return {\n                getValue() {\n                    const st = elem.prop('style');\n                    const has = st.getPropertyValue(styName) === styValue;\n                    return xor(has, neg);\n                },\n                // @ts-ignore\n                setValue(bool) {\n                    if (xor(bool, neg)) {\n                        elem.css(styName, styValue);\n                    } else {\n                        const st = elem.prop('style');\n                        st.removeProperty(styName);\n                    }\n                }\n            };\n        },\n         /**\n         * @param {string} sty\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        \"notHasStyle\": (sty, query) => {\n            return methods['hasStyle'](sty, query, true);\n        },\n        /**\n         * @param {string} attr\n         * @param {string=} castTo\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        \"styleRegex\": function(attr, castTo, query) {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            const parts = attr.split(\":\");\n            const styName = parts[0].trim();\n            let styValue = '';\n            if (parts.length > 1) {\n                styValue = parts[1].replace(/[\"']/g, '').trim();\n            }\n            return {\n                getValue() {\n                    const st = elem.prop('style');\n                    const has = st.getPropertyValue(styName) != null;\n                    if (has) {\n                        const match = st.getPropertyValue(styName).match(styValue);\n                        if (match?.[1] && (typeof match[1]) === \"string\") {\n                            return performCasting(match[1], castTo);\n                        }\n                        return '';\n                    }\n                    return null;\n                },\n                // @ts-ignore\n                setValue(val) {\n                    elem.css(styName, styValue.replace(\"(.*)\", val + \"\"));\n                }\n            };\n        }\n    };\n    return methods;\n};\n\n/**\n * @typedef {Object} Binding\n * @property {() => unknown} getValue\n * @property {(value: unknown) => void} setValue\n */\n/**\n * @param {string | {get: string, set: string}} definition\n * @param {JQuery<HTMLElement>} elem  - The root of widget\n * @param {string} castTo  - The type that must be returned\n * @returns {Binding | null}\n */\nexport const createBinding = (definition, elem, castTo) => {\n    /** @type {Binding | null} */\n    let bindFn = null;\n    if (typeof (definition) === 'string') {\n        return evalInContext({...bindingFactory(elem)}, definition, true);\n    } else {\n        // The user provides the get and set functions\n        bindFn = {\n            getValue: () => {\n                let v = evalInContext({ elem }, `(${definition.get})(elem)`);\n                if (castTo) {\n                    v = performCasting(v, castTo);\n                }\n                return v;\n            },\n            setValue: (v) => evalInContext({ elem, v }, `(${definition.set})(elem, v)`)\n        };\n    }\n    return bindFn;\n};\n\n/**\n * Capitalizes the first letter of a string\n * @param {string | undefined | null} s\n * @returns {string}\n */\nexport const capitalize = s => (s && s[0].toUpperCase() + s.slice(1)) || \"\";"],"names":["Ejs","base","url","trim","toLowerCase","startsWith","pathJoin","id","onSuccess","onError","document","head","querySelector","newScript","createElement","type","src","setAttribute","onload","console","info","onerror","error","append","editor","widgetTemplate","silent","mergevars","translations","key","component","userWidgetFilter","createFilterFunction","notificationManager","open","text","timeout","handleFilterResult","res","out","msg","setContent","initialHTML","getContent","filteredResult","dom","window","then","name","replace","str","def","Math","floor","match","val","parseInt","isNaN","ex","varname","listVars","found","len","length","k","s","h","l","i","charCodeAt","abs","str1","needle","indexOf","transformStr","Builder","Shared","currentScope","_document$querySelect","activatePopup","globalConfig","genID","random","toString","substring","evalInContext","ctx","expr","keepFns","listArgs","listVals","Object","keys","forEach","push","log","Function","evaluator","defineVar","ctx2","pos","varvalue","templateRendererMustache","template","context","render","condition","dict","components","split","dim","maxValues","Array","loopVars","total","cc","parts","unshift","String","fromCharCode","cname","dm","output","_ei","Mustache","incrUp","currentDim","oldValue","newValue","join","loopvar","maxIter","applyMustacheHelpers","templateRendererEJS","I18n","lang","wordKey","Promise","resolve","reject","require","ejsModule","templateRenderer","engine","includes","tmpl","constructor","widget","partials","parameters","param","partial","value","options","this","category","insertquery","selectors","unwrap","version","instructions","instructionsParsed","decodeURIComponent","defaults","obj","defaultsCopy","toInterpolate","assign","isFor","userId","hidden","grantStr","for","allowMode","grantList","isUsableInScope","scope","widgetScopes","RegExp","exec","isFilter","hasBindings","filter","undefined","bind","prop","UserStorage","_userId","_courseId","_localStore","_sessionStore","STORE_KEY","courseId","_instances","valors","searchtext","loadStore","localStorage","txt","getItem","JSON","parse","sessionStorage","txt2","getFromLocal","defaultValue","MLSC","MLS","getFromSession","saveStore","setItem","stringify","setToLocal","persist","theValueMap","theKey","setToSession","Transformers","toUpperCase","r","encodeURIComponent","transSeq","j","lenj","prts","transfunc","reduce","filterCode","a","b","endsWith","performCasting","xor","bindingFactory","$e","methods","className","query","neg","elem","find","getValue","hasClass","Boolean","setValue","bool","addClass","removeClass","notHasClass","classExpr","castTo","ret","attr","c","attrName","attrValue","removeAttr","_elem$attr3","sty","styName","styValue","has","getPropertyValue","css","removeProperty","st","definition","bindFn","v","get","set","slice"],"mappings":"yIAsCIA,8JAs+ByBC,KAAMC,SAC/BA,KAAOA,KAAO,IAAIC,QACVC,cAAcC,WAAW,eACtBH,WAGCI,SAASL,KAAMC,kCAULA,IAAKK,GAAIC,UAAWC,YACtCF,IAAqD,MAA/CG,SAASC,KAAKC,cAAc,UAAYL,iBAI5CM,UAAYH,SAASI,cAAc,UACzCD,UAAUE,KAAO,kBACjBF,UAAUG,IAAMd,IACZK,IACAM,UAAUI,aAAa,KAAMV,IAEjCM,UAAUK,OAAS,KACfC,QAAQC,KAAK,UAAWlB,KACpBM,WACAA,aAGRK,UAAUQ,QAAU,WAChBF,QAAQG,MAAM,iBAAkBpB,KAC5BO,SACAA,WAGRC,SAASC,KAAKY,OAAOV,sDA5KeW,OAAQC,eAAgBC,OAAQC,iBAC9DC,mBAAqB,oBAAW,CAClC,CAAEC,IAAK,YAAaC,UAAW,kBAC/B,CAAED,IAAK,YAAaC,UAAW,oBAG7BC,iBAAmBC,qBAAqBP,oBAEzCM,wBACDP,OAAOS,oBAAoBC,KAAK,CAC5BC,KAAMP,aAAa,GAAK,mBACxBb,KAAM,SACNqB,QAAS,OAEN,QAGLC,mBAAqB,SAAUC,WAC3BC,IAAMD,IAAI,OACZE,IAAMF,IAAI,GACH,MAAPC,IACmB,iBAARA,KACPf,OAAOiB,WAAWF,KAClBf,OAAOS,oBAAoBC,KAAK,CAC5BC,KAAMP,aAAa,GAAK,KAAOY,IAC/BzB,KAAM,UACNqB,QAAS,QAEE,IAARG,IACPf,OAAOS,oBAAoBC,KAAK,CAC5BC,KAAMP,aAAa,GAAK,KAAOY,IAC/BzB,KAAM,UACNqB,QAAS,OAEE,IAARG,KAAkBb,QACzBF,OAAOS,oBAAoBC,KAAK,CAC5BC,KAAMP,aAAa,GACnBb,KAAM,OACNqB,QAAS,MAGTV,QACRF,OAAOS,oBAAoBC,KAAK,CAC5BC,KAAMP,aAAa,GACnBb,KAAM,OACNqB,QAAS,OAKfM,YAAclB,OAAOmB,aACrBC,eAAiBb,iBAAiBW,YAAalB,OAAOqB,IAAIC,OAAQnB,WAEpC,MAAlBiB,gBAAsD,iBAApBA,gBAAiC,SAAUA,eAE3FA,eAAeG,KAAKV,oBAEpBA,mBAAmBO,gBAAkB,CAAC,KAAM,0CAEzC,mEAtFwBI,aACxBA,KAAKC,QAAQ,MAAO,mCA+FJC,IAAKC,QACxBD,KAAsB,iBAARA,WACPE,KAAKC,MAAMH,SAEjBA,OAASA,IAAM,IAAI/C,UAAY+C,IAAM,IAAII,MAAM,mCACzCH,cAGDI,IAAMC,SAASN,IAAM,QACtBO,MAAMF,YACAA,IAEb,MAAOG,YAGFP,gKASwBQ,QAASC,cACnCA,gBACM,SAEPC,MAAQ,WACNC,IAAMF,SAASG,WACjBC,EAAI,OACDA,EAAIF,MAAQD,OACXD,SAASI,GAAGhB,OAASW,UACrBE,MAAQD,SAASI,IAErBA,WAEGH,uDAxdcI,OAEjBC,EAAI,QACFC,GAFNF,EAAIA,GAAK,IAEGF,WACRK,EAAI,KACJD,EAAI,OACGC,EAAID,GACPD,GAAKA,GAAK,IAAOD,EAAEI,WAAWD,GAAK,GAAM,GACzCA,WAGDhB,KAAKkB,IAAIJ,4DAyMOK,KAAMC,eAC7BD,MAAQA,MAAQ,IAAIpE,OAAOC,cAC3BoE,QAAUA,QAAU,IAAIrE,OAAOC,cAC/BmE,KAAOA,KAAKtB,QAAQ,WAAY,KAC3BA,QAAQ,SAAU,KAClBA,QAAQ,SAAU,KAClBA,QAAQ,SAAU,KAClBA,QAAQ,SAAU,KAClBA,QAAQ,IAAK,KACbA,QAAQ,IAAK,IAClBuB,OAASA,OAAOvB,QAAQ,WAAY,KAC/BA,QAAQ,SAAU,KAClBA,QAAQ,SAAU,KAClBA,QAAQ,SAAU,KAClBA,QAAQ,SAAU,KAClBA,QAAQ,IAAK,KACbA,QAAQ,IAAK,IACXsB,KAAKE,QAAQD,SAAW,4BAsGZE,qBACZ,IAAIC,QAAQD,uLAtyBVE,OAAS,CAElBC,2CAAcnE,SAASE,cAAc,gDAAvBkE,sBAAgCvE,GAE9CwE,eALgB,EAOhBC,aAAc,aAMFC,cACL,IAAM7B,KAAK8B,SAASC,SAAS,IAAIC,UAAU,YAStCC,cAAcC,IAAKC,KAAMC,eAC/BC,SAAW,GACXC,SAAW,GAEbJ,KACAK,OAAOC,KAAKN,KAAKO,SAAShE,OAElB2D,SAA+B,mBAAbF,IAAIzD,QACtB4D,SAASK,KAAKjE,KACd6D,SAASI,KAAKR,IAAIzD,UAI9B4D,SAASK,KAAK,QACdL,SAASK,KAAK,qBACdJ,SAASI,KAAKP,MACdpE,QAAQ4E,IAAI,WAAYN,UACxBtE,QAAQ4E,IAAI,OAAQR,KAAM,WAAYG,iBAEpB,IAAIM,YAAYP,SAC3BQ,IAAaP,uCAQlBQ,UAAY,SAAU/D,KAAMgE,YACxBC,IAAMjE,KAAKsC,QAAQ,KACnBd,QAAUxB,KAAKiD,UAAU,EAAGgB,KAAKjG,OACjCkG,SAAWhB,cAAcc,KAAMhE,KAAKiD,UAAUgB,IAAM,GAAGjG,eAC7DgG,KAAKxC,SAAW0C,SACT1C,kBAwHK2C,yBAAyBC,SAAUC,QAAS5E,oBAClD0D,IAAM,IAAKkB,gBACjBb,OAAOC,KAAKN,KAAKO,SAAQhE,MACJ,SAAbyD,IAAIzD,OACJyD,IAAIzD,KAAOoD,YApHM,SAAUK,IAAK1D,cAExC0D,IAAG,GAAS,IAKR,SAAUnD,KAAMsE,cACNL,IAAMjE,KAAKsC,QAAQ,KACnBiC,UAAYvE,KAAKiD,UAAU,EAAGgB,KAAKjG,OAAOiF,UAAU,UAC7CC,cAAcC,IAAKoB,WAErBD,OAAOtE,KAAKiD,UAAUgB,IAAM,GAAGjG,QAEnC,IAEfmF,IAAG,IAAU,IAIT,SAAUnD,MACN+D,UAAU/D,KAAMmD,MAExBA,IAAG,KAAW,IAIV,SAAUnD,aACCkD,cAAcC,IAAKnD,MAAQ,IAE1CmD,IAAG,KAAW,IAKV,SAAUnD,KAAMsE,cACN5E,IAAM4E,OAAOtE,MAAMhC,OACnBwG,KAAO/E,aAAaC,MAAQ,UAC3B8E,KAAKrB,IAAG,OAAaqB,KAAI,IAAUA,KAAI,IAAU9E,KAEhEyD,IAAG,KAAW,IAIV,SAAUnD,YACAiE,IAAMjE,KAAKsC,QAAQ,KAEnBmC,WADOzE,KAAKiD,UAAU,EAAGgB,KAAKjG,OAAOiF,UAAU,GAC7ByB,MAAM,KACxBC,IAAMF,WAAW7C,OACjBgD,UAAY,IAAIC,MAAMF,KACtBG,SAAW,IAAID,MAAMF,SACvBI,MAAQ,QACNC,GAAK,IAAI9C,WAAW,GAC1BuC,WAAWf,SAAQ,CAAC1C,IAAKiB,WACfgD,MAAQjE,IAAI0D,MAAM,KACH,IAAjBO,MAAMrD,QACNqD,MAAMC,QAAQC,OAAOC,aAAaJ,GAAK/C,UAErCoD,MAAQJ,MAAM,GAAGjH,OACvB8G,SAAS7C,GAAKoD,YACRC,GAAKpC,cAAcC,IAAK8B,MAAM,IACpCF,OAAgBO,GAChBV,UAAU3C,GAAKqD,GACfnC,IAAIkC,OAAS,SAEbE,OAAS,OACR,IAAIC,IAAM,EAAGA,IAAMT,MAAOS,MAAO,CAElCD,OAAO5B,KAAK8B,kBAASnB,OAAOtE,KAAKiD,UAAUgB,IAAM,GAAId,UAEjDuC,OADAC,WAAahB,IAAM,IAEpB,OACOiB,SAAWzC,IAAI2B,SAASa,aAAe,EACvCE,UAAYD,SAAW,GAAKhB,UAAUe,YAAc,EAC1DxC,IAAI2B,SAASa,aAAeE,SAC5BH,OAASG,SAAWD,SACpBD,mBACKA,YAAc,GAAKD,eAEzBH,OAAOO,KAAK,KAE3B3C,IAAG,IAAU,IAIT,SAAUnD,YACAiE,IAAMjE,KAAKsC,QAAQ,KAEnB2C,MADYjF,KAAKiD,UAAU,EAAGgB,KAAKjG,OAAOiF,UAAU,GAClCyB,MAAM,KACxBqB,QAAUhC,UAAUkB,MAAM,GAAI9B,SAChCoC,OAAS,GACTS,QAAU,OACP9C,cAAcC,IAAK8B,MAAM,KAAOe,QAAU,KAE7CT,QAAUE,kBAASnB,OAAOtE,KAAKiD,UAAUgB,IAAM,GAAId,KAC9B,IAAjB8B,MAAMrD,QAAgBqD,MAAM,GAAGjH,OAC/B+F,UAAUgC,QAAU,IAAMd,MAAM,GAAI9B,KAEpCA,IAAI4C,SAAW5C,IAAI4C,SAAW,EAElCC,iBAEGT,QAiBfU,CAAqB9C,IAAK1D,cAAgB,IAEnCgG,kBAASnB,OAAOF,SAAUjB,oBAUtB+C,oBAAoB9B,SAAUC,QAAS5E,oBAE5C0D,IAAM,IAAKkB,QAAS8B,KAAM,IAChC3C,OAAOC,KAAKN,KAAKO,SAAQhE,MACJ,SAAbyD,IAAIzD,OACJyD,IAAIzD,KAAOoD,kBAGbsD,KAAOjD,IAAG,SACX,IAAIkD,WAAW5G,aAAc,OACxB+E,KAAO/E,aAAa4G,SAC1BlD,IAAG,KAASkD,SAAW7B,KAAK4B,OAAS5B,KAAI,IAAUA,KAAI,IAAU6B,qBAjOjExI,IACOyI,QAAQC,QAAQ1I,KAEpB,IAAIyI,SAAQ,CAACC,QAASC,UAEzBC,QAAQ,CAAC,4BAA6BC,YAClC7I,IAAM6I,UACNH,QAAQ1I,OACT2I,aA4NKlC,OAAOF,SAAUjB,cAUjBwD,iBAAiBvC,SAAUC,QAAS5E,aAAcmH,WACzDA,SACDA,OAASxC,SAASyC,SAAS,MAAQ,MAAQ,YAEhC,QAAXD,cACOV,oBAAoB9B,SAAUC,QAAS5E,oBAG5CqH,KAAO3C,yBAAyBC,SAAUC,QAAS5E,qBAClD6G,QAAQC,QAAQO,gEA0DD,EAMtBC,YAAYC,OAAQC,gBACXD,OAAUA,aACTE,WAAaF,OAAOE,WACrBA,YAILA,WAAWxD,SAAQ,CAACyD,MAAOlF,QAEnBkF,MAAMC,QAAS,KACVH,SAASE,MAAMC,qBAChBpI,QAAQG,MAAM,2BAA4BgI,MAAMC,QAASH,UAG7DC,WAAWjF,GAAKgF,SAASE,MAAMC,SAE9BD,MAAMvI,OAEoB,kBAAhBuI,MAAME,MACbF,MAAMvI,KAAO,WACiB,iBAAhBuI,MAAME,MACpBF,MAAMvI,KAAO,UACiB,iBAAhBuI,MAAME,QACpBF,MAAMvI,KAAOuI,MAAMG,QAAU,SAAW,iBAQpDzG,kBACO0G,MAAKP,OAAQnG,KAKpBnB,iBACO6H,MAAKP,OAAQtH,IAKpByG,kBACOoB,MAAKP,OAAQb,MAAQ,GAK5B/B,sBACOmD,MAAKP,OAAQ5C,SAKpBoD,sBACOD,MAAKP,OAAQQ,UAAY,OAKhCC,yBACOF,MAAKP,OAAQS,YAKpBC,uBACOH,MAAKP,OAAQU,UAKpBC,oBACOJ,MAAKP,OAAQW,OAKpBC,qBACOL,MAAKP,OAAQY,SAAW,QAK/BC,0BACIN,MAAKP,OAAQa,eAAiBN,MAAKO,2BAC9Bd,OAAQa,aAAeE,mBAAmBR,MAAKP,OAAQa,oBACvDC,oBAAsB,GAExBP,MAAKP,OAAQa,cAAgB,GAKpCX,wBACOK,MAAKP,OAAQE,YAAc,GAKlCc,qBAEMC,IAAM,eACPf,WAAWxD,SAASyD,QACrBc,IAAId,MAAMtG,MAAQsG,MAAME,SAErBY,IAMX3D,OAAOnB,WACG+E,aAAe,IAAKX,KAAKS,UACzBG,cAAgB3E,OAAO4E,OAAOF,aAAc/E,KAAO,QAErDyD,OAASW,MAAKP,OAAQJ,cACnBD,iBAAiBY,KAAKnD,UAAY,GAAI+D,cACzCZ,MAAKP,OAAQb,MAAQ,GAAIS,QAMjCyB,MAAMC,YAE0B,IAAxBf,MAAKP,OAAQuB,cACN,MAEPC,UAAYjB,MAAKP,OAAQyB,KAAO,IAAIzK,UACvB,KAAbwK,UAAgC,MAAbA,UAAoBF,QAAU,SAC1C,MAEPI,WAAY,EACZF,SAAStK,WAAW,OACpBwK,WAAY,GAEhBF,SAAWA,SAAS1H,QAAQ,UAAW,UACjC6H,UAAYH,SAAS9D,MAAM,YACdgE,WAAaC,UAAUrG,QAAQgG,OAAS,KAAO,IAAQI,WAAaC,UAAUrG,QAAQgG,OAAS,IAAM,EAO5HM,gBAAgBC,OACZA,MAAQA,OAASpG,OAAOC,cAAgB,SAClCoG,aAAevB,MAAKP,OAAQ6B,UAC7BA,QAAUC,cAAiC,MAAjBA,oBACpB,SAGiB,MADd,IAAIC,OAAOD,cACZE,KAAKH,OAKtBI,oCAC4C,yCAA5BzB,yDAAUvJ,eAK1BiL,qBACW3B,KAAKL,WAAWiC,QAAOhC,YAAwBiC,IAAfjC,MAAMkC,OAAoBzH,OAAS,EAO9E0H,KAAKzI,aAEM0G,MAAKP,OAAQnG,cA0Bf0I,8BACW,GACpBC,QAAU,EACVC,UAAY,EACZC,YACAC,cACAC,6BAOmBtB,OAAQuB,gBACjBnK,IAAM4I,OAAS,IAAMuB,gBAEtBN,YAAYO,WAAWpK,OAExB6J,YAAYO,WAAWpK,KAAO,IAAI6J,YAAYjB,OAAQuB,WAGnDN,YAAYO,WAAWpK,KAIlCqH,YAAYuB,OAAQuB,eACXL,QAAUlB,YACVmB,UAAYI,cACZD,UAAY,iBAAmBtB,YAC/BoB,YAAc,CAAEK,OAAQ,SACxBJ,cAAgB,CAAEK,WAAY,SAC9BC,YAKTA,oBACuC,IAAxBtJ,OAAOuJ,aAA8B,OACtCC,IAAMxJ,OAAOuJ,aAAaE,QAAQ7C,KAAKqC,cACzCO,aAEST,YAAcW,KAAKC,MAAMH,KAChC,MAAO5I,IACLvC,QAAQG,MAAMoC,QAMrBgG,KAAKmC,YAAY,IAAMnC,KAAKkC,kBAExBC,YAAY,IAAMnC,KAAKkC,WAAa,SAER,IAA1B9I,OAAO4J,eAAgC,OACxCC,KAAO7J,OAAO4J,eAAeH,QAAQ7C,KAAKqC,cAC5CY,cAESb,cAAgBU,KAAKC,MAAME,MAClC,MAAOjJ,IACLvC,QAAQG,MAAMoC,MAW9BkJ,aAAa/K,IAAKgL,kBACTnD,KAAKmC,mBACCgB,mBAGLC,KAAOpD,KAAKmC,YAAY,IAAMnC,KAAKkC,WACnCmB,IAAMrD,KAAKmC,mBACbiB,KAEOA,KAAKjL,MAAQkL,IAAIlL,MAAQgL,aACzBE,KAEAA,IAAIlL,MAERgL,aAQXG,eAAenL,IAAKgL,qBAEmB,MAA3BnD,KAAKoC,cAAcjK,KAAe6H,KAAKoC,cAAcjK,KAAOgL,aAKxEI,UAAUlM,MACO,UAATA,WAAmD,IAAxB+B,OAAOuJ,aAClCvJ,OAAOuJ,aAAaa,QAAQxD,KAAKqC,UAAWS,KAAKW,UAAUzD,KAAKmC,cAChD,YAAT9K,WAAuD,IAA1B+B,OAAO4J,eAC3C5J,OAAO4J,eAAeQ,QAAQxD,KAAKqC,UAAWS,KAAKW,UAAUzD,KAAKoC,gBACnD,MAAR/K,YAC4B,IAAxB+B,OAAOuJ,cACdvJ,OAAOuJ,aAAaa,QAAQxD,KAAKqC,UAAWS,KAAKW,UAAUzD,KAAKmC,mBAE/B,IAA1B/I,OAAO4J,gBACd5J,OAAO4J,eAAeQ,QAAQxD,KAAKqC,UAAWS,KAAKW,UAAUzD,KAAKoC,iBAW9EsB,WAAWvL,IAAK2H,MAAO6D,YACK,MAApB3D,KAAKmC,yBAIHiB,KAAOpD,KAAKmC,YAAY,IAAMnC,KAAKkC,WACnCmB,IAAMrD,KAAKmC,eAGY,iBAAjByB,YAA2B,CAC/BR,MAAgB,iBAARjL,KAAkC,WAARA,IAClCiL,KAAKjL,KAAOiL,KAAKjL,MAAQ,GAGzBkL,IAAIlL,KAAOkL,IAAIlL,MAAQ,SAGrB+D,KAAOD,OAAOC,KAAK4D,WACpB,IAAIpF,EAAI,EAAGN,IAAM8B,KAAK7B,OAAQK,EAAIN,IAAKM,IAAK,OACvCmJ,OAAS3H,KAAKxB,GAEdb,IAAMiG,MAAM+D,QACdT,MAAgB,iBAARjL,KAAkC,WAARA,IAClCiL,KAAKjL,KAAK0L,QAAUhK,IAGpBwJ,IAAIlL,KAAK0L,QAAUhK,UAK3BwJ,IAAIlL,KAAO2H,MAEX6D,cACKJ,UAAU,SAUvBO,aAAa3L,IAAK2H,MAAO6D,YACE,iBAAX7D,MAAqB,MAExBsC,cAAcjK,KAAO6H,KAAKoC,cAAcjK,MAAQ,SAE/C+D,KAAOD,OAAOC,KAAK4D,WACpB,IAAIpF,EAAI,EAAGN,IAAM8B,KAAK7B,OAAQK,EAAIN,IAAKM,IAAK,OACvCmJ,OAAS3H,KAAKxB,GAEdb,IAAMiG,MAAM+D,aAEbzB,cAAcjK,KAAK0L,QAAUhK,eAIjCuI,cAAcjK,KAAO2H,MAE1B6D,cACKJ,UAAU,mDAiCrBQ,aAAe,aAEF,SAAUnB,YACbA,IAAM,IAAIoB,2BAGP,SAAUpB,YACbA,IAAM,IAAIlM,oBAGd,SAAUkM,YACNA,IAAM,IAAInM,aAGd,SAAUmM,WAGRqB,GAAKrB,KAAO,IAAIhJ,MADX,iHAEPqK,MAAAA,GAAAA,EAAG5J,OACI4J,EAAE,GAENrB,aAGA,SAAUA,WAEXhJ,OAASgJ,KAAO,IAAIhJ,MADX,mFAEXA,MAAAA,OAAAA,MAAQ,GACDA,MAAM,GAEVgJ,iBAGI,SAAUA,WAEfhK,KAAOgK,IAAM,IAAIhJ,MAAM,6DACzBhB,MAAAA,KAAAA,IAAKyB,OAAQ,OAEN,6CADSzB,IAAI,UAGjBgK,gBAGG,SAAUA,YACZA,KAAO,IAAIrJ,QAAQ,aAAc,gBAG/B,SAAUqJ,YACZA,KAAO,IAAIrJ,QAAQ,KAAM,SAC5BA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,UACdA,QAAQ,KAAM,sBAGT,SAAUqJ,YAEb5C,KAAKkE,mBAAmBtB,KAAO,kBAG1B,SAAUA,YACdA,KAAO,IAAIrJ,QAAQ,MAAO,aAKpC0B,QACFkJ,SAEA3E,YAAYxE,oBACF0C,MAAQ1C,aAAamC,MAAM,UAC5BgH,SAAW,OACX,IAAIC,EAAI,EAAGC,KAAO3G,MAAMrD,OAAQ+J,EAAIC,KAAMD,IAAK,OAC1CE,KAAO5G,MAAM0G,GAAG3N,OAEhB8N,UAAYR,aAAaO,MACd,MAAbC,eACKJ,SAAS/H,KAAKmI,WAEnB9M,QAAQG,MAAM,iCAAmC0M,OAM7DE,OAAO/L,UACE,IAAI2L,EAAI,EAAGC,KAAOrE,KAAKmE,SAAS9J,OAAQ+J,EAAIC,KAAMD,IAAK,CAExD3L,MAAO8L,EADWvE,KAAKmE,SAASC,IACf3L,aAEdA,eAyBCH,qBAAqBmM,YACjCA,WAAaA,WAAWlL,QAAQ,sBAAoB,IAAIA,QAAQ,sBAAoB,QAChFlB,iBAAmB,SAEnBA,iBAAmB,IAAIiE,SAAS,OAAQ,OAAQ,OAAQmI,YAC1D,MAAOzK,IACL3B,iBAAmB,KACnBZ,QAAQG,MAAMoC,WAEX3B,0BA4HKzB,SAAS8N,EAAGC,UACxBD,GAAKA,GAAK,IAAIjO,OACdkO,GAAKA,GAAK,IAAIlO,OACTiO,EAAEE,SAAS,OACZF,GAAQ,KAERC,EAAEhO,WAAW,OACbgO,EAAIA,EAAEjJ,UAAU,IAEbgJ,EAAIC,QAoDTE,eAAiB,SAAU/E,MAAOzI,aAC5BA,UACE,UAEEyI,MADU,IAAVA,OAAyB,MAAVA,QAA2B,IAAVA,OAA4B,SAAVA,gBAMpD,aAEEA,MAAQhG,SAASgG,OACnB,MAAO9F,IACLvC,QAAQG,MAAM,uBAAwBoC,cAGxC,SACF8F,OAAgB,UAGjBA,OAOLgF,IAAM,SAASJ,EAAGC,UACZD,IAAOC,GAQbI,eAAiB,SAASC,UAEtBC,QAAU,UAOA,CAACC,UAAWC,MAAOC,WAEvBC,KAAOL,UACPG,QACAE,KAAOL,GAAGM,KAAKH,QAEZ,CAEHI,SAAU,WACA3M,IAAMkM,IAAIM,IAAKC,KAAKG,SAASN,mBAC5BO,QAAQ7M,MAGnB8M,SAAWC,OACHb,IAAIM,IAAKO,MACTN,KAAKO,SAASV,WAEdG,KAAKQ,YAAYX,cAUjCY,YAAa,CAACZ,UAAWC,QACdF,QAAO,SAAaC,UAAWC,OAAO,cAQnC,CAACY,UAAWC,OAAQb,aAC1BE,KAAOL,UACPG,QACAE,KAAOL,GAAGM,KAAKH,QAEZ,CACHI,SAAU,wBACFU,IAAM,8BAECZ,KAAKa,KAAK,iDAAU/I,MAAM,SAAU,IAC5ChB,SAAQgK,UACDvM,MAAQuM,EAAEvM,MAAMmM,WAClBnM,MAAAA,OAAAA,MAAQ,IAA4B,iBAAdA,MAAM,KAC5BqM,IAAMrM,MAAM,OAGbiL,eAAeoB,IAAKD,SAG/BN,SAAW7L,4CACIwL,KAAKa,KAAK,mDAAU/I,MAAM,SAAU,IAE5ChB,SAAQgK,IACHA,EAAEvM,MAAMmM,YACRV,KAAKQ,YAAYM,MAGzBd,KAAKO,SAASG,UAAUxM,QAAQ,OAAQM,IAAM,aAUlD,CAACuM,SAAUJ,OAAQb,aACnBE,KAAOL,UACPG,QACAE,KAAOL,GAAGM,KAAKH,QAEZ,CACHI,SAAU,IACCV,eAAeQ,KAAKa,KAAKE,UAAWJ,QAG/CN,SAAW7L,MACY,kBAARA,MACPA,IAAMA,IAAM,EAAI,GAEbwL,KAAKa,KAAKE,SAAUvM,IAAM,eAUlC,CAACqM,KAAMf,MAAOC,WACjBC,KAAOL,GACPG,QACAE,KAAOL,GAAGM,KAAKH,cAEbzH,MAAQwI,KAAK/I,MAAM,KACnBiJ,SAAW1I,MAAM,GAAGjH,WACtB4P,UAAY,UACZ3I,MAAMrD,OAAS,IACfgM,UAAY3I,MAAM,GAAGnE,QAAQ,QAAS,IAAI9C,QAEvC,CACH8O,SAAU,SACFpL,MAA+B,MAAvBkL,KAAKa,KAAKE,iBAClBC,YACAlM,MAAQA,OAASkL,KAAKa,KAAKE,YAAcC,WAEtCvB,IAAIM,IAAKjL,QAGpBuL,SAAWC,OACHb,IAAIM,IAAKO,MACTN,KAAKa,KAAKE,SAAUC,WAAa,IAEjChB,KAAKiB,WAAWF,wBAUlB,CAACF,KAAMf,QACVF,QAAO,QAAYiB,KAAMf,OAAO,aAQ9B,SAASe,KAAMF,OAAQb,WAC5BE,KAAOL,GACPG,QACAE,KAAOL,GAAGM,KAAKH,cAEbzH,MAAQwI,KAAK/I,MAAM,KACnBiJ,SAAW1I,MAAM,GAAGjH,WACtB4P,UAAY,UACZ3I,MAAMrD,OAAS,IACfgM,UAAY3I,MAAM,GAAGnE,QAAQ,QAAS,IAAI9C,QAEvC,CACH8O,cACuC,MAAvBF,KAAKa,KAAKE,UACX,uBACDxM,0BAAQyL,KAAKa,KAAKE,wCAAVG,YAAqB3M,MAAMyM,kBACrCzM,MAAAA,OAAAA,MAAQ,IAA4B,iBAAdA,MAAM,GACrBiL,eAAejL,MAAM,GAAIoM,QAE7B,UAEJ,MAGXN,SAAS7L,KACLwL,KAAKa,KAAKE,SAAUC,UAAU9M,QAAQ,OAAQM,IAAM,iBAUpD,SAAS2M,IAAKrB,MAAOC,SACzBC,KAAOL,GACPG,QACAE,KAAOL,GAAGM,KAAKH,cAEbzH,MAAQ8I,IAAIrJ,MAAM,SACpBsJ,QAAU/I,MAAM,GAAGjH,OACnBiQ,SAAW,UACXhJ,MAAMrD,OAAS,IACfqM,SAAWhJ,MAAM,GAAGnE,QAAQ,QAAS,IAAI9C,QAEtC,CACH8O,iBAEUoB,IADKtB,KAAKtD,KAAK,SACN6E,iBAAiBH,WAAaC,gBACtC5B,IAAI6B,IAAKvB,MAGpBM,SAASC,SACDb,IAAIa,KAAMP,KACVC,KAAKwB,IAAIJ,QAASC,cACf,CACQrB,KAAKtD,KAAK,SAClB+E,eAAeL,yBAUnB,CAACD,IAAKrB,QACVF,QAAO,SAAauB,IAAKrB,OAAO,cAQ7B,SAASe,KAAMF,OAAQb,WAC7BE,KAAOL,GACPG,QACAE,KAAOL,GAAGM,KAAKH,cAEbzH,MAAQwI,KAAK/I,MAAM,KACnBsJ,QAAU/I,MAAM,GAAGjH,WACrBiQ,SAAW,UACXhJ,MAAMrD,OAAS,IACfqM,SAAWhJ,MAAM,GAAGnE,QAAQ,QAAS,IAAI9C,QAEtC,CACH8O,iBACUwB,GAAK1B,KAAKtD,KAAK,YACuB,MAAhCgF,GAAGH,iBAAiBH,SACvB,OACC7M,MAAQmN,GAAGH,iBAAiBH,SAAS7M,MAAM8M,iBAC7C9M,MAAAA,OAAAA,MAAQ,IAA4B,iBAAdA,MAAM,GACrBiL,eAAejL,MAAM,GAAIoM,QAE7B,UAEJ,MAGXN,SAAS7L,KACLwL,KAAKwB,IAAIJ,QAASC,SAASnN,QAAQ,OAAQM,IAAM,gBAK1DoL,gCAckB,CAAC+B,WAAY3B,KAAMW,cAExCiB,OAAS,WACe,iBAAhBD,WACDrL,cAAc,IAAIoJ,eAAeM,OAAQ2B,YAAY,IAG5DC,OAAS,CACL1B,SAAU,SACF2B,EAAIvL,cAAc,CAAE0J,KAAAA,MAAS,IAAG2B,WAAWG,qBAC3CnB,SACAkB,EAAIrC,eAAeqC,EAAGlB,SAEnBkB,GAEXxB,SAAWwB,GAAMvL,cAAc,CAAE0J,KAAAA,KAAM6B,EAAAA,GAAM,IAAGF,WAAWI,kBAG5DH,6BAQe1M,GAAMA,GAAKA,EAAE,GAAGyJ,cAAgBzJ,EAAE8M,MAAM,IAAO"}