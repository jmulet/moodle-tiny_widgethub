{"version":3,"file":"util.min.js","sources":["../src/util.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable max-len */\n/* eslint-disable no-eq-null */\n/* eslint-disable no-bitwise */\n/* eslint-disable no-new-func */\n/* eslint-disable dot-notation */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Mustache from 'core/mustache';\nimport {get_strings as getStrings} from 'core/str';\n\n// Load on demand the template engines\n/**\n * @typedef {Object} EJS\n * @property {(template: string, ctx: Object.<string,any>) => string} render\n */\n/** @type {EJS} */\nlet Ejs;\n/**\n * @returns {Promise<EJS>}\n */\nfunction getEJS() {\n    if (Ejs) {\n        return Promise.resolve(Ejs);\n    }\n    return new Promise((resolve, reject) => {\n        // @ts-ignore\n        require(['tiny_widgethub/ejs-lazy'], (ejsModule) => {\n            Ejs = ejsModule;\n            resolve(Ejs);\n        }, reject);\n    });\n}\n\n/**\n * @typedef {object} Shared\n * @property {string} currentScope\n * @property {string} SNPT_MODE\n * @property {object} globalConfig\n * @const\n */\nlet activatePopup = true;\nexport const Shared = {\n    // In which type of activity the editor is being used\n    currentScope: document.querySelector('body')?.id,\n    // Whether to activate the contextual popup or not\n    activatePopup: activatePopup,\n    // Hold other global configuration\n    globalConfig: {}\n};\n\n/**\n * @returns {string} a randomID\n */\nexport function genID() {\n    return 'g' + Math.random().toString(32).substring(2);\n}\n\n/**\n * @param {Object.<string, any>} ctx\n * @param {string} expr\n * @returns {any} The evaluated expression within the context ctx\n */\nexport function scopedEval(ctx, expr) {\n    const listArgs = [];\n    const listVals = [];\n    // Remove functions from ctx\n    if (ctx) {\n        Object.keys(ctx).forEach((key) => {\n            if (typeof ctx[key] !== \"function\") {\n                listArgs.push(key);\n                listVals.push(ctx[key]);\n            }\n        });\n    }\n    listArgs.push('expr');\n    listArgs.push('return eval(expr)');\n    listVals.push(expr);\n\n    const evaluator = new Function(...listArgs);\n    return evaluator(...listVals);\n}\n\n/**\n * @param {string} text\n * @param {Object.<string, any>} ctx2\n * @returns {string}\n */\nconst defineVar = function(text, ctx2) {\n    const pos = text.indexOf(\"=\");\n    const varname = text.substring(0, pos).trim();\n    const varvalue = scopedEval(ctx2, text.substring(pos + 1).trim());\n    ctx2[varname] = varvalue;\n    return varname;\n};\n\n/**\n * Extends Mustache templates with some helpers\n * @param {Object.<string, any>} ctx\n * @param {Object.<string, Object.<string, string>} translations\n */\nconst applyMustacheHelpers = function(ctx, translations) {\n\n    ctx[\"if\"] = () =>\n        /**\n         * @param {string} text\n         * @param {Mustache.render} render\n         */\n        function(text, render) {\n        const pos = text.indexOf(\"]\");\n        const condition = text.substring(0, pos).trim().substring(1);\n        const show = scopedEval(ctx, condition);\n        if (show) {\n            return render(text.substring(pos + 1).trim());\n        }\n        return \"\";\n        };\n    ctx[\"var\"] = () =>\n         /**\n         * @param {string} text\n         */\n        function(text) {\n            defineVar(text, ctx);\n        };\n    ctx[\"eval\"] = () =>\n        /**\n         * @param {string} text\n         */\n        function(text) {\n            return scopedEval(ctx, text) + \"\";\n        };\n    ctx[\"I18n\"] = () =>\n        /**\n         * @param {string} text\n         * @param {Mustache.render} render\n         */\n        function(text, render) {\n            const key = render(text).trim();\n            const dict = translations[key] || {};\n            return dict[ctx[\"LANG\"]] || dict[\"en\"] || dict[\"ca\"] || key;\n        };\n    ctx[\"each\"] = () =>\n        /**\n         * @param {string} text\n         */\n        function(text) {\n        const pos = text.indexOf(\"]\");\n        const cond = text.substring(0, pos).trim().substring(1);\n        const components = cond.split(\",\");\n        const dim = components.length;\n        const maxValues = new Array(dim);\n        const loopVars = new Array(dim);\n        let total = 1;\n        const cc = 'i'.charCodeAt(0);\n        components.forEach((def, i) => {\n            const parts = def.split(\"=\");\n            if (parts.length === 1) {\n                parts.unshift(String.fromCharCode(cc + i));\n            }\n            const cname = parts[0].trim();\n            loopVars[i] = cname;\n            const dm = scopedEval(ctx, parts[1]);\n            total = total * dm;\n            maxValues[i] = dm;\n            ctx[cname] = 1;\n        });\n        let output = [];\n        for (let _ei = 0; _ei < total; _ei++) {\n            // @ts-ignore\n            output.push(Mustache.render(text.substring(pos + 1), ctx));\n            let currentDim = dim - 1;\n            let incrUp;\n            do {\n                const oldValue = ctx[loopVars[currentDim]] - 1;\n                const newValue = (oldValue + 1) % maxValues[currentDim] + 1;\n                ctx[loopVars[currentDim]] = newValue;\n                incrUp = newValue < oldValue;\n                currentDim--;\n            } while (currentDim >= 0 && incrUp);\n        }\n        return output.join('');\n        };\n    ctx[\"for\"] = () =>\n         /**\n         * @param {string} text\n         */\n        function(text) {\n        const pos = text.indexOf(\"]\");\n        const condition = text.substring(0, pos).trim().substring(1);\n        const parts = condition.split(\";\");\n        const loopvar = defineVar(parts[0], ctx);\n        let output = \"\";\n        let maxIter = 0; // Prevent infinite loop imposing a limit of 1000\n        while (scopedEval(ctx, parts[1]) && maxIter < 1000) {\n            // @ts-ignore\n            output += Mustache.render(text.substring(pos + 1), ctx);\n            if (parts.length === 3 && parts[2].trim()) {\n                defineVar(loopvar + \"=\" + parts[2], ctx);\n            } else {\n                ctx[loopvar] = ctx[loopvar] + 1;\n            }\n            maxIter++;\n        }\n        return output;\n    };\n    };\n\n/**\n * @param {string} template\n * @param {Object.<string, any>} context\n * @param {Object.<string, Object.<string, string>>} [translations]\n * @returns {string} The interpolated template given a context and translations map\n */\nexport function templateRendererMustache(template, context, translations) {\n    const ctx = {...context};\n    Object.keys(ctx).forEach(key => {\n        if (ctx[key] === \"$RND\") {\n            ctx[key] = genID();\n        }\n    });\n    applyMustacheHelpers(ctx, translations ?? {});\n    // @ts-ignore\n    return Mustache.render(template, ctx);\n}\n\n\n/**\n * @param {string} template\n * @param {Object.<string, any>} context\n * @param {Object.<string, Object.<string, any>>} translations\n * @returns {Promise<string>} The interpolated template given a context and translations map\n */\nasync function templateRendererEJS(template, context, translations) {\n    /** @type {Object.<string, any>} */\n    const ctx = {...context, I18n: {}};\n    Object.keys(ctx).forEach(key => {\n        if (ctx[key] === \"$RND\") {\n            ctx[key] = genID();\n        }\n    });\n    const lang = ctx[\"LANG\"];\n    for (let wordKey in translations) {\n        const dict = translations[wordKey];\n        ctx[\"I18n\"][wordKey] = dict[lang] || dict[\"en\"] || dict[\"es\"] || wordKey;\n    }\n    const _ejs = await getEJS();\n    return _ejs.render(template, ctx);\n}\n\n/**\n * @param {string} template\n * @param {Object.<string, any>} context\n * @param {Object.<string, Object.<string, any>>} translations\n * @param {string=} engine - (ejs | mustache) optional\n * @returns {Promise<string>} - The interpolated template given a context and translations map\n */\nexport function templateRenderer(template, context, translations, engine) {\n    if (!engine) {\n        engine = template.includes(\"<%\") ? \"ejs\" : \"mustache\";\n    }\n    if (engine === \"ejs\") {\n        return templateRendererEJS(template, context, translations);\n    }\n    // Default to Mustache\n    const tmpl = templateRendererMustache(template, context, translations);\n    return Promise.resolve(tmpl);\n}\n\n/**\n * @typedef {Object} ParamOption\n * @property {string} l\n * @property {string} v\n */\n/**\n * @typedef {Object} Param\n * @property {string=} partial\n * @property {string} name\n * @property {string} title\n * @property {'textfield' | 'numeric' | 'checkbox' | 'select' | 'textarea' | 'image' | 'color'} [type]\n * @property {(ParamOption | string)[]} [options]\n * @property {any} value\n * @property {string=} tip\n * @property {string=} tooltip\n * @property {number=} min\n * @property {number=} max\n * @property {string=} transform\n * @property {string=} bind\n * @property {string=} when\n * @property {boolean} [hidden]\n * @property {boolean} [editable]\n */\n/**\n * @typedef {Object} Widget\n * @property {number} id\n * @property {string} key\n * @property {string} category\n * @property {string=} scope - Regex for idenfying allowed body ids\n * @property {string} name\n * @property {string=} instructions\n * @property {'mustache' | 'ejs'} [engine]\n * @property {string} template\n * @property {Param[]=} parameters\n * @property {Object.<string, Object<string, string>>} [I18n]\n * @property {string | string[]} [selectors]\n * @property {string=} insertquery\n * @property {string=} unwrap\n * @property {string=} for\n * @property {string} version\n * @property {string} author\n * @property {boolean=} hidden\n */\n/**\n * @class\n * @classdesc Wrapper for Widget definition\n */\nexport class WidgetWrapper {\n    #widget;\n    #instructionsParsed = false;\n\n    /**\n     * @param {Widget} widget\n     * @param {Object.<string, any>} partials\n     */\n    constructor(widget, partials) {\n        this.#widget = widget;\n        const parameters = widget.parameters;\n        if (!parameters) {\n            return;\n        }\n        // Do some fixes on parameters\n        parameters.forEach((param, i) => {\n            // Case of a partial\n            if (param.partial) {\n                if (!partials[param.partial]) {\n                    console.error(\"Cannot find partial for \", param.partial, partials);\n                    return;\n                }\n                parameters[i] = partials[param.partial];\n            }\n            if (!param.type) {\n                if (typeof param.value === \"boolean\") {\n                    param.type = 'checkbox';\n                } else if (typeof param.value === \"number\") {\n                    param.type = 'numeric';\n                } else if (typeof param.value === \"string\") {\n                    param.type = param.options ? 'select' : 'textfield';\n                }\n            }\n        });\n    }\n    /**\n     * @returns {string}\n     */\n    get name() {\n        return this.#widget.name;\n    }\n    /**\n     * @returns {string}\n     */\n    get key() {\n        return this.#widget.key;\n    }\n    /**\n     * @returns {Object}\n     */\n    get I18n() {\n        return this.#widget.I18n || {};\n    }\n    /**\n     * @returns {string}\n     */\n    get template() {\n        return this.#widget.template;\n    }\n    /**\n     * @returns {string}\n     */\n    get category() {\n        return this.#widget.category ?? \"MISC\";\n    }\n    /**\n     * @returns {string=}\n     */\n    get insertquery() {\n        return this.#widget.insertquery;\n    }\n    /**\n     * @returns {string | string[] =}\n     */\n    get selectors() {\n        return this.#widget.selectors;\n    }\n    /**\n     * @returns {string=}\n     */\n    get unwrap() {\n        return this.#widget.unwrap;\n    }\n    /**\n     * @returns {string}\n    */\n    get version() {\n        return this.#widget.version || \"1.0.0\";\n    }\n    /**\n     * @returns {string}\n     */\n    get instructions() {\n        if (this.#widget.instructions && !this.#instructionsParsed) {\n            this.#widget.instructions = decodeURIComponent(this.#widget.instructions);\n            this.#instructionsParsed = true;\n        }\n        return this.#widget.instructions ?? '';\n    }\n    /**\n     * @returns {Param[]}\n     */\n    get parameters() {\n        return this.#widget.parameters ?? [];\n    }\n    /**\n     * @returns {Object.<string, any>}\n     */\n    get defaults() {\n        /** @type {Object.<string, any> } */\n        const obj = {};\n        this.parameters.forEach((param) => {\n            obj[param.name] = param.value;\n        });\n        return obj;\n    }\n    /**\n     * @param {object} ctx\n     * @returns {Promise<string>} The rendered template\n     */\n    render(ctx) {\n        const defaultsCopy = {...this.defaults};\n        const toInterpolate = Object.assign(defaultsCopy, ctx || {});\n        // Decide which template engine to use\n        let engine = this.#widget.engine;\n        return templateRenderer(this.template ?? \"\", toInterpolate,\n            this.#widget.I18n ?? {}, engine);\n    }\n    /**\n     * @param {number} userId\n     * @returns {boolean}\n     */\n    isFor(userId) {\n        // These are administrators\n        if (this.#widget.hidden === true) {\n            return false;\n        }\n        let grantStr = (this.#widget.for || '').trim();\n        if (grantStr === '' || grantStr === '*' || userId <= 2) {\n            return true;\n        }\n        let allowMode = true;\n        if (grantStr.startsWith('-')) {\n            allowMode = false;\n        }\n        grantStr = grantStr.replace(/[+\\- ]/g, '');\n        const grantList = grantStr.split(\",\");\n        const isAllowed = (allowMode && grantList.indexOf(userId + \"\") >= 0) || (!allowMode && grantList.indexOf(userId + \"\") < 0);\n        return isAllowed;\n    }\n    /**\n     * @param {string=} scope\n     * @returns {boolean}\n     */\n    isUsableInScope(scope) {\n        scope = scope ?? Shared.currentScope ?? '';\n        const widgetScopes = this.#widget.scope;\n        if (!scope || !widgetScopes || widgetScopes === \"*\") {\n            return true;\n        }\n        const regex = new RegExp(widgetScopes);\n        return regex.exec(scope) != null;\n    }\n    /**\n     * @returns {boolean}\n     */\n    isFilter() {\n        return this.category?.toLowerCase() === \"filtres\";\n    }\n    /**\n     * @returns {boolean}\n     */\n    hasBindings() {\n        return this.parameters.filter(param => param.bind !== undefined).length > 0;\n    }\n    /**\n     * Recovers the property value named name of the original definition\n     * @param {string} name\n     * @returns {*}\n     */\n    prop(name) {\n        // @ts-ignore\n        return this.#widget[name];\n    }\n}\n\n/**\n * @param {string} s - string to the hashed\n * @returns {number}\n */\nexport function hashCode(s) {\n    s = s || \"\";\n    let h = 0;\n    const l = s.length;\n    let i = 0;\n    if (l > 0) {\n        while (i < l) {\n            h = (h << 6) + ((s.charCodeAt(i) - 65) | 0);\n            i++;\n        }\n    }\n    return Math.abs(h);\n}\n\n/**\n * @class\n * @classdesc Defines local and session storage classes for a given context (user & course)\n */\nexport class UserStorage {\n    static _instances = {};\n    _userId = 0;\n    _courseId = 0;\n    _localStore;\n    _sessionStore;\n    STORE_KEY;\n    /**\n     * @param {number} userId\n     * @param {number} courseId\n     * @static\n     * @returns {UserStorage} - The instance\n     */\n    static getInstance(userId, courseId) {\n        const key = userId + \"_\" + courseId;\n        // @ts-ignore\n        if (!UserStorage._instances[key]) {\n            // @ts-ignore\n            UserStorage._instances[key] = new UserStorage(userId, courseId);\n        }\n        // @ts-ignore\n        return UserStorage._instances[key];\n    }\n    // Private constructor\n    // @ts-ignore\n    constructor(userId, courseId) {\n        this._userId = userId;\n        this._courseId = courseId;\n        this.STORE_KEY = \"iedib-widgets_\" + userId;\n        this._localStore = {valors: {}};\n        this._sessionStore = {searchtext: ''};\n        this.loadStore();\n    }\n    /**\n     * @returns {void}\n     */\n    loadStore() {\n        if (typeof window.localStorage !== 'undefined') {\n            const txt = window.localStorage.getItem(this.STORE_KEY);\n            if (txt) {\n                try {\n                    this._localStore = JSON.parse(txt);\n                } catch (ex) {\n                    console.error(ex);\n                }\n            }\n        }\n        // Added storage for this _course\n        // @ts-ignore\n        if (!this._localStore[\"_\" + this._courseId]) {\n            // @ts-ignore\n            this._localStore[\"_\" + this._courseId] = {};\n        }\n        if (typeof window.sessionStorage !== 'undefined') {\n            const txt2 = window.sessionStorage.getItem(this.STORE_KEY);\n            if (txt2) {\n                try {\n                    this._sessionStore = JSON.parse(txt2);\n                } catch (ex) {\n                    console.error(ex);\n                }\n            }\n        }\n    }\n    /**\n     * @template T\n     * @param {string} key\n     * @param {T} defaultValue\n     * @returns {T}\n     */\n    getFromLocal(key, defaultValue) {\n        if (!this._localStore) {\n            return defaultValue;\n        }\n        // @ts-ignore\n        const MLSC = this._localStore[\"_\" + this._courseId]; // Almost everything goes here\n        const MLS = this._localStore; // Only configuration params\n        if (MLSC) {\n            // @ts-ignore\n            return MLSC[key] || MLS[key] || defaultValue;\n        } else if (MLS) {\n            // @ts-ignore\n            return MLS[key] || defaultValue;\n        }\n        return defaultValue;\n    }\n    /**\n     * @template T\n     * @param {string} key\n     * @param {T} defaultValue\n     * @returns {T}\n     */\n    getFromSession(key, defaultValue) {\n        // @ts-ignore\n        return (this._sessionStore[key] != null ? this._sessionStore[key] : defaultValue);\n    }\n    /**\n     * @param {'local' | 'session' | undefined} type\n     */\n    saveStore(type) {\n        if (type === 'local' && typeof window.localStorage !== 'undefined') {\n            window.localStorage.setItem(this.STORE_KEY, JSON.stringify(this._localStore));\n        } else if (type === 'session' && typeof window.sessionStorage !== 'undefined') {\n            window.sessionStorage.setItem(this.STORE_KEY, JSON.stringify(this._sessionStore));\n        } else if (type == null) {\n            if (typeof window.localStorage !== 'undefined') {\n                window.localStorage.setItem(this.STORE_KEY, JSON.stringify(this._localStore));\n            }\n            if (typeof window.sessionStorage !== 'undefined') {\n                window.sessionStorage.setItem(this.STORE_KEY, JSON.stringify(this._sessionStore));\n            }\n        }\n    }\n    /**\n     * @template T\n     * @param {string} key\n     * @param {T} value\n     * @param {boolean} persist\n     * @returns {void}\n     */\n    setToLocal(key, value, persist) {\n        if (this._localStore == null) {\n            return;\n        }\n        // @ts-ignore\n        const MLSC = this._localStore[\"_\" + this._courseId]; // Almost everything goes here\n        const MLS = this._localStore; // Only configuration params\n\n        // @ts-ignore\n        if (typeof (theValueMap) === 'object') {\n            if (MLSC && key === 'saveall_data' || key === 'valors') {\n                MLSC[key] = MLSC[key] || {};\n            } else {\n                // @ts-ignore\n                MLS[key] = MLS[key] || {};\n            }\n            // @ts-ignore\n            const keys = Object.keys(value);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const theKey = keys[i];\n                // @ts-ignore\n                const val = value[theKey];\n                if (MLSC && key === 'saveall_data' || key === 'valors') {\n                    MLSC[key][theKey] = val;\n                } else {\n                    // @ts-ignore\n                    MLS[key][theKey] = val;\n                }\n            }\n        } else {\n            // @ts-ignore\n            MLS[key] = value;\n        }\n        if (persist) {\n            this.saveStore(\"local\");\n        }\n    }\n    /**\n     * @template T\n     * @param {string} key\n     * @param {T} value\n     * @param {boolean} persist\n     * @returns {void}\n     */\n    setToSession(key, value, persist) {\n        if (typeof (value) === 'object') {\n            // @ts-ignore\n            this._sessionStore[key] = this._sessionStore[key] || {};\n            // @ts-ignore\n            const keys = Object.keys(value);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const theKey = keys[i];\n                // @ts-ignore\n                const val = value[theKey];\n                // @ts-ignore\n                this._sessionStore[key][theKey] = val;\n            }\n        } else {\n            // @ts-ignore\n            this._sessionStore[key] = value;\n        }\n        if (persist) {\n            this.saveStore(\"session\");\n        }\n    }\n\n}\n\n\n/**\n * @param {string} str1\n * @param {string} needle\n * @returns {boolean} Whether str1 contains needle or not\n */\nexport function searchComp(str1, needle) {\n    str1 = (str1 || '').trim().toLowerCase();\n    needle = (needle || '').trim().toLowerCase();\n    str1 = str1.replace(/[àáâãäå]/, \"a\")\n        .replace(/[èéêë]/, \"e\")\n        .replace(/[ìíîï]/, \"i\")\n        .replace(/[òóôö]/, \"o\")\n        .replace(/[ùúüû]/, \"u\")\n        .replace(/ç/, \"c\")\n        .replace(/·/, \"\");\n    needle = needle.replace(/[àáâãäå]/, \"a\")\n        .replace(/[èéêë]/, \"e\")\n        .replace(/[ìíîï]/, \"i\")\n        .replace(/[òóôö]/, \"o\")\n        .replace(/[ùúüû]/, \"u\")\n        .replace(/ç/, \"c\")\n        .replace(/·/, \"\");\n    return str1.indexOf(needle) >= 0;\n}\n\n/** Default transformers */\nconst Transformers = {\n    // @ts-ignore\n    \"toUpperCase\": function(txt) {\n        return (txt + \"\").toUpperCase();\n    },\n    // @ts-ignore\n    \"toLowerCase\": function(txt) {\n        return (txt + \"\").toLowerCase();\n    },\n    // @ts-ignore\n    \"trim\": function(txt) {\n        return (txt + \"\").trim();\n    },\n    // @ts-ignore\n    \"ytId\": function(txt) {\n        // Finds the youtubeId in a text\n        const rx = /^.*(?:(?:youtu\\.be\\/|v\\/|vi\\/|u\\/\\w\\/|embed\\/|shorts\\/)|(?:(?:watch)?\\?v(?:i)?=|&v(?:i)?=))([^#&?]*).*/;\n        const r = (txt || '').match(rx);\n        if (r?.length) {\n            return r[1];\n        }\n        return txt;\n    },\n    // @ts-ignore\n    \"vimeoId\": function(txt) {\n        const regExp = /^.*(vimeo\\.com\\/)((channels\\/[A-z]+\\/)|(groups\\/[A-z]+\\/videos\\/))?(\\d+)/;\n        const match = (txt || \"\").match(regExp);\n        if (match?.[5]) {\n            return match[5];\n        }\n        return txt;\n    },\n    // @ts-ignore\n    \"serveGDrive\": function(txt) {\n        // Expecting https://drive.google.com/file/d/1DDUzcFrOlzWb3CBdFPJ1NCNXClvPbm5B/preview\n        const res = (txt + \"\").match(/https:\\/\\/drive.google.com\\/file\\/d\\/([a-zA-Z0-9_]+)\\//);\n        if (res?.length) {\n            const driveId = res[1];\n            return \"https://docs.google.com/uc?export=open&id=\" + driveId;\n        }\n        return txt;\n    },\n    // @ts-ignore\n    \"removeHTML\": function(txt) {\n        return (txt || '').replace(/<[^>]*>?/gm, '');\n    },\n    // @ts-ignore\n    \"escapeHTML\": function(txt) {\n        return (txt || '').replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    },\n    // @ts-ignore\n    \"encodeHTML\": function(txt) {\n        // @ts-ignore\n        return this.encodeURIComponent(txt || \"\");\n    },\n    // @ts-ignore\n    \"escapeQuotes\": function(txt) {\n        return (txt || '').replace(/\"/gm, \"'\");\n    }\n};\n\n\nclass Builder {\n    transSeq;\n    // @ts-ignore\n    constructor(transformStr) {\n        const parts = transformStr.split('|');\n        this.transSeq = [];\n        for (let j = 0, lenj = parts.length; j < lenj; j++) {\n            const prts = parts[j].trim();\n            // @ts-ignore\n            const transfunc = Transformers[prts];\n            if (transfunc != null) {\n                this.transSeq.push(transfunc);\n            } else {\n                console.error(\"Cannot find transformer named \" + prts);\n            }\n        }\n    }\n\n    // @ts-ignore\n    reduce(text) {\n        for (let j = 0, lenj = this.transSeq.length; j < lenj; j++) {\n            const transfunc = this.transSeq[j];\n            text = transfunc(text);\n        }\n        return text;\n    }\n}\n\n/**\n * @param {string} transformStr\n * @returns {Builder} call reduce(text) function\n */\nexport function stream(transformStr) {\n    return new Builder(transformStr);\n}\n\n/**\n * @param {string} name\n * @returns {string} Replaces $ apperences by _ to make the name compatible by data attributes\n */\nexport function cleanParameterName(name) {\n    return name.replace(/\\$/g, '_');\n}\n\n/**\n * Creates a filter funcion from filterCode\n * @param {string} filterCode\n * @returns {Function?}\n */\nexport function createFilterFunction(filterCode) {\n    filterCode = filterCode.replace('<!--<widgetcode>', '').replace('</widgetcode>-->', '');\n    let userWidgetFilter = null;\n    try {\n        userWidgetFilter = new Function('text', 'tiny', 'opts', filterCode);\n    } catch (ex) {\n        userWidgetFilter = null;\n        console.error(ex);\n    }\n    return userWidgetFilter;\n}\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @param {string} widgetTemplate\n * @param {boolean} silent\n * @param {object?} mergevars\n * @returns {Promise<boolean>} - True if the filter can be compiled\n */\nexport async function applyWidgetFilter(editor, widgetTemplate, silent, mergevars) {\n    const translations = await getStrings([\n        {key: 'filterres', component: 'tiny_widgethub'},\n        {key: 'nochanges', component: 'tiny_widgethub'}\n    ]);\n    // Es tracta d'un filtre, no d'un widget i s'ha de tractar de forma diferent\n    const userWidgetFilter = createFilterFunction(widgetTemplate);\n\n    if (!userWidgetFilter) {\n        editor.notificationManager.open({\n            text: translations[0] + \": Invalid filter\",\n            type: 'danger',\n            timeout: 4000\n        });\n        return false;\n    }\n    // @ts-ignore\n    const handleFilterResult = function(res) {\n        const out = res[0];\n        let msg = res[1];\n        if (out != null) {\n            if (typeof out === \"string\") {\n                editor.setContent(out);\n                editor.notificationManager.open({\n                    text: translations[0] + \": \" + msg,\n                    type: 'success',\n                    timeout: 5000\n                });\n            } else if (out === true) {\n                editor.notificationManager.open({\n                    text: translations[0] + \": \" + msg,\n                    type: 'success',\n                    timeout: 5000\n                });\n            } else if (out === false && !silent) {\n                editor.notificationManager.open({\n                    text: translations[1],\n                    type: 'info',\n                    timeout: 4000\n                });\n            }\n        } else if (!silent) {\n            editor.notificationManager.open({\n                text: translations[1],\n                type: 'info',\n                timeout: 4000\n            });\n        }\n    };\n\n    const initialHTML = editor.getContent();\n    const filteredResult = userWidgetFilter(initialHTML, editor.dom.window, mergevars);\n    // Hi ha la possibilitat que el filtre retorni una promesa o un array\n    const isPromise = filteredResult != null && typeof (filteredResult) === 'object' && ('then' in filteredResult);\n    if (isPromise) {\n        filteredResult.then(handleFilterResult);\n    } else {\n        handleFilterResult(filteredResult || [null, \"El filter no ha produït canvis\"]);\n    }\n    return true;\n}\n\n/**\n * Safe conversion of a string to integer by handling errors and NaN values\n * In this case, the def number passed is returned\n * @param {string | undefined | null | number} str\n * @param {number} def - default value\n * @returns {number}\n */\nexport function convertInt(str, def) {\n    if (str && typeof str === 'number') {\n        return Math.floor(str);\n    }\n    if (!str || !(str + \"\").trim() || !(str + \"\").match(/^\\s*[+-]?\\d+(\\.\\d*)?\\s*$/)) {\n        return def;\n    }\n    try {\n        const val = parseInt(str + \"\");\n        if (!isNaN(val)) {\n            return val;\n        }\n    } catch (ex) {\n        // Pass\n    }\n    return def;\n}\n\n/**\n * Finds the parameter with a given name within the list of objects\n * @param {string} varname\n * @param {Param[]} listVars\n * @returns {Param | null}\n */\nexport function findVariableByName(varname, listVars) {\n    if (!listVars) {\n        return null;\n    }\n    let found = null;\n    const len = listVars.length;\n    let k = 0;\n    while (k < len && !found) {\n        if (listVars[k].name === varname) {\n            found = listVars[k];\n        }\n        k++;\n    }\n    return found;\n}\n\n/**\n * Safely joins two parts of an url\n * @param {string} a\n * @param {string?} b\n * @returns {string}\n */\nexport function pathJoin(a, b) {\n    a = (a || \"\").trim();\n    b = (b || \"\").trim();\n    if (!a.endsWith('/')) {\n        a = a + '/';\n    }\n    if (b.startsWith('/')) {\n        b = b.substring(1);\n    }\n    return a + b;\n}\n\n/**\n * Adds the baseurl if the passed url does not start with http or https\n * @param {string} base\n * @param {string?} url\n * @returns {string}\n */\nexport function addBaseToUrl(base, url) {\n    url = (url || \"\").trim();\n    if (url.toLowerCase().startsWith(\"http\")) {\n        return url;\n    }\n    // Afegir la base\n    const out = pathJoin(base, url);\n    return out;\n}\n/**\n * Creates a script tag and adds it to the head section. It handles loading and error cases\n * @param {string} url\n * @param {string} [id]\n * @param {() => void} [onSuccess]\n * @param {() => void} [onError]\n */\nexport function addScript(url, id, onSuccess, onError) {\n    if (id && document.head.querySelector('script#' + id) != null) {\n        // Check if already in head\n        return;\n    }\n    const newScript = document.createElement('script');\n    newScript.type = \"text/javascript\";\n    newScript.src = url;\n    if (id) {\n        newScript.setAttribute(\"id\", id);\n    }\n    newScript.onload = () => {\n        console.info(\"Loaded \", url);\n        if (onSuccess) {\n            onSuccess();\n        }\n    };\n    newScript.onerror = function() {\n        console.error(\"Error loading \", url);\n        if (onError) {\n            onError();\n        }\n    };\n    document.head.append(newScript);\n}\n\n// @ts-ignore\nconst performCasting = function(value, type) {\n    switch (type) {\n        case (\"boolean\"):\n            if (value === 1 || value === \"1\" || value === true || value === \"true\") {\n                value = true;\n            } else {\n                value = false;\n            }\n            break;\n        case (\"number\"):\n            try {\n                value = parseInt(value);\n            } catch (ex) {\n                console.error(\"Error parsing number\", ex);\n            }\n            break;\n        case (\"string\"):\n            value = value + \"\";\n            break;\n    }\n    return value;\n};\n\nconst BindingFactory = {\n    \"hasClass\": class {\n        // @ts-ignore\n        constructor(elem, className, castTo, neg) {\n            this.elem = elem;\n            this.castTo = castTo;\n            this.neg = neg;\n            this.className = className;\n        }\n        getValue() {\n            // ^ XOR gate\n            const res = this.neg ^ this.elem.classList.contains(this.className);\n            return this.castTo === 'boolean' ? Boolean(res) : res;\n        }\n        // @ts-ignore\n        setValue(bool) {\n            if (this.neg ^ bool) {\n                this.elem.classList.add(this.className);\n            } else {\n                this.elem.classList.remove(this.className);\n            }\n        }\n    },\n    \"classRegex\": class {\n        // @ts-ignore\n        constructor(elem, classExpr, castTo) {\n            this.elem = elem;\n            this.castTo = castTo;\n            this.classExpr = classExpr;\n        }\n        getValue() {\n            let ret = \"\";\n            // @ts-ignore\n            this.elem.classList.forEach(c => {\n                const match = c.match(this.classExpr);\n                if (match?.[1] && typeof (match[1]) === \"string\") {\n                    ret = match[1];\n                }\n            });\n            return performCasting(ret, this.castTo);\n        }\n        // @ts-ignore\n        setValue(val) {\n            const cl = this.elem.classList;\n            // @ts-ignore\n            cl.forEach(c => {\n                if (c.match(this.classExpr)) {\n                    cl.remove(c);\n                }\n            });\n            cl.add(this.classExpr.replace(\"(.*)\", val + \"\"));\n        }\n    },\n    \"attr\": class {\n        // @ts-ignore\n        constructor(elem, attrName, castTo) {\n            this.elem = elem;\n            this.castTo = castTo;\n            this.attrName = attrName;\n        }\n        getValue() {\n            return performCasting(this.elem.getAttribute(this.attrName), this.castTo);\n        }\n        // @ts-ignore\n        setValue(val) {\n            if (typeof val === \"boolean\") {\n                val = val ? 1 : 0;\n            }\n            return this.elem.setAttribute(this.attrName, val + \"\");\n        }\n    },\n    \"hasAttr\": class {\n        // @ts-ignore\n        constructor(elem, attr, castTo, neg) {\n            this.elem = elem;\n            this.castTo = castTo;\n            this.neg = neg;\n            const parts = attr.split(\"=\");\n            this.attrName = parts[0].trim();\n            if (parts.length > 1) {\n                this.attrValue = parts[1].replace(/[\"']/g, '').trim();\n            }\n        }\n        getValue() {\n            let found = this.elem.getAttribute(this.attrName) != null;\n            if (this.attrValue) {\n                found = found && this.elem.getAttribute(this.attrName) === this.attrValue;\n            }\n            // @ts-ignore\n            const res = this.neg ^ found;\n            if (this.castTo === \"boolean\") {\n                return Boolean(res);\n            } else {\n                return res;\n            }\n        }\n        // @ts-ignore\n        setValue(bool) {\n            if (this.neg ^ bool) {\n                this.elem.setAttribute(this.attrName, this.attrValue || '');\n            } else {\n                this.elem.removeAttribute(this.attrName);\n            }\n        }\n    },\n    \"attrRegex\": class {\n        // @ts-ignore\n        constructor(elem, attr, castTo) {\n            this.elem = elem;\n            this.castTo = castTo;\n            const parts = attr.split(\"=\");\n            this.attrName = parts[0].trim();\n            if (parts.length > 1) {\n                this.attrValue = parts[1].replace(/[\"']/g, '').trim();\n            }\n        }\n        getValue() {\n            let found = this.elem.getAttribute(this.attrName) != null;\n            if (found) {\n                const match = this.elem.getAttribute(this.attrName).match(this.attrValue);\n                if (match?.[1] && typeof (match[1]) === \"string\") {\n                    return performCasting(match[1], this.castTo);\n                }\n                return '';\n            }\n            return null;\n        }\n        // @ts-ignore\n        setValue(val) {\n            this.elem.setAttribute(this.attrName, this.attrValue.replace(\"(.*)\", val + \"\"));\n        }\n    },\n    \"hasStyle\": class {\n        // @ts-ignore\n        constructor(elem, attr, castTo, neg) {\n            this.elem = elem;\n            this.castTo = castTo;\n            this.neg = neg;\n            const parts = attr.split(\":\");\n            this.styName = parts[0].trim();\n            if (parts.length > 1) {\n                this.styValue = parts[1].replace(/[\"']/g, '').trim();\n            }\n        }\n        getValue() {\n            const st = this.elem.style;\n            const has = st.getPropertyValue(this.styName) === this.styValue;\n            // @ts-ignore\n            const res = has ^ this.neg;\n            if (this.castTo === \"boolean\") {\n                return Boolean(res);\n            } else {\n                return res;\n            }\n        }\n        // @ts-ignore\n        setValue(bool) {\n            if (bool ^ this.neg) {\n                this.elem.style.setProperty(this.styName, this.styValue);\n            } else {\n                this.elem.style.removeProperty(this.styName);\n            }\n        }\n    },\n    \"styleRegex\": class {\n        // @ts-ignore\n        constructor(elem, attr, castTo) {\n            this.elem = elem;\n            this.castTo = castTo;\n            const parts = attr.split(\":\");\n            this.styName = parts[0].trim();\n            if (parts.length > 1) {\n                this.styValue = parts[1].replace(/[\"']/g, '').trim();\n            }\n        }\n        getValue() {\n            const st = this.elem.style;\n            const has = st.getPropertyValue(this.styName) != null;\n            if (has) {\n                const match = st.getPropertyValue(this.styName).match(this.styValue);\n                if (match?.[1] && (typeof match[1]) === \"string\") {\n                    return performCasting(match[1], this.castTo);\n                }\n                return '';\n            }\n            return null;\n        }\n        // @ts-ignore\n        setValue(val) {\n            this.elem.style.setProperty(this.styName, this.styValue.replace(\"(.*)\", val + \"\"));\n        }\n    }\n};\n\n/**\n * @typedef {Object} Binding\n * @property {() => any} getValue\n * @property {(value: any) => void} setValue\n */\n/**\n * @param {string} definition\n * @param {HTMLElement} elem  - The root of widget\n * @param {string} castTo  - The type that must be returned\n * @returns {Binding}\n */\nexport const parseBinding = (definition, elem, castTo) => {\n    if (!definition || !elem) {\n        // @ts-ignore\n        return null;\n    }\n    const regex = /^\\s*(?:<([^<>]+)>)?\\s*(not\\s+)?(classRegex|hasClass|styleRegex|hasStyle|attr|attrRegex|hasAttr)\\s+<([^<>]+)>\\s*$/g;\n    const m = regex.exec(definition);\n    if (m) {\n        if (m[1]) {\n            // Rule applied to a child of the main widget node\n            // @ts-ignore\n            elem = elem.querySelector(m[1]);\n        }\n        const neg = m[2] !== undefined;\n        const type = m[3];\n        const params = m[4];\n        // @ts-ignore\n        return new BindingFactory[type](elem, params, castTo, neg);\n    }\n    // @ts-ignore\n    return null;\n};\n\n/**\n * Capitalizes the first letter of a string\n * @param {string | undefined | null} s\n * @returns {string}\n */\nexport const capitalize = s => (s && s[0].toUpperCase() + s.slice(1)) || \"\";"],"names":["Ejs","base","url","trim","toLowerCase","startsWith","pathJoin","id","onSuccess","onError","document","head","querySelector","newScript","createElement","type","src","setAttribute","onload","console","info","onerror","error","append","editor","widgetTemplate","silent","mergevars","translations","key","component","userWidgetFilter","createFilterFunction","notificationManager","open","text","timeout","handleFilterResult","res","out","msg","setContent","initialHTML","getContent","filteredResult","dom","window","then","name","replace","str","def","Math","floor","match","val","parseInt","isNaN","ex","varname","listVars","found","len","length","k","s","h","l","i","charCodeAt","abs","str1","needle","indexOf","transformStr","Builder","Shared","currentScope","_document$querySelect","activatePopup","globalConfig","genID","random","toString","substring","scopedEval","ctx","expr","listArgs","listVals","Object","keys","forEach","push","Function","evaluator","defineVar","ctx2","pos","varvalue","templateRendererMustache","template","context","render","condition","dict","components","split","dim","maxValues","Array","loopVars","total","cc","parts","unshift","String","fromCharCode","cname","dm","output","_ei","Mustache","incrUp","currentDim","oldValue","newValue","join","loopvar","maxIter","applyMustacheHelpers","templateRendererEJS","I18n","lang","wordKey","Promise","resolve","reject","require","ejsModule","templateRenderer","engine","includes","tmpl","constructor","widget","partials","parameters","param","partial","value","options","_classPrivateFieldGet","category","insertquery","selectors","unwrap","version","instructions","this","decodeURIComponent","defaults","obj","defaultsCopy","toInterpolate","assign","isFor","userId","hidden","grantStr","for","allowMode","grantList","isUsableInScope","scope","widgetScopes","RegExp","exec","isFilter","hasBindings","filter","undefined","bind","prop","UserStorage","courseId","_instances","_userId","_courseId","STORE_KEY","_localStore","valors","_sessionStore","searchtext","loadStore","localStorage","txt","getItem","JSON","parse","sessionStorage","txt2","getFromLocal","defaultValue","MLSC","MLS","getFromSession","saveStore","setItem","stringify","setToLocal","persist","theValueMap","theKey","setToSession","Transformers","toUpperCase","r","encodeURIComponent","transSeq","j","lenj","prts","transfunc","reduce","filterCode","a","b","endsWith","performCasting","BindingFactory","elem","className","castTo","neg","getValue","classList","contains","Boolean","setValue","bool","add","remove","classExpr","ret","c","cl","attrName","getAttribute","attr","attrValue","removeAttribute","styName","styValue","style","getPropertyValue","setProperty","removeProperty","st","definition","m","params","slice"],"mappings":"6zCAsCIA,8JA29ByBC,KAAMC,SAC/BA,KAAOA,KAAO,IAAIC,QACVC,cAAcC,WAAW,eACtBH,WAGCI,SAASL,KAAMC,kCAULA,IAAKK,GAAIC,UAAWC,YACtCF,IAAqD,MAA/CG,SAASC,KAAKC,cAAc,UAAYL,iBAI5CM,UAAYH,SAASI,cAAc,UACzCD,UAAUE,KAAO,kBACjBF,UAAUG,IAAMd,IACZK,IACAM,UAAUI,aAAa,KAAMV,IAEjCM,UAAUK,OAAS,KACfC,QAAQC,KAAK,UAAWlB,KACpBM,WACAA,aAGRK,UAAUQ,QAAU,WAChBF,QAAQG,MAAM,iBAAkBpB,KAC5BO,SACAA,WAGRC,SAASC,KAAKY,OAAOV,sDA5KeW,OAAQC,eAAgBC,OAAQC,iBAC9DC,mBAAqB,oBAAW,CAClC,CAACC,IAAK,YAAaC,UAAW,kBAC9B,CAACD,IAAK,YAAaC,UAAW,oBAG5BC,iBAAmBC,qBAAqBP,oBAEzCM,wBACDP,OAAOS,oBAAoBC,KAAK,CAC5BC,KAAMP,aAAa,GAAK,mBACxBb,KAAM,SACNqB,QAAS,OAEN,QAGLC,mBAAqB,SAASC,WAC1BC,IAAMD,IAAI,OACZE,IAAMF,IAAI,GACH,MAAPC,IACmB,iBAARA,KACPf,OAAOiB,WAAWF,KAClBf,OAAOS,oBAAoBC,KAAK,CAC5BC,KAAMP,aAAa,GAAK,KAAOY,IAC/BzB,KAAM,UACNqB,QAAS,QAEE,IAARG,IACPf,OAAOS,oBAAoBC,KAAK,CAC5BC,KAAMP,aAAa,GAAK,KAAOY,IAC/BzB,KAAM,UACNqB,QAAS,OAEE,IAARG,KAAkBb,QACzBF,OAAOS,oBAAoBC,KAAK,CAC5BC,KAAMP,aAAa,GACnBb,KAAM,OACNqB,QAAS,MAGTV,QACRF,OAAOS,oBAAoBC,KAAK,CAC5BC,KAAMP,aAAa,GACnBb,KAAM,OACNqB,QAAS,OAKfM,YAAclB,OAAOmB,aACrBC,eAAiBb,iBAAiBW,YAAalB,OAAOqB,IAAIC,OAAQnB,WAEpC,MAAlBiB,gBAAsD,iBAApBA,gBAAiC,SAAUA,eAE3FA,eAAeG,KAAKV,oBAEpBA,mBAAmBO,gBAAkB,CAAC,KAAM,0CAEzC,mEAtFwBI,aACxBA,KAAKC,QAAQ,MAAO,mCA+FJC,IAAKC,QACxBD,KAAsB,iBAARA,WACPE,KAAKC,MAAMH,SAEjBA,OAASA,IAAM,IAAI/C,UAAY+C,IAAM,IAAII,MAAM,mCACzCH,cAGDI,IAAMC,SAASN,IAAM,QACtBO,MAAMF,YACAA,IAEb,MAAOG,YAGFP,6FASwBQ,QAASC,cACnCA,gBACM,SAEPC,MAAQ,WACNC,IAAMF,SAASG,WACjBC,EAAI,OACDA,EAAIF,MAAQD,OACXD,SAASI,GAAGhB,OAASW,UACrBE,MAAQD,SAASI,IAErBA,WAEGH,uDAxdcI,OAEjBC,EAAI,QACFC,GAFNF,EAAIA,GAAK,IAEGF,WACRK,EAAI,KACJD,EAAI,OACGC,EAAID,GACPD,GAAKA,GAAK,IAAOD,EAAEI,WAAWD,GAAK,GAAM,GACzCA,WAGDhB,KAAKkB,IAAIJ,wHAyMOK,KAAMC,eAC7BD,MAAQA,MAAQ,IAAIpE,OAAOC,cAC3BoE,QAAUA,QAAU,IAAIrE,OAAOC,cAC/BmE,KAAOA,KAAKtB,QAAQ,WAAY,KAC3BA,QAAQ,SAAU,KAClBA,QAAQ,SAAU,KAClBA,QAAQ,SAAU,KAClBA,QAAQ,SAAU,KAClBA,QAAQ,IAAK,KACbA,QAAQ,IAAK,IAClBuB,OAASA,OAAOvB,QAAQ,WAAY,KAC/BA,QAAQ,SAAU,KAClBA,QAAQ,SAAU,KAClBA,QAAQ,SAAU,KAClBA,QAAQ,SAAU,KAClBA,QAAQ,IAAK,KACbA,QAAQ,IAAK,IACXsB,KAAKE,QAAQD,SAAW,4BAsGZE,qBACZ,IAAIC,QAAQD,uLA3xBVE,OAAS,CAElBC,2CAAcnE,SAASE,cAAc,gDAAvBkE,sBAAgCvE,GAE9CwE,eALgB,EAOhBC,aAAc,aAMFC,cACL,IAAM7B,KAAK8B,SAASC,SAAS,IAAIC,UAAU,YAQtCC,WAAWC,IAAKC,YACtBC,SAAW,GACXC,SAAW,GAEbH,KACAI,OAAOC,KAAKL,KAAKM,SAAS/D,MACE,mBAAbyD,IAAIzD,OACX2D,SAASK,KAAKhE,KACd4D,SAASI,KAAKP,IAAIzD,UAI9B2D,SAASK,KAAK,QACdL,SAASK,KAAK,qBACdJ,SAASI,KAAKN,aAEI,IAAIO,YAAYN,SAC3BO,IAAaN,uCAQlBO,UAAY,SAAS7D,KAAM8D,YACvBC,IAAM/D,KAAKsC,QAAQ,KACnBd,QAAUxB,KAAKiD,UAAU,EAAGc,KAAK/F,OACjCgG,SAAWd,WAAWY,KAAM9D,KAAKiD,UAAUc,IAAM,GAAG/F,eAC1D8F,KAAKtC,SAAWwC,SACTxC,kBAwHKyC,yBAAyBC,SAAUC,QAAS1E,oBAClD0D,IAAM,IAAIgB,gBAChBZ,OAAOC,KAAKL,KAAKM,SAAQ/D,MACJ,SAAbyD,IAAIzD,OACJyD,IAAIzD,KAAOoD,YApHM,SAASK,IAAK1D,cAEvC0D,IAAG,GAAS,IAKR,SAASnD,KAAMoE,cACTL,IAAM/D,KAAKsC,QAAQ,KACnB+B,UAAYrE,KAAKiD,UAAU,EAAGc,KAAK/F,OAAOiF,UAAU,UAC7CC,WAAWC,IAAKkB,WAElBD,OAAOpE,KAAKiD,UAAUc,IAAM,GAAG/F,QAEnC,IAEXmF,IAAG,IAAU,IAIT,SAASnD,MACL6D,UAAU7D,KAAMmD,MAExBA,IAAG,KAAW,IAIV,SAASnD,aACEkD,WAAWC,IAAKnD,MAAQ,IAEvCmD,IAAG,KAAW,IAKV,SAASnD,KAAMoE,cACL1E,IAAM0E,OAAOpE,MAAMhC,OACnBsG,KAAO7E,aAAaC,MAAQ,UAC3B4E,KAAKnB,IAAG,OAAamB,KAAI,IAAUA,KAAI,IAAU5E,KAEhEyD,IAAG,KAAW,IAIV,SAASnD,YACH+D,IAAM/D,KAAKsC,QAAQ,KAEnBiC,WADOvE,KAAKiD,UAAU,EAAGc,KAAK/F,OAAOiF,UAAU,GAC7BuB,MAAM,KACxBC,IAAMF,WAAW3C,OACjB8C,UAAY,IAAIC,MAAMF,KACtBG,SAAW,IAAID,MAAMF,SACvBI,MAAQ,QACNC,GAAK,IAAI5C,WAAW,GAC1BqC,WAAWd,SAAQ,CAACzC,IAAKiB,WACf8C,MAAQ/D,IAAIwD,MAAM,KACH,IAAjBO,MAAMnD,QACNmD,MAAMC,QAAQC,OAAOC,aAAaJ,GAAK7C,UAErCkD,MAAQJ,MAAM,GAAG/G,OACvB4G,SAAS3C,GAAKkD,YACRC,GAAKlC,WAAWC,IAAK4B,MAAM,IACjCF,OAAgBO,GAChBV,UAAUzC,GAAKmD,GACfjC,IAAIgC,OAAS,SAEbE,OAAS,OACR,IAAIC,IAAM,EAAGA,IAAMT,MAAOS,MAAO,CAElCD,OAAO3B,KAAK6B,kBAASnB,OAAOpE,KAAKiD,UAAUc,IAAM,GAAIZ,UAEjDqC,OADAC,WAAahB,IAAM,IAEpB,OACOiB,SAAWvC,IAAIyB,SAASa,aAAe,EACvCE,UAAYD,SAAW,GAAKhB,UAAUe,YAAc,EAC1DtC,IAAIyB,SAASa,aAAeE,SAC5BH,OAASG,SAAWD,SACpBD,mBACKA,YAAc,GAAKD,eAEzBH,OAAOO,KAAK,KAEvBzC,IAAG,IAAU,IAIT,SAASnD,YACH+D,IAAM/D,KAAKsC,QAAQ,KAEnByC,MADY/E,KAAKiD,UAAU,EAAGc,KAAK/F,OAAOiF,UAAU,GAClCuB,MAAM,KACxBqB,QAAUhC,UAAUkB,MAAM,GAAI5B,SAChCkC,OAAS,GACTS,QAAU,OACP5C,WAAWC,IAAK4B,MAAM,KAAOe,QAAU,KAE1CT,QAAUE,kBAASnB,OAAOpE,KAAKiD,UAAUc,IAAM,GAAIZ,KAC9B,IAAjB4B,MAAMnD,QAAgBmD,MAAM,GAAG/G,OAC/B6F,UAAUgC,QAAU,IAAMd,MAAM,GAAI5B,KAEpCA,IAAI0C,SAAW1C,IAAI0C,SAAW,EAElCC,iBAEGT,QAiBXU,CAAqB5C,IAAK1D,MAAAA,aAAAA,aAAgB,IAEnC8F,kBAASnB,OAAOF,SAAUf,oBAUtB6C,oBAAoB9B,SAAUC,QAAS1E,oBAE5C0D,IAAM,IAAIgB,QAAS8B,KAAM,IAC/B1C,OAAOC,KAAKL,KAAKM,SAAQ/D,MACJ,SAAbyD,IAAIzD,OACJyD,IAAIzD,KAAOoD,kBAGboD,KAAO/C,IAAG,SACX,IAAIgD,WAAW1G,aAAc,OACxB6E,KAAO7E,aAAa0G,SAC1BhD,IAAG,KAASgD,SAAW7B,KAAK4B,OAAS5B,KAAI,IAAUA,KAAI,IAAU6B,qBA7NjEtI,IACOuI,QAAQC,QAAQxI,KAEpB,IAAIuI,SAAQ,CAACC,QAASC,UAEzBC,QAAQ,CAAC,4BAA6BC,YAClC3I,IAAM2I,UACNH,QAAQxI,OACTyI,aAwNKlC,OAAOF,SAAUf,cAUjBsD,iBAAiBvC,SAAUC,QAAS1E,aAAciH,WACzDA,SACDA,OAASxC,SAASyC,SAAS,MAAQ,MAAQ,YAEhC,QAAXD,cACOV,oBAAoB9B,SAAUC,QAAS1E,oBAG5CmH,KAAO3C,yBAAyBC,SAAUC,QAAS1E,qBAClD2G,QAAQC,QAAQO,2FA0DvBC,YAAYC,OAAQC,sJANE,uCAOHD,cACTE,WAAaF,OAAOE,WACrBA,YAILA,WAAWvD,SAAQ,CAACwD,MAAOhF,QAEnBgF,MAAMC,QAAS,KACVH,SAASE,MAAMC,qBAChBlI,QAAQG,MAAM,2BAA4B8H,MAAMC,QAASH,UAG7DC,WAAW/E,GAAK8E,SAASE,MAAMC,SAE9BD,MAAMrI,OACoB,kBAAhBqI,MAAME,MACbF,MAAMrI,KAAO,WACiB,iBAAhBqI,MAAME,MACpBF,MAAMrI,KAAO,UACiB,iBAAhBqI,MAAME,QACpBF,MAAMrI,KAAOqI,MAAMG,QAAU,SAAW,iBAQpDvG,kBACOwG,oCAAaxG,KAKpBnB,iBACO2H,oCAAa3H,IAKpBuG,kBACOoB,oCAAapB,MAAQ,GAK5B/B,sBACOmD,oCAAanD,SAKpBoD,gFACOD,oCAAaC,kEAAY,OAKhCC,yBACOF,oCAAaE,YAKpBC,uBACOH,oCAAaG,UAKpBC,oBACOJ,oCAAaI,OAKpBC,qBACOL,oCAAaK,SAAW,QAK/BC,qDACIN,oCAAaM,qCAAiBC,gEACjBD,aAAeE,mBAAmBR,oCAAaM,8DACjC,mCAExBN,oCAAaM,sEAAgB,GAKpCX,kFACOK,oCAAaL,oEAAc,GAKlCc,qBAEMC,IAAM,eACPf,WAAWvD,SAASwD,QACrBc,IAAId,MAAMpG,MAAQoG,MAAME,SAErBY,IAMX3D,OAAOjB,qDACG6E,aAAe,IAAIJ,KAAKE,UACxBG,cAAgB1E,OAAO2E,OAAOF,aAAc7E,KAAO,QAErDuD,OAASW,oCAAaX,cACnBD,wCAAiBmB,KAAK1D,kDAAY,GAAI+D,6CACzCZ,oCAAapB,8DAAQ,GAAIS,QAMjCyB,MAAMC,YAE0B,IAAxBf,oCAAagB,cACN,MAEPC,UAAYjB,oCAAakB,KAAO,IAAIvK,UACvB,KAAbsK,UAAgC,MAAbA,UAAoBF,QAAU,SAC1C,MAEPI,WAAY,EACZF,SAASpK,WAAW,OACpBsK,WAAY,GAEhBF,SAAWA,SAASxH,QAAQ,UAAW,UACjC2H,UAAYH,SAAS9D,MAAM,YACdgE,WAAaC,UAAUnG,QAAQ8F,OAAS,KAAO,IAAQI,WAAaC,UAAUnG,QAAQ8F,OAAS,IAAM,EAO5HM,gBAAgBC,uBACZA,kCAAQA,+BAASlG,OAAOC,kCAAgB,SAClCkG,aAAevB,oCAAasB,UAC7BA,QAAUC,cAAiC,MAAjBA,oBACpB,SAGiB,MADd,IAAIC,OAAOD,cACZE,KAAKH,OAKtBI,oCAC4C,yCAA5BzB,yDAAUrJ,eAK1B+K,qBACWpB,KAAKZ,WAAWiC,QAAOhC,YAAwBiC,IAAfjC,MAAMkC,OAAoBvH,OAAS,EAO9EwH,KAAKvI,aAEMwG,oCAAaxG,cA0BfwI,+BAaUjB,OAAQkB,gBACjB5J,IAAM0I,OAAS,IAAMkB,gBAEtBD,YAAYE,WAAW7J,OAExB2J,YAAYE,WAAW7J,KAAO,IAAI2J,YAAYjB,OAAQkB,WAGnDD,YAAYE,WAAW7J,KAIlCmH,YAAYuB,OAAQkB,yCAvBV,oCACE,yIAuBHE,QAAUpB,YACVqB,UAAYH,cACZI,UAAY,iBAAmBtB,YAC/BuB,YAAc,CAACC,OAAQ,SACvBC,cAAgB,CAACC,WAAY,SAC7BC,YAKTA,oBACuC,IAAxBpJ,OAAOqJ,aAA8B,OACtCC,IAAMtJ,OAAOqJ,aAAaE,QAAQtC,KAAK8B,cACzCO,aAESN,YAAcQ,KAAKC,MAAMH,KAChC,MAAO1I,IACLvC,QAAQG,MAAMoC,QAMrBqG,KAAK+B,YAAY,IAAM/B,KAAK6B,kBAExBE,YAAY,IAAM/B,KAAK6B,WAAa,SAER,IAA1B9I,OAAO0J,eAAgC,OACxCC,KAAO3J,OAAO0J,eAAeH,QAAQtC,KAAK8B,cAC5CY,cAEST,cAAgBM,KAAKC,MAAME,MAClC,MAAO/I,IACLvC,QAAQG,MAAMoC,MAW9BgJ,aAAa7K,IAAK8K,kBACT5C,KAAK+B,mBACCa,mBAGLC,KAAO7C,KAAK+B,YAAY,IAAM/B,KAAK6B,WACnCiB,IAAM9C,KAAK+B,mBACbc,KAEOA,KAAK/K,MAAQgL,IAAIhL,MAAQ8K,aACzBE,KAEAA,IAAIhL,MAER8K,aAQXG,eAAejL,IAAK8K,qBAEmB,MAA3B5C,KAAKiC,cAAcnK,KAAekI,KAAKiC,cAAcnK,KAAO8K,aAKxEI,UAAUhM,MACO,UAATA,WAAmD,IAAxB+B,OAAOqJ,aAClCrJ,OAAOqJ,aAAaa,QAAQjD,KAAK8B,UAAWS,KAAKW,UAAUlD,KAAK+B,cAChD,YAAT/K,WAAuD,IAA1B+B,OAAO0J,eAC3C1J,OAAO0J,eAAeQ,QAAQjD,KAAK8B,UAAWS,KAAKW,UAAUlD,KAAKiC,gBACnD,MAARjL,YAC4B,IAAxB+B,OAAOqJ,cACdrJ,OAAOqJ,aAAaa,QAAQjD,KAAK8B,UAAWS,KAAKW,UAAUlD,KAAK+B,mBAE/B,IAA1BhJ,OAAO0J,gBACd1J,OAAO0J,eAAeQ,QAAQjD,KAAK8B,UAAWS,KAAKW,UAAUlD,KAAKiC,iBAW9EkB,WAAWrL,IAAKyH,MAAO6D,YACK,MAApBpD,KAAK+B,yBAIHc,KAAO7C,KAAK+B,YAAY,IAAM/B,KAAK6B,WACnCiB,IAAM9C,KAAK+B,eAGY,iBAAjBsB,YAA2B,CAC/BR,MAAgB,iBAAR/K,KAAkC,WAARA,IAClC+K,KAAK/K,KAAO+K,KAAK/K,MAAQ,GAGzBgL,IAAIhL,KAAOgL,IAAIhL,MAAQ,SAGrB8D,KAAOD,OAAOC,KAAK2D,WACpB,IAAIlF,EAAI,EAAGN,IAAM6B,KAAK5B,OAAQK,EAAIN,IAAKM,IAAK,OACvCiJ,OAAS1H,KAAKvB,GAEdb,IAAM+F,MAAM+D,QACdT,MAAgB,iBAAR/K,KAAkC,WAARA,IAClC+K,KAAK/K,KAAKwL,QAAU9J,IAGpBsJ,IAAIhL,KAAKwL,QAAU9J,UAK3BsJ,IAAIhL,KAAOyH,MAEX6D,cACKJ,UAAU,SAUvBO,aAAazL,IAAKyH,MAAO6D,YACE,iBAAX7D,MAAqB,MAExB0C,cAAcnK,KAAOkI,KAAKiC,cAAcnK,MAAQ,SAE/C8D,KAAOD,OAAOC,KAAK2D,WACpB,IAAIlF,EAAI,EAAGN,IAAM6B,KAAK5B,OAAQK,EAAIN,IAAKM,IAAK,OACvCiJ,OAAS1H,KAAKvB,GAEdb,IAAM+F,MAAM+D,aAEbrB,cAAcnK,KAAKwL,QAAU9J,eAIjCyI,cAAcnK,KAAOyH,MAE1B6D,cACKJ,UAAU,6DAtLdvB,yBACW,UAsNlB+B,aAAe,aAEF,SAASnB,YACZA,IAAM,IAAIoB,2BAGP,SAASpB,YACZA,IAAM,IAAIhM,oBAGd,SAASgM,YACLA,IAAM,IAAIjM,aAGd,SAASiM,WAGPqB,GAAKrB,KAAO,IAAI9I,MADX,iHAEPmK,MAAAA,GAAAA,EAAG1J,OACI0J,EAAE,GAENrB,aAGA,SAASA,WAEV9I,OAAS8I,KAAO,IAAI9I,MADX,mFAEXA,MAAAA,OAAAA,MAAQ,GACDA,MAAM,GAEV8I,iBAGI,SAASA,WAEd9J,KAAO8J,IAAM,IAAI9I,MAAM,6DACzBhB,MAAAA,KAAAA,IAAKyB,OAAQ,OAEN,6CADSzB,IAAI,UAGjB8J,gBAGG,SAASA,YACXA,KAAO,IAAInJ,QAAQ,aAAc,gBAG/B,SAASmJ,YACXA,KAAO,IAAInJ,QAAQ,KAAM,SAC5BA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,UACdA,QAAQ,KAAM,sBAGT,SAASmJ,YAEZrC,KAAK2D,mBAAmBtB,KAAO,kBAG1B,SAASA,YACbA,KAAO,IAAInJ,QAAQ,MAAO,aAKpC0B,QAGFqE,YAAYtE,4DACFwC,MAAQxC,aAAaiC,MAAM,UAC5BgH,SAAW,OACX,IAAIC,EAAI,EAAGC,KAAO3G,MAAMnD,OAAQ6J,EAAIC,KAAMD,IAAK,OAC1CE,KAAO5G,MAAM0G,GAAGzN,OAEhB4N,UAAYR,aAAaO,MACd,MAAbC,eACKJ,SAAS9H,KAAKkI,WAEnB5M,QAAQG,MAAM,iCAAmCwM,OAM7DE,OAAO7L,UACE,IAAIyL,EAAI,EAAGC,KAAO9D,KAAK4D,SAAS5J,OAAQ6J,EAAIC,KAAMD,IAAK,CAExDzL,MAAO4L,EADWhE,KAAK4D,SAASC,IACfzL,aAEdA,eAyBCH,qBAAqBiM,YACjCA,WAAaA,WAAWhL,QAAQ,sBAAoB,IAAIA,QAAQ,sBAAoB,QAChFlB,iBAAmB,SAEnBA,iBAAmB,IAAI+D,SAAS,OAAQ,OAAQ,OAAQmI,YAC1D,MAAOvK,IACL3B,iBAAmB,KACnBZ,QAAQG,MAAMoC,WAEX3B,0BA4HKzB,SAAS4N,EAAGC,UACxBD,GAAKA,GAAK,IAAI/N,OACdgO,GAAKA,GAAK,IAAIhO,OACT+N,EAAEE,SAAS,OACZF,GAAQ,KAERC,EAAE9N,WAAW,OACb8N,EAAIA,EAAE/I,UAAU,IAEb8I,EAAIC,QAoDTE,eAAiB,SAAS/E,MAAOvI,aAC3BA,UACE,UAEEuI,MADU,IAAVA,OAAyB,MAAVA,QAA2B,IAAVA,OAA4B,SAAVA,gBAMpD,aAEEA,MAAQ9F,SAAS8F,OACnB,MAAO5F,IACLvC,QAAQG,MAAM,uBAAwBoC,cAGxC,SACF4F,OAAgB,UAGjBA,OAGLgF,eAAiB,UACP,MAERtF,YAAYuF,KAAMC,UAAWC,OAAQC,UAC5BH,KAAOA,UACPE,OAASA,YACTC,IAAMA,SACNF,UAAYA,UAErBG,iBAEUrM,IAAMyH,KAAK2E,IAAM3E,KAAKwE,KAAKK,UAAUC,SAAS9E,KAAKyE,iBAClC,YAAhBzE,KAAK0E,OAAuBK,QAAQxM,KAAOA,IAGtDyM,SAASC,MACDjF,KAAK2E,IAAMM,UACNT,KAAKK,UAAUK,IAAIlF,KAAKyE,gBAExBD,KAAKK,UAAUM,OAAOnF,KAAKyE,wBAI9B,MAEVxF,YAAYuF,KAAMY,UAAWV,aACpBF,KAAOA,UACPE,OAASA,YACTU,UAAYA,UAErBR,eACQS,IAAM,eAELb,KAAKK,UAAUhJ,SAAQyJ,UAClB/L,MAAQ+L,EAAE/L,MAAMyG,KAAKoF,WACvB7L,MAAAA,OAAAA,MAAQ,IAA4B,iBAAdA,MAAM,KAC5B8L,IAAM9L,MAAM,OAGb+K,eAAee,IAAKrF,KAAK0E,QAGpCM,SAASxL,WACC+L,GAAKvF,KAAKwE,KAAKK,UAErBU,GAAG1J,SAAQyJ,IACHA,EAAE/L,MAAMyG,KAAKoF,YACbG,GAAGJ,OAAOG,MAGlBC,GAAGL,IAAIlF,KAAKoF,UAAUlM,QAAQ,OAAQM,IAAM,YAG5C,MAEJyF,YAAYuF,KAAMgB,SAAUd,aACnBF,KAAOA,UACPE,OAASA,YACTc,SAAWA,SAEpBZ,kBACWN,eAAetE,KAAKwE,KAAKiB,aAAazF,KAAKwF,UAAWxF,KAAK0E,QAGtEM,SAASxL,WACc,kBAARA,MACPA,IAAMA,IAAM,EAAI,GAEbwG,KAAKwE,KAAKtN,aAAa8I,KAAKwF,SAAUhM,IAAM,cAGhD,MAEPyF,YAAYuF,KAAMkB,KAAMhB,OAAQC,UACvBH,KAAOA,UACPE,OAASA,YACTC,IAAMA,UACLxH,MAAQuI,KAAK9I,MAAM,UACpB4I,SAAWrI,MAAM,GAAG/G,OACrB+G,MAAMnD,OAAS,SACV2L,UAAYxI,MAAM,GAAGjE,QAAQ,QAAS,IAAI9C,QAGvDwO,eACQ9K,MAAiD,MAAzCkG,KAAKwE,KAAKiB,aAAazF,KAAKwF,UACpCxF,KAAK2F,YACL7L,MAAQA,OAASkG,KAAKwE,KAAKiB,aAAazF,KAAKwF,YAAcxF,KAAK2F,iBAG9DpN,IAAMyH,KAAK2E,IAAM7K,YACH,YAAhBkG,KAAK0E,OACEK,QAAQxM,KAERA,IAIfyM,SAASC,MACDjF,KAAK2E,IAAMM,UACNT,KAAKtN,aAAa8I,KAAKwF,SAAUxF,KAAK2F,WAAa,SAEnDnB,KAAKoB,gBAAgB5F,KAAKwF,sBAI9B,MAETvG,YAAYuF,KAAMkB,KAAMhB,aACfF,KAAOA,UACPE,OAASA,aACRvH,MAAQuI,KAAK9I,MAAM,UACpB4I,SAAWrI,MAAM,GAAG/G,OACrB+G,MAAMnD,OAAS,SACV2L,UAAYxI,MAAM,GAAGjE,QAAQ,QAAS,IAAI9C,QAGvDwO,cACyD,MAAzC5E,KAAKwE,KAAKiB,aAAazF,KAAKwF,UAC7B,OACDjM,MAAQyG,KAAKwE,KAAKiB,aAAazF,KAAKwF,UAAUjM,MAAMyG,KAAK2F,kBAC3DpM,MAAAA,OAAAA,MAAQ,IAA4B,iBAAdA,MAAM,GACrB+K,eAAe/K,MAAM,GAAIyG,KAAK0E,QAElC,UAEJ,KAGXM,SAASxL,UACAgL,KAAKtN,aAAa8I,KAAKwF,SAAUxF,KAAK2F,UAAUzM,QAAQ,OAAQM,IAAM,gBAGvE,MAERyF,YAAYuF,KAAMkB,KAAMhB,OAAQC,UACvBH,KAAOA,UACPE,OAASA,YACTC,IAAMA,UACLxH,MAAQuI,KAAK9I,MAAM,UACpBiJ,QAAU1I,MAAM,GAAG/G,OACpB+G,MAAMnD,OAAS,SACV8L,SAAW3I,MAAM,GAAGjE,QAAQ,QAAS,IAAI9C,QAGtDwO,iBAIUrM,IAHKyH,KAAKwE,KAAKuB,MACNC,iBAAiBhG,KAAK6F,WAAa7F,KAAK8F,SAErC9F,KAAK2E,UACH,YAAhB3E,KAAK0E,OACEK,QAAQxM,KAERA,IAIfyM,SAASC,MACDA,KAAOjF,KAAK2E,SACPH,KAAKuB,MAAME,YAAYjG,KAAK6F,QAAS7F,KAAK8F,eAE1CtB,KAAKuB,MAAMG,eAAelG,KAAK6F,sBAIlC,MAEV5G,YAAYuF,KAAMkB,KAAMhB,aACfF,KAAOA,UACPE,OAASA,aACRvH,MAAQuI,KAAK9I,MAAM,UACpBiJ,QAAU1I,MAAM,GAAG/G,OACpB+G,MAAMnD,OAAS,SACV8L,SAAW3I,MAAM,GAAGjE,QAAQ,QAAS,IAAI9C,QAGtDwO,iBACUuB,GAAKnG,KAAKwE,KAAKuB,SAC4B,MAArCI,GAAGH,iBAAiBhG,KAAK6F,SAC5B,OACCtM,MAAQ4M,GAAGH,iBAAiBhG,KAAK6F,SAAStM,MAAMyG,KAAK8F,iBACvDvM,MAAAA,OAAAA,MAAQ,IAA4B,iBAAdA,MAAM,GACrB+K,eAAe/K,MAAM,GAAIyG,KAAK0E,QAElC,UAEJ,KAGXM,SAASxL,UACAgL,KAAKuB,MAAME,YAAYjG,KAAK6F,QAAS7F,KAAK8F,SAAS5M,QAAQ,OAAQM,IAAM,8BAgB9D,CAAC4M,WAAY5B,KAAME,cACtC0B,aAAe5B,YAET,WAGL6B,EADQ,oHACEnF,KAAKkF,eACjBC,EAAG,CACCA,EAAE,KAGF7B,KAAOA,KAAK3N,cAAcwP,EAAE,WAE1B1B,SAAerD,IAAT+E,EAAE,GACRrP,KAAOqP,EAAE,GACTC,OAASD,EAAE,UAEV,IAAI9B,eAAevN,MAAMwN,KAAM8B,OAAQ5B,OAAQC,YAGnD,0BAQezK,GAAMA,GAAKA,EAAE,GAAGuJ,cAAgBvJ,EAAEqM,MAAM,IAAO"}