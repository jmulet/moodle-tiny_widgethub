{"version":3,"file":"util.min.js","sources":["../src/util.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-eq-null */\n/* eslint-disable no-bitwise */\n/* eslint-disable no-new-func */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport jQuery from 'jquery';\nimport Common from './common';\nconst {component} = Common;\n\n/**\n * @param {string} [prefix]\n * @returns {string} a randomID\n */\nexport function genID(prefix = 'g') {\n    const timePart = Date.now().toString(32);\n    const randPart = Math.floor(Math.random() * 1e6).toString(32);\n    return `${prefix}-${timePart}${randPart}`;\n}\n\n/**\n * @param {Object.<string, any>} ctx\n * @param {string} expr\n * @param {boolean=} keepFns - Keep or not the funcions in the ctx\n * @returns {any} The evaluated expression within the context ctx\n */\nexport function evalInContext(ctx, expr, keepFns) {\n    const listArgs = [];\n    const listVals = [];\n\n    if (ctx) {\n        Object.keys(ctx).forEach((key) => {\n            // Remove functions from ctx\n            if (keepFns || typeof ctx[key] !== \"function\") {\n                listArgs.push(key);\n                listVals.push(ctx[key]);\n            }\n        });\n    }\n    listArgs.push('expr');\n    listArgs.push('return eval(expr)');\n    listVals.push(expr);\n    const evaluator = new Function(...listArgs);\n    return evaluator(...listVals);\n}\n\n/**\n * @param {string} s - string to the hashed\n * @returns {number}\n */\nexport function hashCode(s) {\n    s = s || \"\";\n    let h = 0;\n    const l = s.length;\n    let i = 0;\n    if (l > 0) {\n        while (i < l) {\n            h = (h << 6) + ((s.charCodeAt(i) - 65) | 0);\n            i++;\n        }\n    }\n    return Math.abs(h);\n}\n\n/**\n * @param {string} str1\n * @param {string} needle\n * @returns {boolean} Whether str1 contains needle or not\n */\nexport function searchComp(str1, needle) {\n    str1 = (str1 || '').trim().toLowerCase();\n    needle = (needle || '').trim().toLowerCase();\n    str1 = str1.replace(/[àáâãäå]/, \"a\")\n        .replace(/[èéêë]/, \"e\")\n        .replace(/[ìíîï]/, \"i\")\n        .replace(/[òóôö]/, \"o\")\n        .replace(/[ùúüû]/, \"u\")\n        .replace(/ç/, \"c\")\n        .replace(/·/, \"\");\n    needle = needle.replace(/[àáâãäå]/, \"a\")\n        .replace(/[èéêë]/, \"e\")\n        .replace(/[ìíîï]/, \"i\")\n        .replace(/[òóôö]/, \"o\")\n        .replace(/[ùúüû]/, \"u\")\n        .replace(/ç/, \"c\")\n        .replace(/·/, \"\");\n    return str1.indexOf(needle) >= 0;\n}\n\n/** Default transformers */\nconst Transformers = {\n    /** @param {string} txt */\n    toUpperCase: function(txt) {\n        return (txt + \"\").toUpperCase();\n    },\n    /** @param {string} txt */\n    toLowerCase: function(txt) {\n        return (txt + \"\").toLowerCase();\n    },\n    /** @param {string} txt */\n    trim: function(txt) {\n        return (txt + \"\").trim();\n    },\n    /** @param {string} txt */\n    ytId: function(txt) {\n        // Finds the youtubeId in a text\n        const rx = /^.*(?:(?:youtu\\.be\\/|v\\/|vi\\/|u\\/\\w\\/|embed\\/|shorts\\/)|(?:(?:watch)?\\?v(?:i)?=|&v(?:i)?=))([^#&?]*).*/;\n        const r = (txt || '').match(rx);\n        if (r?.length) {\n            return r[1];\n        }\n        return txt;\n    },\n    /** @param {string} txt */\n    vimeoId: function(txt) {\n        const regExp = /^.*(vimeo\\.com\\/)((channels\\/[A-z]+\\/)|(groups\\/[A-z]+\\/videos\\/))?(\\d+)/;\n        const match = new RegExp(regExp).exec(txt || \"\");\n        if (match?.[5]) {\n            return match[5];\n        }\n        return txt;\n    },\n    /** @param {string} txt */\n    serveGDrive: function(txt) {\n        // Expecting https://drive.google.com/file/d/1DDUzcFrOlzWb3CBdFPJ1NCNXClvPbm5B/preview\n        const res = (txt + \"\").match(/https:\\/\\/drive.google.com\\/file\\/d\\/([a-zA-Z0-9_]+)\\//);\n        if (res?.length) {\n            const driveId = res[1];\n            return \"https://docs.google.com/uc?export=open&id=\" + driveId;\n        }\n        return txt;\n    },\n    /** @param {string} txt */\n    removeHTML: function(txt) {\n        return (txt || '').replace(/<[^>]*>?/gm, '');\n    },\n    /** @param {string} txt */\n    escapeHTML: function(txt) {\n        return (txt || '').replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    },\n    /** @param {string} txt */\n    encodeHTML: function(txt) {\n        // @ts-ignore\n        return encodeURIComponent(txt || \"\");\n    },\n    /** @param {string} txt */\n    escapeQuotes: function(txt) {\n        return (txt || '').replace(/\"/gm, \"'\");\n    }\n};\n\n\nclass Builder {\n    transSeq;\n    // @ts-ignore\n    constructor(transformStr) {\n        const parts = transformStr.split('|');\n        this.transSeq = [];\n        for (let j = 0, lenj = parts.length; j < lenj; j++) {\n            const prts = parts[j].trim();\n            // @ts-ignore\n            const transfunc = Transformers[prts];\n            if (transfunc != null) {\n                this.transSeq.push(transfunc);\n            } else {\n                console.error(\"Cannot find transformer named \" + prts);\n            }\n        }\n    }\n\n    // @ts-ignore\n    reduce(text) {\n        for (let j = 0, lenj = this.transSeq.length; j < lenj; j++) {\n            const transfunc = this.transSeq[j];\n            text = transfunc(text);\n        }\n        return text;\n    }\n}\n\n/**\n * @param {string} transformStr\n * @returns {Builder} call reduce(text) function\n */\nexport function stream(transformStr) {\n    return new Builder(transformStr);\n}\n\n/**\n * @param {string} name\n * @returns {string} Replaces $ apperences by _ to make the name compatible by data attributes\n */\nexport function cleanParameterName(name) {\n    return name.replace(/\\$/g, '_');\n}\n\n/**\n * Creates a filter funcion from filterCode\n * @param {string} filterCode\n * @returns {Function?}\n */\nexport function createFilterFunction(filterCode) {\n    let userWidgetFilter = null;\n    try {\n        userWidgetFilter = new Function('text', 'editor', 'opts', filterCode);\n    } catch (ex) {\n        userWidgetFilter = null;\n        console.error(ex);\n    }\n    return userWidgetFilter;\n}\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @param {{get_strings: (keyComponent: any[]) => Promise<string[]>}} coreStr - dependency on core/str\n * @returns {*}\n */\nexport function applyWidgetFilterFactory(editor, coreStr) {\n    /**\n     * @param {string} widgetTemplate\n     * @param {boolean} silent\n     * @param {object?} mergevars\n     * @returns {Promise<boolean>} - True if the filter can be compiled\n     */\n    return async(widgetTemplate, silent, mergevars) => {\n        const translations = await coreStr.get_strings([\n            {key: 'filterres', component},\n            {key: 'nochanges', component}\n        ]);\n        // Es tracta d'un filtre, no d'un widget i s'ha de tractar de forma diferent\n        const userWidgetFilter = createFilterFunction(widgetTemplate);\n\n        if (!userWidgetFilter) {\n            editor.notificationManager.open({\n                text: translations[0] + \": Invalid filter\",\n                type: 'danger',\n                timeout: 4000\n            });\n            return false;\n        }\n        // @ts-ignore\n        const handleFilterResult = function(res) {\n            const out = res[0];\n            let msg = res[1];\n            if (out != null) {\n                if (typeof out === \"string\") {\n                    editor.setContent(out);\n                    editor.notificationManager.open({\n                        text: translations[0] + \": \" + msg,\n                        type: 'success',\n                        timeout: 5000\n                    });\n                } else if (out === true) {\n                    editor.notificationManager.open({\n                        text: translations[0] + \": \" + msg,\n                        type: 'success',\n                        timeout: 5000\n                    });\n                } else if (out === false && !silent) {\n                    editor.notificationManager.open({\n                        text: translations[1],\n                        type: 'info',\n                        timeout: 5000\n                    });\n                }\n            } else if (!silent) {\n                editor.notificationManager.open({\n                    text: translations[1],\n                    type: 'info',\n                    timeout: 5000\n                });\n            }\n        };\n\n        const initialHTML = editor.getContent();\n        const filteredResult = userWidgetFilter(initialHTML, editor, mergevars);\n        // Hi ha la possibilitat que el filtre retorni una promesa o un array\n        const isPromise = filteredResult != null && typeof (filteredResult) === 'object' && ('then' in filteredResult);\n        if (isPromise) {\n            filteredResult.then(handleFilterResult).catch((/** @type {any} */ err) => console.error(err));\n        } else {\n            handleFilterResult(filteredResult || [null, translations[1]]);\n        }\n        return true;\n    };\n}\n\n/**\n * Safe conversion of a string to integer by handling errors and NaN values\n * In this case, the def number passed is returned\n * @param {string | undefined | null | number} str\n * @param {number} def - default value\n * @returns {number}\n */\nexport function convertInt(str, def) {\n    if (str && typeof str === 'number') {\n        return Math.floor(str);\n    }\n    if (!str || !(str + \"\").trim() || !RegExp(/^\\s*[+-]?\\d+(\\.\\d*)?\\s*$/).exec(str + \"\")) {\n        return def;\n    }\n    try {\n        const val = parseInt(str + \"\");\n        if (!isNaN(val)) {\n            return val;\n        }\n    } catch (ex) {\n        // Pass\n    }\n    return def;\n}\n\n/**\n * Finds the parameter with a given name within the list of objects\n * @param {string} varname\n * @param {import('./options').Param[]} listVars\n * @returns {import('./options').Param | null}\n */\nexport function findVariableByName(varname, listVars) {\n    if (!listVars) {\n        return null;\n    }\n    let found = null;\n    const len = listVars.length;\n    let k = 0;\n    while (k < len && !found) {\n        if (listVars[k].name === varname) {\n            found = listVars[k];\n        }\n        k++;\n    }\n    return found;\n}\n\n/**\n * Safely joins two parts of an url\n * @param {string} a\n * @param {string=} b\n * @returns {string}\n */\nexport function pathJoin(a, b) {\n    a = (a || \"\").trim();\n    b = (b || \"\").trim();\n    if (!a.endsWith('/')) {\n        a = a + '/';\n    }\n    if (b.startsWith('/')) {\n        b = b.substring(1);\n    }\n    return a + b;\n}\n\n/**\n * Adds the baseurl if the passed url does not start with http or https\n * @param {string} base\n * @param {string=} url\n * @returns {string}\n */\nexport function addBaseToUrl(base, url) {\n    url = (url || \"\").trim();\n    if (url.toLowerCase().startsWith(\"http\")) {\n        return url;\n    }\n    // Afegir la base\n    const out = pathJoin(base, url);\n    return out;\n}\n\n/**\n * @param {*} value\n * @param {string | undefined} type\n * @returns {*}\n */\nexport const performCasting = function(value, type) {\n    if (!type || typeof value === type) {\n        return value;\n    }\n    switch (type) {\n        case (\"boolean\"):\n            if (value === 1 || value === \"1\" || value === true || value === \"true\") {\n                value = true;\n            } else {\n                value = false;\n            }\n            break;\n        case (\"number\"):\n            try {\n                let parsed;\n                if ((value + '').indexOf(\".\") < 0) {\n                    parsed = parseInt(value);\n                } else {\n                    parsed = parseFloat(value);\n                }\n                if (!isNaN(parsed)) {\n                    value = parsed;\n                } else {\n                    value = 0;\n                    console.error(`Error parsing number ${value}`);\n                }\n            } catch (ex) {\n                value = 0;\n                console.error(`Error parsing number ${value}`);\n            }\n            break;\n        case (\"string\"):\n            if (typeof value === 'object') {\n                value = JSON.stringify(value);\n            } else {\n                value = value + \"\";\n            }\n            break;\n        default:\n            console.error(`Fail to cast ${value} to ${type}`);\n    }\n    return value;\n};\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n */\nconst xor = function(a, b) {\n    return !a !== !b;\n};\n\n/**\n * @param {string} str\n * @param {*} match\n * @param {string} replacement\n * @returns {string}\n */\nconst replaceStrPart = function(str, match, replacement) {\n    if (!match.indices) {\n        console.error(\"RegExp match does not include indices\");\n        return str;\n    }\n    const [a, b] = match.indices[1];\n    return str.substring(0, a) + replacement + str.substring(b);\n};\n\n/**\n * Replaces the first capturing group in regexExpr by replacement,\n * The remaining capturing groups are removed.\n * @param {string} regexExpr\n * @param {string} replacement\n * @returns {string}\n */\nconst getValueFromRegex = function(regexExpr, replacement) {\n    const reParser = /\\((?!\\?:).*?\\)/g;\n    let capturingGroupCount = 0;\n    return regexExpr.replace(reParser, () => {\n        capturingGroupCount++;\n        if (capturingGroupCount === 1) {\n            return replacement + '';\n        }\n        return \"\"; // Remove all other capturing groups\n    });\n};\n\n/**\n * @param {Element} el - The target element\n * @returns\n */\nconst bindingFactory = function(el) {\n    /** @this {Record<string, Function>} */\n    const methods = {\n        /**\n         * @param {string} className\n         * @param {string=} query\n         * @param {boolean=} neg\n         * @returns {Binding}\n         */\n        hasClass: (className, query, neg) => {\n            /** @type {Element | null} */\n            let elem = el;\n            if (query) {\n                elem = el.querySelector(query);\n            }\n            return {\n                // @ts-ignore\n                getValue: () => {\n                    const res = xor(neg, elem?.classList?.contains(className));\n                    return Boolean(res);\n                },\n                // @ts-ignore\n                setValue: (bool) => {\n                    if (xor(neg, bool)) {\n                        elem?.classList.add(className);\n                    } else {\n                        elem?.classList.remove(className);\n                    }\n                }\n            };\n        },\n        /**\n         * @param {string} className\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        notHasClass: (className, query) => {\n            return methods.hasClass(className, query, true);\n        },\n        /**\n         * @param {string} classExpr\n         * @param {string=} query\n         * @param {string=} castTo\n         * @returns {Binding}\n         */\n        classRegex: (classExpr, query, castTo) => {\n            /** @type {Element | null} */\n            let elem = el;\n            if (query) {\n                elem = el.querySelector(query);\n            }\n            return {\n                getValue: () => {\n                    let ret = '';\n                    const classes = Array.from(elem?.classList ?? []);\n                    for (const clazz of classes) {\n                        const match = new RegExp(classExpr).exec(clazz);\n                        if (match?.[1] && typeof (match[1]) === \"string\") {\n                            ret = match[1];\n                            break;\n                        }\n                    }\n                    return performCasting(ret, castTo);\n                },\n                setValue: (val) => {\n                    const cl = Array.from(elem?.classList ?? []);\n                    let found = false;\n                    cl.forEach(c => {\n                        const match = new RegExp(classExpr, 'd').exec(c);\n                        if (match === null) {\n                            return;\n                        }\n                        found = true;\n                        elem?.classList.remove(c);\n                        const newCls = replaceStrPart(c, match, val + '');\n                        elem?.classList.add(newCls);\n                    });\n                    // If not found, then set the regExp replacing the\n                    // first capturing group with val, and removing the remaining groups.\n                    if (!found) {\n                        const newCls = getValueFromRegex(classExpr, val + '');\n                        elem?.classList.add(newCls);\n                    }\n                }\n            };\n        },\n        /**\n         * @param {string} attrName\n         * @param {string=} query\n         * @param {string=} castTo\n         * @returns {Binding}\n         */\n        attr: (attrName, query, castTo) => {\n            /** @type {Element | null} */\n            let elem = el;\n            if (query) {\n                elem = el.querySelector(query);\n            }\n            return {\n                getValue: () => {\n                    let attrValue = elem?.getAttribute(attrName);\n                    if (attrName.indexOf('-bs-') > 0) {\n                        attrValue = attrValue ?? elem?.getAttribute(attrName.replace('-bs-', '-'));\n                    }\n                    return performCasting(attrValue, castTo);\n                },\n                // @ts-ignore\n                setValue: (val) => {\n                    if (typeof val === \"boolean\") {\n                        val = val ? 1 : 0;\n                    }\n                    const attrVal = val + '';\n                    elem?.setAttribute(attrName, attrVal);\n                    if (attrName.indexOf('-bs-') > 0) {\n                        // Save as old bs\n                        elem?.setAttribute(attrName.replace('-bs-', '-'), attrVal);\n                    }\n                    if (attrName === 'href' || attrName === 'src') {\n                        elem?.setAttribute('data-mce-' + attrName, attrVal);\n                    }\n                }\n            };\n        },\n        /**\n         * Adapted to take into account both data- and data-bs- for Boostrap 4 & 5 compatibility.\n         * @param {string} attrName - Name without data- nor data-bs-\n         * @param {string=} query\n         * @param {string=} castTo\n         * @param {number=} version - 4 or 5 depending the version of BS currently using\n         * @returns {Binding}\n         */\n        attrBS: (attrName, query, castTo, version) => {\n            /** @type {Element | null} */\n            let elem = el;\n            if (query) {\n                elem = el.querySelector(query);\n            }\n            return {\n                getValue: () => {\n                    // If version=4 it has preference BS4 over BS5, it will not remove BS4 prefix\n                    let p1 = '';\n                    let p2 = 'bs-';\n                    if (version === 5) {\n                        p1 = p2;\n                        p2 = '';\n                    }\n                    let value = elem?.getAttribute('data-' + p1 + attrName);\n                    if (value === undefined) {\n                        value = elem?.getAttribute('data-' + p2 + attrName);\n                    }\n                    return performCasting(value || '', castTo);\n                },\n                // @ts-ignore\n                setValue: (val) => {\n                    if (typeof val === \"boolean\") {\n                        val = val ? 1 : 0;\n                    }\n                    const attrVal = val + '';\n                    elem?.setAttribute('data-bs-' + attrName, attrVal);\n                    if (version === 5) {\n                        elem?.removeAttribute('data-' + attrName);\n                    } else {\n                        elem?.setAttribute('data-' + attrName, attrVal);\n                    }\n                }\n            };\n        },\n        /**\n         * @param {string} attr\n         * @param {string=} query\n         * @param {boolean=} neg\n         * @returns {Binding}\n         */\n        hasAttr: (attr, query, neg) => {\n            /** @type {Element | null} */\n            let elem = el;\n            if (query) {\n                elem = el.querySelector(query);\n            }\n            const parts = attr.split(\"=\");\n            const attrName = parts[0].trim();\n            let attrValue = '';\n            if (parts.length > 1) {\n                attrValue = parts[1].trim();\n            }\n            return {\n                getValue: () => {\n                    let found = elem?.getAttribute(attrName) != null;\n                    if (attrValue) {\n                        found = found && elem?.getAttribute(attrName) === attrValue;\n                    }\n                    return xor(neg, found);\n                },\n                // @ts-ignore\n                setValue: (bool) => {\n                    if (xor(neg, bool)) {\n                        elem?.setAttribute(attrName, attrValue || '');\n                        if (attrName === 'href' || attrName === 'src') {\n                            elem?.setAttribute('data-mce-' + attrName, attrValue + '');\n                        }\n                    } else {\n                        elem?.removeAttribute(attrName);\n                        if (attrName === 'href' || attrName === 'src') {\n                            elem?.removeAttribute('data-mce-' + attrName);\n                        }\n                    }\n                }\n            };\n        },\n        /**\n         * Variant to check for compatibility between Bootstrap 4 and 5.\n         * @param {string} attr - attr name without data- nor data-bs-\n         * @param {string=} query\n         * @param {boolean=} neg\n         * @param {number=} version - 4 or 5\n         * @returns {Binding}\n         */\n        hasAttrBS: (attr, query, neg, version) => {\n            /** @type {Element | null} */\n            let elem = el;\n            if (query) {\n                elem = el.querySelector(query);\n            }\n            const parts = attr.split(\"=\");\n            const attrName = parts[0].trim();\n            let attrValue = '';\n            if (parts.length > 1) {\n                attrValue = parts[1].trim();\n            }\n            const getValuePrefix = (/** @type{string} **/ prefix) => {\n                let found = elem?.getAttribute(prefix + attrName) != null;\n                if (attrValue) {\n                    found = found && elem?.getAttribute(prefix + attrName) === attrValue;\n                }\n                return xor(neg, found);\n            };\n            return {\n                getValue: () => {\n                    let p1 = 'data-';\n                    let p2 = 'data-bs-';\n                    if (version === 5) {\n                        p2 = p1;\n                        p1 = 'data-bs-';\n                    }\n                    return getValuePrefix(p1) || getValuePrefix(p2);\n                },\n                // @ts-ignore\n                setValue: (bool) => {\n                    if (xor(neg, bool)) {\n                        elem?.setAttribute('data-bs-' + attrName, attrValue || '');\n                        if (version === 5) {\n                            elem?.removeAttribute('data-' + attrName);\n                        } else {\n                            elem?.setAttribute('data-' + attrName, attrValue || '');\n                        }\n                    } else {\n                        elem?.removeAttribute('data-' + attrName);\n                        elem?.removeAttribute('data-bs-' + attrName);\n                    }\n                }\n            };\n        },\n        /**\n         * @param {string} attr\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        notHasAttr: (attr, query) => {\n            return methods.hasAttr(attr, query, true);\n        },\n        /**\n         * @param {string} attr - Regex of attr\n         * @param {string=} query\n         * @param {string=} castTo\n         * @returns {Binding}\n         */\n        attrRegex: function(attr, query, castTo) {\n            /** @type {Element | null} */\n            let elem = el;\n            if (query) {\n                elem = el.querySelector(query);\n            }\n            const parts = attr.split(\"=\");\n            const attrName = parts[0].trim();\n            let attrValue = '';\n            if (parts.length > 1) {\n                attrValue = parts[1].trim();\n            }\n            return {\n                getValue() {\n                    const found = elem?.getAttribute(attrName) != null;\n                    if (found) {\n                        const match = elem?.getAttribute(attrName)?.match(attrValue);\n                        if (match?.[1] && typeof (match[1]) === \"string\") {\n                            return performCasting(match[1], castTo);\n                        }\n                        return '';\n                    }\n                    return null;\n                },\n                setValue(val) {\n                    const oldValue = elem?.getAttribute(attrName) ?? '';\n                    const match = new RegExp(attrValue, 'd').exec(oldValue);\n                    let newValue;\n                    if (match) {\n                        newValue = replaceStrPart(oldValue, match, val + '');\n                    } else {\n                        newValue = getValueFromRegex(attrValue, val + '');\n                    }\n                    elem?.setAttribute(attrName, newValue);\n                    if (attrName === 'href' || attrName === 'src') {\n                        elem?.setAttribute('data-mce-' + attrName, newValue + '');\n                    }\n                }\n            };\n        },\n        /**\n         * @param {string} sty\n         * @param {string=} query\n         * @param {boolean=} neg\n         * @returns {Binding}\n         */\n        hasStyle: function(sty, query, neg) {\n            /** @type {Element | null} */\n            let elem = el;\n            if (query) {\n                elem = el.querySelector(query);\n            }\n            const parts = sty.split(\":\");\n            let styName = parts[0].trim();\n            /** @type {string | undefined} */\n            let styValue;\n            if (parts.length > 1) {\n                styValue = parts[1].trim();\n            }\n            return {\n                getValue() {\n                    // @ts-ignore\n                    const st = elem?.style;\n                    const pValue = st.getPropertyValue(styName);\n                    const has = styValue === undefined ? pValue !== '' : pValue === styValue;\n                    return xor(has, neg);\n                },\n                // @ts-ignore\n                setValue(bool) {\n                    // @ts-ignore\n                    const st = elem?.style;\n                    if (xor(bool, neg)) {\n                        st?.setProperty(styName, styValue ?? '');\n                    } else {\n                        st?.removeProperty(styName);\n                    }\n                    // TODO: better way to update data-mce-style\n                    elem?.setAttribute('data-mce-style', st?.cssText ?? '');\n                }\n            };\n        },\n        /**\n         * @param {string} sty\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        notHasStyle: (sty, query) => {\n            return methods.hasStyle(sty, query, true);\n        },\n        /**\n         * @param {string} attr - styName:styValue where styValue is a regex with (.*)\n         * @param {string=} query\n         * @param {string=} castTo\n         * @returns {Binding}\n         */\n        styleRegex: function(attr, query, castTo) {\n            /** @type {Element | null} */\n            let elem = el;\n            if (query) {\n                elem = el.querySelector(query);\n            }\n            const parts = attr.split(\":\");\n            const styName = parts[0].trim();\n            let styValue = '';\n            if (parts.length > 1) {\n                styValue = parts[1].trim();\n            }\n            return {\n                /** @returns {string | null} */\n                getValue() {\n                    // @ts-ignore\n                    const st = elem?.style;\n                    const currentVal = st?.getPropertyValue(styName);\n                    if (currentVal) {\n                        if (styValue) {\n                            const match = new RegExp(styValue).exec(currentVal);\n                            if (match?.[1] && (typeof match[1]) === \"string\") {\n                                return performCasting(match[1], castTo);\n                            }\n                        } else {\n                            return performCasting(currentVal, castTo);\n                        }\n                    }\n                    return performCasting('', castTo);\n                },\n                // @ts-ignore\n                setValue(val) {\n                    let newValue;\n                    // @ts-ignore\n                    const st = elem?.style;\n                    if (styValue) {\n                        // Case val <= 0 && styName contains width or height\n                        if ((styName.includes(\"width\") || styName.includes(\"height\")) && (parseFloat(val + '') <= 0)) {\n                            newValue = '';\n                        } else {\n                            const oldValue = st?.getPropertyValue(styName) ?? '';\n                            if (oldValue) {\n                                const match = new RegExp(styValue, 'd').exec(oldValue);\n                                // @ts-ignore\n                                newValue = replaceStrPart(oldValue, match, val + '');\n                            } else {\n                                newValue = styValue.replace('(.*)', val + '');\n                            }\n                        }\n                    } else {\n                        newValue = val + '';\n                    }\n                    st?.setProperty(styName, newValue);\n                    // TODO: better way to update data-mce-style\n                    elem?.setAttribute('data-mce-style', st?.cssText || '');\n                }\n            };\n        }\n    };\n    return methods;\n};\n\n/**\n * @typedef {Object} Binding\n * @property {() => unknown} getValue\n * @property {(value: string | boolean | number) => void} setValue\n */\n/**\n * @param {string | {get?: string, set?: string, getValue?: string, setValue?: string}} definition\n * @param {Element} elem  - The root of widget\n * @param {string=} castTo  - The type that must be returned\n * @returns {Binding | null}\n */\nexport const createBinding = (definition, elem, castTo) => {\n    /** @type {Binding | null} */\n    let bindFn = null;\n    if (typeof (definition) === 'string') {\n        return evalInContext({...bindingFactory(elem)}, definition, true);\n    } else {\n        // The user provides the get and set functions (for jQuery element) @deprecated\n        // or getValue, setValue (for vanilla JS elements)\n        bindFn = {\n            getValue: () => {\n                let v;\n                if (definition.getValue) {\n                    v = evalInContext({elem}, `(${definition.getValue})(elem)`);\n                } else if (definition.get) {\n                    // @Deprecated. It will be removed in the future.\n                    v = evalInContext({elem: jQuery(elem)}, `(${definition.get})(elem)`);\n                }\n                if (castTo) {\n                    v = performCasting(v, castTo);\n                }\n                return v;\n            },\n            setValue: (v) => {\n                if (definition.setValue) {\n                    evalInContext({elem, v}, `(${definition.setValue})(elem, v)`);\n                } else if (definition.set) {\n                    // @Deprecated. It will be removed in the future.\n                    evalInContext({elem: jQuery(elem), v}, `(${definition.set})(elem, v)`);\n                }\n            }\n        };\n    }\n    return bindFn;\n};\n\n/**\n * Capitalizes the first letter of a string\n * @param {string | undefined | null} s\n * @returns {string}\n */\nexport const capitalize = s => (s && s[0].toUpperCase() + s.slice(1)) || \"\";\n\n/**\n * @param {string | null | undefined} color - color in hex or rgb or rgba\n * @returns {[string, number]} - The color in hex format, alpha channel 0..1\n */\nexport function toHexAlphaColor(color) {\n    color = (color || '#000000').trim().toLowerCase();\n    let alpha = 1;\n    if (color.startsWith(\"#\") && color.length === 9) {\n        // Already in hex & alpha\n        alpha = parseInt('0x' + color.substring(7)) / 255.0;\n        color = color.substring(0, 7);\n    } else if (color.startsWith('rgb')) {\n        // Assume rgb or rgba\n        const sep = color.indexOf(\",\") > -1 ? \",\" : \" \";\n        const a = color.replace(/[^\\d,]/g, \"\").split(sep);\n        color = \"#\" + ((1 << 24) + (+a[0] << 16) + (+a[1] << 8) + (+a[2])).toString(16).slice(1);\n        // Is rgba?\n        if (a.length === 4) {\n            alpha = +a[3];\n            if (alpha > 1) {\n                alpha = 0.01 * alpha;\n            }\n        }\n    }\n    return [color, alpha];\n}\n\n/**\n * @param {string | null | undefined} hex - color in hex\n * @param {number} alpha - 0..1 or 0..100\n * @returns {string} - The color in rgba syntax\n */\nexport function toRgba(hex, alpha) {\n    hex = (hex || '#000000').trim().toLowerCase();\n    /** @type {number | string} */\n    let alpha2 = alpha ?? 1;\n    if (alpha2 > 1) {\n        alpha2 *= 0.01;\n    }\n    if (alpha2 !== 0 && alpha2 !== 1) {\n        alpha2 = alpha2.toFixed(2);\n    }\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})/i.exec(hex);\n    let r = 0,\n        g = 0,\n        b = 0;\n    if (result) {\n        r = parseInt(result[1], 16);\n        g = parseInt(result[2], 16);\n        b = parseInt(result[3], 16);\n    }\n    if (alpha === 1) {\n        return `rgb(${r},${g},${b})`;\n    }\n    return `rgba(${r},${g},${b},${alpha2})`;\n}\n\n/**\n * Simple debounce function\n * @param {(evt?: any) => void} cb\n * @param {number} [delay]\n */\n/**\n * Simple debounce function\n * @param {(...args: unknown[]) => void} cb\n * @param {number} [delay]\n * @returns {((...args: unknown[]) => void) & {clear: () => void}}\n */\nexport function debounce(cb, delay = 1000) {\n    /** @type{number | null} */\n    let timeoutId = null;\n    const debounced = (/** @type {unknown[]} */ ...args) => {\n        if (timeoutId) {\n            window.clearTimeout(timeoutId);\n        }\n        timeoutId = window.setTimeout(() => {\n            cb(...args);\n        }, delay);\n    };\n    debounced.clear = () => {\n        if (!timeoutId) {\n            return;\n        }\n        window.clearTimeout(timeoutId);\n        timeoutId = null;\n    };\n    return debounced;\n}\n\n/**\n * @param {HTMLElement} elem\n * @param {...string} classNames\n */\nexport function toggleClass(elem, ...classNames) {\n    const classList = elem.classList;\n    classNames.forEach(name => {\n        if (classList.contains(name)) {\n            classList.remove(name);\n        } else {\n            classList.add(name);\n        }\n    });\n}\n\n/**\n * Normalize version string to [major, minor, patch]\n * @param {string} v\n * @returns {number[]}\n */\nfunction parseVersion(v) {\n    return v\n        .split('.')\n        .map(part => Number(part.trim()))\n        .concat([0, 0])\n        .slice(0, 3);\n}\n\n/**\n * Compares a version with a given condition.\n * @param {string} current - The current version to compare against condition in major.minor.revision format\n * @param {string | null | undefined} [condition] - The condition to meet. In <, <=, =, >=, major.minor.revision\n * @returns {boolean} True if current meets condition\n */\nexport function compareVersion(current, condition) {\n    if (!condition) {\n        return true;\n    }\n\n    // Parse condition string\n    const match = condition.trim().match(/^(>=|<=|>|<|=)?\\s*(\\d+(?:\\.\\d+){0,2})$/);\n    if (!match) {\n        console.error(\"Invalid version condition: \" + condition);\n        return true;\n    }\n\n    const operator = match[1] || \"=\";\n    const targetVersion = parseVersion(match[2]);\n    const currentVersion = parseVersion(current);\n\n    // Compare versions\n    let cmp = 0;\n    for (let i = 0; i < 3; i++) {\n        if (currentVersion[i] > targetVersion[i]) {\n            cmp = 1;\n            break;\n        }\n        if (currentVersion[i] < targetVersion[i]) {\n            cmp = -1;\n            break;\n        }\n    }\n\n    // Evaluate based on operator\n    switch (operator) {\n        case \">\": return cmp > 0;\n        case \">=\": return cmp >= 0;\n        case \"<\": return cmp < 0;\n        case \"<=\": return cmp <= 0;\n        case \"=\": return cmp === 0;\n        default:\n            console.log(\"Unknown operator: \" + operator);\n            return true;\n    }\n}\n\n/**\n * Parameters that are generated from $RND must never\n * be stored as recently used, nor used as new contexts\n * @param {Record<string, any>} ctx\n * @param {import('./options').Param[]} parameters\n * @returns {Record<string, any>}\n */\nexport function removeRndFromCtx(ctx, parameters) {\n    return Object.fromEntries(\n        Object.entries(ctx).filter(([k]) => {\n            const val = parameters.find(p => p.name === k)?.value;\n            return val !== '$RND';\n        })\n    );\n}\n\n/**\n * Helper to load scripts\n * @param {import('./plugin').TinyMCE} editor\n * @param {string} src\n * @returns {Promise<void>}\n */\nexport function loadScriptAsync(editor, src) {\n    return new Promise((resolve, reject) => {\n        const s = editor.dom.create('script', {src});\n        s.onload = () => resolve();\n        s.onerror = reject;\n        const head = editor.getDoc().querySelector(\"head\");\n        head.appendChild(s);\n    });\n}\n\n/**\n * Convert an HTML string into DOM element(s)\n * @param {Document} doc - The page document\n * @param {string} html - HTML string\n * @returns {HTMLElement} - Returns a single element if one root, or a DocumentFragment if multiple\n */\nexport function htmlToElement(doc, html) {\n    const template = doc.createElement('template');\n    template.innerHTML = html.trim();\n\n    if (template.content.childElementCount === 1) {\n        // @ts-ignore\n        return template.content.firstElementChild;\n    } else {\n        // If multiple root elements, return a fragment\n        // @ts-ignore\n        return template.content;\n    }\n}\n\n/**\n * @deprecated Use native editor.dom.setStyle instead.\n * @param {HTMLElement} target\n * @param {string} propName\n * @param {string} propValue\n */\nexport function setStyleMCE(target, propName, propValue) {\n    target.style.setProperty(propName, propValue);\n    // Sync data-mce-style\n    target.setAttribute('data-mce-style', target.getAttribute('style') ?? '');\n}\n\n/**\n * @param {HTMLElement} target\n * @param {string} propName\n */\nexport function removeStyleMCE(target, propName) {\n    target.style.removeProperty(propName);\n    // Sync data-mce-style\n    target.setAttribute('data-mce-style', target.getAttribute('style') ?? '');\n}"],"names":["base","url","trim","toLowerCase","startsWith","pathJoin","editor","coreStr","async","widgetTemplate","silent","mergevars","translations","get_strings","key","component","userWidgetFilter","createFilterFunction","notificationManager","open","text","type","timeout","handleFilterResult","res","out","msg","setContent","filteredResult","getContent","then","catch","err","console","error","name","replace","current","condition","match","operator","targetVersion","parseVersion","currentVersion","cmp","i","log","str","def","Math","floor","RegExp","exec","val","parseInt","isNaN","ex","cb","delay","timeoutId","debounced","args","window","clearTimeout","setTimeout","clear","varname","listVars","found","len","length","k","prefix","timePart","Date","now","toString","randPart","random","s","h","l","charCodeAt","abs","doc","html","template","createElement","innerHTML","content","childElementCount","firstElementChild","src","Promise","resolve","reject","dom","create","onload","onerror","getDoc","querySelector","appendChild","ctx","parameters","Object","fromEntries","entries","filter","_ref","find","p","_parameters$find","value","target","propName","style","removeProperty","setAttribute","getAttribute","str1","needle","indexOf","propValue","setProperty","transformStr","Builder","color","alpha","substring","sep","a","split","slice","hex","alpha2","toFixed","result","r","g","b","elem","classList","classNames","forEach","contains","remove","add","Common","evalInContext","expr","keepFns","listArgs","listVals","keys","push","Function","evaluator","Transformers","toUpperCase","txt","ytId","vimeoId","serveGDrive","removeHTML","escapeHTML","encodeHTML","encodeURIComponent","escapeQuotes","transSeq","constructor","parts","j","lenj","prts","transfunc","reduce","this","filterCode","endsWith","performCasting","parsed","parseFloat","JSON","stringify","xor","replaceStrPart","replacement","indices","getValueFromRegex","regexExpr","capturingGroupCount","bindingFactory","el","methods","hasClass","className","query","neg","getValue","_elem","_elem$classList","Boolean","setValue","bool","notHasClass","classRegex","classExpr","castTo","ret","classes","Array","from","clazz","cl","c","newCls","attr","attrName","attrValue","_elem9","_elem10","attrVal","attrBS","version","p1","p2","_elem14","undefined","_elem15","removeAttribute","hasAttr","hasAttrBS","getValuePrefix","notHasAttr","attrRegex","_elem33","_elem33$getAttribute","oldValue","newValue","hasStyle","sty","styValue","styName","pValue","_elem37","getPropertyValue","st","_elem38","cssText","notHasStyle","styleRegex","_elem40","currentVal","_elem41","includes","definition","bindFn","v","get","set","map","part","Number","concat"],"mappings":"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"}