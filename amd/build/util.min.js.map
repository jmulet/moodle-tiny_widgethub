{"version":3,"file":"util.min.js","sources":["../src/util.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-eq-null */\n/* eslint-disable no-bitwise */\n/* eslint-disable no-new-func */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * @returns {string} a randomID\n */\nexport function genID() {\n    return 'g' + Math.random().toString(32).substring(2);\n}\n\n/**\n * @param {Object.<string, any>} ctx\n * @param {string} expr\n * @param {boolean=} keepFns - Keep or not the funcions in the ctx\n * @returns {any} The evaluated expression within the context ctx\n */\nexport function evalInContext(ctx, expr, keepFns) {\n    const listArgs = [];\n    const listVals = [];\n\n    if (ctx) {\n        Object.keys(ctx).forEach((key) => {\n            // Remove functions from ctx\n            if (keepFns || typeof ctx[key] !== \"function\") {\n                listArgs.push(key);\n                listVals.push(ctx[key]);\n            }\n        });\n    }\n    listArgs.push('expr');\n    listArgs.push('return eval(expr)');\n    listVals.push(expr);\n    const evaluator = new Function(...listArgs);\n    return evaluator(...listVals);\n}\n\n/**\n * @param {string} s - string to the hashed\n * @returns {number}\n */\nexport function hashCode(s) {\n    s = s || \"\";\n    let h = 0;\n    const l = s.length;\n    let i = 0;\n    if (l > 0) {\n        while (i < l) {\n            h = (h << 6) + ((s.charCodeAt(i) - 65) | 0);\n            i++;\n        }\n    }\n    return Math.abs(h);\n}\n\n/**\n * @param {string} str1\n * @param {string} needle\n * @returns {boolean} Whether str1 contains needle or not\n */\nexport function searchComp(str1, needle) {\n    str1 = (str1 || '').trim().toLowerCase();\n    needle = (needle || '').trim().toLowerCase();\n    str1 = str1.replace(/[àáâãäå]/, \"a\")\n        .replace(/[èéêë]/, \"e\")\n        .replace(/[ìíîï]/, \"i\")\n        .replace(/[òóôö]/, \"o\")\n        .replace(/[ùúüû]/, \"u\")\n        .replace(/ç/, \"c\")\n        .replace(/·/, \"\");\n    needle = needle.replace(/[àáâãäå]/, \"a\")\n        .replace(/[èéêë]/, \"e\")\n        .replace(/[ìíîï]/, \"i\")\n        .replace(/[òóôö]/, \"o\")\n        .replace(/[ùúüû]/, \"u\")\n        .replace(/ç/, \"c\")\n        .replace(/·/, \"\");\n    return str1.indexOf(needle) >= 0;\n}\n\n/** Default transformers */\nconst Transformers = {\n    /** @param {string} txt */\n    toUpperCase: function(txt) {\n        return (txt + \"\").toUpperCase();\n    },\n    /** @param {string} txt */\n    toLowerCase: function(txt) {\n        return (txt + \"\").toLowerCase();\n    },\n   /** @param {string} txt */\n    trim: function(txt) {\n        return (txt + \"\").trim();\n    },\n    /** @param {string} txt */\n    ytId: function(txt) {\n        // Finds the youtubeId in a text\n        const rx = /^.*(?:(?:youtu\\.be\\/|v\\/|vi\\/|u\\/\\w\\/|embed\\/|shorts\\/)|(?:(?:watch)?\\?v(?:i)?=|&v(?:i)?=))([^#&?]*).*/;\n        const r = (txt || '').match(rx);\n        if (r?.length) {\n            return r[1];\n        }\n        return txt;\n    },\n    /** @param {string} txt */\n    vimeoId: function(txt) {\n        const regExp = /^.*(vimeo\\.com\\/)((channels\\/[A-z]+\\/)|(groups\\/[A-z]+\\/videos\\/))?(\\d+)/;\n        const match = new RegExp(regExp).exec(txt || \"\");\n        if (match?.[5]) {\n            return match[5];\n        }\n        return txt;\n    },\n    /** @param {string} txt */\n    serveGDrive: function(txt) {\n        // Expecting https://drive.google.com/file/d/1DDUzcFrOlzWb3CBdFPJ1NCNXClvPbm5B/preview\n        const res = (txt + \"\").match(/https:\\/\\/drive.google.com\\/file\\/d\\/([a-zA-Z0-9_]+)\\//);\n        if (res?.length) {\n            const driveId = res[1];\n            return \"https://docs.google.com/uc?export=open&id=\" + driveId;\n        }\n        return txt;\n    },\n    /** @param {string} txt */\n    removeHTML: function(txt) {\n        return (txt || '').replace(/<[^>]*>?/gm, '');\n    },\n    /** @param {string} txt */\n    escapeHTML: function(txt) {\n        return (txt || '').replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    },\n   /** @param {string} txt */\n    encodeHTML: function(txt) {\n        // @ts-ignore\n        return encodeURIComponent(txt || \"\");\n    },\n    /** @param {string} txt */\n    escapeQuotes: function(txt) {\n        return (txt || '').replace(/\"/gm, \"'\");\n    }\n};\n\n\nclass Builder {\n    transSeq;\n    // @ts-ignore\n    constructor(transformStr) {\n        const parts = transformStr.split('|');\n        this.transSeq = [];\n        for (let j = 0, lenj = parts.length; j < lenj; j++) {\n            const prts = parts[j].trim();\n            // @ts-ignore\n            const transfunc = Transformers[prts];\n            if (transfunc != null) {\n                this.transSeq.push(transfunc);\n            } else {\n                console.error(\"Cannot find transformer named \" + prts);\n            }\n        }\n    }\n\n    // @ts-ignore\n    reduce(text) {\n        for (let j = 0, lenj = this.transSeq.length; j < lenj; j++) {\n            const transfunc = this.transSeq[j];\n            text = transfunc(text);\n        }\n        return text;\n    }\n}\n\n/**\n * @param {string} transformStr\n * @returns {Builder} call reduce(text) function\n */\nexport function stream(transformStr) {\n    return new Builder(transformStr);\n}\n\n/**\n * @param {string} name\n * @returns {string} Replaces $ apperences by _ to make the name compatible by data attributes\n */\nexport function cleanParameterName(name) {\n    return name.replace(/\\$/g, '_');\n}\n\n/**\n * Creates a filter funcion from filterCode\n * @param {string} filterCode\n * @returns {Function?}\n */\nexport function createFilterFunction(filterCode) {\n    let userWidgetFilter = null;\n    try {\n        userWidgetFilter = new Function('text', 'editor', 'opts', filterCode);\n    } catch (ex) {\n        userWidgetFilter = null;\n        console.error(ex);\n    }\n    return userWidgetFilter;\n}\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @param {{get_strings: (keyComponent: any[]) => Promise<string[]>}} coreStr - dependency on core/str\n * @returns {*}\n */\nexport function applyWidgetFilterFactory(editor, coreStr) {\n    /**\n     * @param {string} widgetTemplate\n     * @param {boolean} silent\n     * @param {object?} mergevars\n     * @returns {Promise<boolean>} - True if the filter can be compiled\n     */\n    return async(widgetTemplate, silent, mergevars) => {\n        const translations = await coreStr.get_strings([\n            {key: 'filterres', component: 'tiny_widgethub'},\n            {key: 'nochanges', component: 'tiny_widgethub'}\n        ]);\n        // Es tracta d'un filtre, no d'un widget i s'ha de tractar de forma diferent\n        const userWidgetFilter = createFilterFunction(widgetTemplate);\n\n        if (!userWidgetFilter) {\n            editor.notificationManager.open({\n                text: translations[0] + \": Invalid filter\",\n                type: 'danger',\n                timeout: 4000\n            });\n            return false;\n        }\n        // @ts-ignore\n        const handleFilterResult = function(res) {\n            const out = res[0];\n            let msg = res[1];\n            if (out != null) {\n                if (typeof out === \"string\") {\n                    editor.setContent(out);\n                    editor.notificationManager.open({\n                        text: translations[0] + \": \" + msg,\n                        type: 'success',\n                        timeout: 5000\n                    });\n                } else if (out === true) {\n                    editor.notificationManager.open({\n                        text: translations[0] + \": \" + msg,\n                        type: 'success',\n                        timeout: 5000\n                    });\n                } else if (out === false && !silent) {\n                    editor.notificationManager.open({\n                        text: translations[1],\n                        type: 'info',\n                        timeout: 5000\n                    });\n                }\n            } else if (!silent) {\n                editor.notificationManager.open({\n                    text: translations[1],\n                    type: 'info',\n                    timeout: 5000\n                });\n            }\n        };\n\n        const initialHTML = editor.getContent();\n        const filteredResult = userWidgetFilter(initialHTML, editor, mergevars);\n        // Hi ha la possibilitat que el filtre retorni una promesa o un array\n        const isPromise = filteredResult != null && typeof (filteredResult) === 'object' && ('then' in filteredResult);\n        if (isPromise) {\n            filteredResult.then(handleFilterResult).catch((/** @type {any} */ err) => console.error(err));\n        } else {\n            handleFilterResult(filteredResult || [null, translations[1]]);\n        }\n        return true;\n    };\n}\n\n/**\n * Safe conversion of a string to integer by handling errors and NaN values\n * In this case, the def number passed is returned\n * @param {string | undefined | null | number} str\n * @param {number} def - default value\n * @returns {number}\n */\nexport function convertInt(str, def) {\n    if (str && typeof str === 'number') {\n        return Math.floor(str);\n    }\n    if (!str || !(str + \"\").trim() || !RegExp(/^\\s*[+-]?\\d+(\\.\\d*)?\\s*$/).exec(str + \"\")) {\n        return def;\n    }\n    try {\n        const val = parseInt(str + \"\");\n        if (!isNaN(val)) {\n            return val;\n        }\n    } catch (ex) {\n        // Pass\n    }\n    return def;\n}\n\n/**\n * Finds the parameter with a given name within the list of objects\n * @param {string} varname\n * @param {import('./options').Param[]} listVars\n * @returns {import('./options').Param | null}\n */\nexport function findVariableByName(varname, listVars) {\n    if (!listVars) {\n        return null;\n    }\n    let found = null;\n    const len = listVars.length;\n    let k = 0;\n    while (k < len && !found) {\n        if (listVars[k].name === varname) {\n            found = listVars[k];\n        }\n        k++;\n    }\n    return found;\n}\n\n/**\n * Safely joins two parts of an url\n * @param {string} a\n * @param {string=} b\n * @returns {string}\n */\nexport function pathJoin(a, b) {\n    a = (a || \"\").trim();\n    b = (b || \"\").trim();\n    if (!a.endsWith('/')) {\n        a = a + '/';\n    }\n    if (b.startsWith('/')) {\n        b = b.substring(1);\n    }\n    return a + b;\n}\n\n/**\n * Adds the baseurl if the passed url does not start with http or https\n * @param {string} base\n * @param {string=} url\n * @returns {string}\n */\nexport function addBaseToUrl(base, url) {\n    url = (url || \"\").trim();\n    if (url.toLowerCase().startsWith(\"http\")) {\n        return url;\n    }\n    // Afegir la base\n    const out = pathJoin(base, url);\n    return out;\n}\n\n/**\n * @param {*} value\n * @param {string | undefined} type\n * @returns {*}\n */\nexport const performCasting = function(value, type) {\n    if (!type || typeof value === type) {\n        return value;\n    }\n    switch (type) {\n        case (\"boolean\"):\n            if (value === 1 || value === \"1\" || value === true || value === \"true\") {\n                value = true;\n            } else {\n                value = false;\n            }\n            break;\n        case (\"number\"):\n            try {\n                let parsed;\n                if ((value + '').indexOf(\".\") < 0) {\n                    parsed = parseInt(value);\n                } else {\n                    parsed = parseFloat(value);\n                }\n                if (!isNaN(parsed)) {\n                    value = parsed;\n                } else {\n                    value = 0;\n                    console.error(`Error parsing number ${value}`);\n                }\n            } catch (ex) {\n                value = 0;\n                console.error(`Error parsing number ${value}`);\n            }\n            break;\n        case (\"string\"):\n            if (typeof value === 'object') {\n                value = JSON.stringify(value);\n            } else {\n                value = value + \"\";\n            }\n            break;\n        default:\n            console.error(`Fail to cast ${value} to ${type}`);\n    }\n    return value;\n};\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n */\nconst xor = function(a, b) {\n    return !a !== !b;\n};\n\n/**\n * @param {string} str\n * @param {*} match\n * @param {string} replacement\n * @returns {string}\n */\nconst replaceStrPart = function(str, match, replacement) {\n    if (!match.indices) {\n        console.error(\"RegExp match does not include indices\");\n        return str;\n    }\n    const [a, b] = match.indices[1];\n    return str.substring(0, a) + replacement + str.substring(b);\n};\n\n/**\n * Replaces the first capturing group in regexExpr by replacement,\n * The remaining capturing groups are removed.\n * @param {string} regexExpr\n * @param {string} replacement\n * @returns {string}\n */\nconst getValueFromRegex = function(regexExpr, replacement) {\n    const reParser = /\\((?!\\?:).*?\\)/g;\n    let capturingGroupCount = 0;\n    return regexExpr.replace(reParser, () => {\n        capturingGroupCount++;\n        if (capturingGroupCount === 1) {\n            return replacement + '';\n        }\n        return \"\"; // Remove all other capturing groups\n    });\n};\n\n/**\n * @param {JQuery<HTMLElement>} $e - The target element\n * @returns\n */\nconst bindingFactory = function($e) {\n    /** @this {Record<string, Function>} */\n    const methods = {\n        /**\n         * @param {string} className\n         * @param {string=} query\n         * @param {boolean=} neg\n         * @returns {Binding}\n         */\n        hasClass: (className, query, neg) => {\n            /** @type {JQuery<HTMLElement>} */\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            return {\n                // @ts-ignore\n                getValue: () => {\n                    const res = xor(neg, elem.hasClass(className));\n                    return Boolean(res);\n                },\n                // @ts-ignore\n                setValue: (bool) => {\n                    if (xor(neg, bool)) {\n                        elem.addClass(className);\n                    } else {\n                        elem.removeClass(className);\n                    }\n                }\n            };\n        },\n        /**\n         * @param {string} className\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        notHasClass: (className, query) => {\n            return methods.hasClass(className, query, true);\n        },\n        /**\n         * @param {string} classExpr\n         * @param {string=} query\n         * @param {string=} castTo\n         * @returns {Binding}\n         */\n        classRegex: (classExpr, query, castTo) => {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            return {\n                getValue: () => {\n                    let ret = '';\n                    const classes = (elem.attr('class') ?? '').split(' ');\n                    for (const clazz of classes) {\n                        const match = new RegExp(classExpr).exec(clazz);\n                        if (match?.[1] && typeof (match[1]) === \"string\") {\n                            ret = match[1];\n                            break;\n                        }\n                    }\n                    return performCasting(ret, castTo);\n                },\n                setValue: (val) => {\n                    const cl = elem.attr('class')?.split(/\\s+/) ?? [];\n                    let found = false;\n                    cl.forEach(c => {\n                        const match = new RegExp(classExpr, 'd').exec(c);\n                        if (match === null) {\n                            return;\n                        }\n                        found = true;\n                        elem.removeClass(c);\n                        const newCls = replaceStrPart(c, match, val + '');\n                        elem.addClass(newCls);\n                    });\n                    // If not found, then set the regExp replacing the\n                    // first capturing group with val, and removing the remaining groups.\n                    if (!found) {\n                        const newCls = getValueFromRegex(classExpr, val + '');\n                        elem.addClass(newCls);\n                    }\n                }\n            };\n        },\n        /**\n         * @param {string} attrName\n         * @param {string=} query\n         * @param {string=} castTo\n         * @returns {Binding}\n         */\n        attr: (attrName, query, castTo) => {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            return {\n                getValue: () => {\n                    let attrValue = elem.attr(attrName);\n                    if (attrName.indexOf('-bs-') > 0) {\n                        attrValue = attrValue ?? elem.attr(attrName.replace('-bs-', '-'));\n                    }\n                    return performCasting(attrValue, castTo);\n                },\n                // @ts-ignore\n                setValue: (val) => {\n                    if (typeof val === \"boolean\") {\n                        val = val ? 1 : 0;\n                    }\n                    const attrVal = val + '';\n                    elem.attr(attrName, attrVal);\n                    if (attrName.indexOf('-bs-') > 0) {\n                        // Save as old bs\n                        elem.attr(attrName.replace('-bs-', '-'), attrVal);\n                    }\n                    if (attrName === 'href' || attrName === 'src') {\n                        elem.attr('data-mce-' + attrName, attrVal);\n                    }\n                }\n            };\n        },\n        /**\n         * @param {string} attr\n         * @param {string=} query\n         * @param {boolean=} neg\n         * @returns {Binding}\n         */\n        hasAttr: (attr, query, neg) => {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            const parts = attr.split(\"=\");\n            const attrName = parts[0].trim();\n            let attrValue = '';\n            if (parts.length > 1) {\n                attrValue = parts[1].trim();\n            }\n            return {\n                getValue: () => {\n                    let found = elem.attr(attrName) != null;\n                    if (attrValue) {\n                        found = found && elem.attr(attrName) === attrValue;\n                    }\n                    return xor(neg, found);\n                },\n                // @ts-ignore\n                setValue: (bool) => {\n                    if (xor(neg, bool)) {\n                        elem.attr(attrName, attrValue || '');\n                        if (attrName === 'href' || attrName === 'src') {\n                            elem.attr('data-mce-' + attrName, attrValue + '');\n                        }\n                    } else {\n                        elem.removeAttr(attrName);\n                        if (attrName === 'href' || attrName === 'src') {\n                            elem.removeAttr('data-mce-' + attrName);\n                        }\n                    }\n                }\n            };\n        },\n        /**\n         * @param {string} attr\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        notHasAttr: (attr, query) => {\n            return methods.hasAttr(attr, query, true);\n        },\n        /**\n         * @param {string} attr - Regex of attr\n         * @param {string=} query\n         * @param {string=} castTo\n         * @returns {Binding}\n         */\n        attrRegex: function(attr, query, castTo) {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            const parts = attr.split(\"=\");\n            const attrName = parts[0].trim();\n            let attrValue = '';\n            if (parts.length > 1) {\n                attrValue = parts[1].trim();\n            }\n            return {\n                getValue() {\n                    const found = elem.attr(attrName) != null;\n                    if (found) {\n                        const match = elem.attr(attrName)?.match(attrValue);\n                        if (match?.[1] && typeof (match[1]) === \"string\") {\n                            return performCasting(match[1], castTo);\n                        }\n                        return '';\n                    }\n                    return null;\n                },\n                setValue(val) {\n                    const oldValue = elem.attr(attrName) ?? '';\n                    const match = new RegExp(attrValue, 'd').exec(oldValue);\n                    let newValue;\n                    if (match) {\n                        newValue = replaceStrPart(oldValue, match, val + '');\n                    } else {\n                        newValue = getValueFromRegex(attrValue, val + '');\n                    }\n                    elem.attr(attrName, newValue);\n                    if (attrName === 'href' || attrName === 'src') {\n                        elem.attr('data-mce-' + attrName, newValue + '');\n                    }\n                }\n            };\n        },\n        /**\n         * @param {string} sty\n         * @param {string=} query\n         * @param {boolean=} neg\n         * @returns {Binding}\n         */\n        hasStyle: function(sty, query, neg) {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            const parts = sty.split(\":\");\n            let styName = parts[0].trim();\n            /** @type {string | undefined} */\n            let styValue;\n            if (parts.length > 1) {\n                styValue = parts[1].trim();\n            }\n            return {\n                getValue() {\n                    const st = elem.prop('style');\n                    const pValue = st.getPropertyValue(styName);\n                    const has = styValue === undefined ? pValue !== '' : pValue === styValue;\n                    return xor(has, neg);\n                },\n                // @ts-ignore\n                setValue(bool) {\n                    if (xor(bool, neg)) {\n                        elem.css(styName, styValue ?? '');\n                    } else {\n                        const st = elem.prop('style');\n                        st.removeProperty(styName);\n                    }\n                    // TODO: better way to update data-mce-style\n                    elem.attr('data-mce-style', elem[0].style.cssText);\n                }\n            };\n        },\n        /**\n         * @param {string} sty\n         * @param {string=} query\n         * @returns {Binding}\n         */\n        notHasStyle: (sty, query) => {\n            return methods.hasStyle(sty, query, true);\n        },\n        /**\n         * @param {string} attr - styName:styValue where styValue is a regex with (.*)\n         * @param {string=} query\n         * @param {string=} castTo\n         * @returns {Binding}\n         */\n        styleRegex: function(attr, query, castTo) {\n            let elem = $e;\n            if (query) {\n                elem = $e.find(query);\n            }\n            const parts = attr.split(\":\");\n            const styName = parts[0].trim();\n            let styValue = '';\n            if (parts.length > 1) {\n                styValue = parts[1].trim();\n            }\n            return {\n                /** @returns {string | null} */\n                getValue() {\n                    const st = elem.prop('style');\n                    const currentVal = st?.getPropertyValue(styName);\n                    if (currentVal) {\n                        if (styValue) {\n                            const match = new RegExp(styValue).exec(currentVal);\n                            if (match?.[1] && (typeof match[1]) === \"string\") {\n                                return performCasting(match[1], castTo);\n                            }\n                        } else {\n                            return performCasting(currentVal, castTo);\n                        }\n                    }\n                    return performCasting('', castTo);\n                },\n                // @ts-ignore\n                setValue(val) {\n                    let newValue;\n                    if (styValue) {\n                        // Case val <= 0 && styName contains width or height\n                        if ((styName.includes(\"width\") || styName.includes(\"height\")) && (parseFloat(val + '') <= 0)) {\n                            newValue = '';\n                        } else {\n                            const oldValue = elem.prop('style').getPropertyValue(styName) ?? '';\n                            if (oldValue) {\n                                const match = new RegExp(styValue, 'd').exec(oldValue);\n                                // @ts-ignore\n                                newValue = replaceStrPart(oldValue, match, val + '');\n                            } else {\n                                newValue = styValue.replace('(.*)', val + '');\n                            }\n                        }\n                    } else {\n                        newValue = val + '';\n                    }\n                    elem.css(styName, newValue);\n                    // TODO: better way to update data-mce-style\n                    elem.attr('data-mce-style', elem[0].style.cssText);\n                }\n            };\n        }\n    };\n    return methods;\n};\n\n/**\n * @typedef {Object} Binding\n * @property {() => unknown} getValue\n * @property {(value: string | boolean | number) => void} setValue\n */\n/**\n * @param {string | {get: string, set: string}} definition\n * @param {JQuery<HTMLElement>} elem  - The root of widget\n * @param {string=} castTo  - The type that must be returned\n * @returns {Binding | null}\n */\nexport const createBinding = (definition, elem, castTo) => {\n    /** @type {Binding | null} */\n    let bindFn = null;\n    if (typeof (definition) === 'string') {\n        return evalInContext({...bindingFactory(elem)}, definition, true);\n    } else {\n        // The user provides the get and set functions\n        bindFn = {\n            getValue: () => {\n                let v = evalInContext({elem}, `(${definition.get})(elem)`);\n                if (castTo) {\n                    v = performCasting(v, castTo);\n                }\n                return v;\n            },\n            setValue: (v) => evalInContext({elem, v}, `(${definition.set})(elem, v)`)\n        };\n    }\n    return bindFn;\n};\n\n/**\n * Capitalizes the first letter of a string\n * @param {string | undefined | null} s\n * @returns {string}\n */\nexport const capitalize = s => (s && s[0].toUpperCase() + s.slice(1)) || \"\";\n\n/**\n * @param {string | null | undefined} color - color in hex or rgb or rgba\n * @returns {[string, number]} - The color in hex format, alpha channel 0..1\n */\nexport function toHexAlphaColor(color) {\n    color = (color || '#000000').trim().toLowerCase();\n    let alpha = 1;\n    if (color.startsWith(\"#\") && color.length === 9) {\n        // Already in hex & alpha\n        alpha = parseInt('0x' + color.substring(7)) / 255.0;\n        color = color.substring(0, 7);\n    } else if (color.startsWith('rgb')) {\n        // Assume rgb or rgba\n        const sep = color.indexOf(\",\") > -1 ? \",\" : \" \";\n        const a = color.replace(/[^\\d,]/g, \"\").split(sep);\n        color = \"#\" + ((1 << 24) + (+a[0] << 16) + (+a[1] << 8) + (+a[2])).toString(16).slice(1);\n        // Is rgba?\n        if (a.length === 4) {\n            alpha = +a[3];\n            if (alpha > 1) {\n                alpha = 0.01 * alpha;\n            }\n        }\n    }\n    return [color, alpha];\n}\n\n/**\n * @param {string | null | undefined} hex - color in hex\n * @param {number} alpha - 0..1 or 0..100\n * @returns {string} - The color in rgba syntax\n */\nexport function toRgba(hex, alpha) {\n    hex = (hex || '#000000').trim().toLowerCase();\n    /** @type {number | string} */\n    let alpha2 = alpha ?? 1;\n    if (alpha2 > 1) {\n        alpha2 *= 0.01;\n    }\n    if (alpha2 !== 0 && alpha2 !== 1) {\n        alpha2 = alpha2.toFixed(2);\n    }\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})/i.exec(hex);\n    let r = 0,\n        g = 0,\n        b = 0;\n    if (result) {\n      r = parseInt(result[1], 16);\n      g = parseInt(result[2], 16);\n      b = parseInt(result[3], 16);\n    }\n    if (alpha === 1) {\n        return `rgb(${r},${g},${b})`;\n    }\n    return `rgba(${r},${g},${b},${alpha2})`;\n}\n\n/**\n * Simple debounce function\n * @param {(evt?: any) => void} cb\n * @param {number} [delay]\n */\n/**\n * Simple debounce function\n * @param {(...args: unknown[]) => void} cb\n * @param {number} [delay]\n * @returns {((...args: unknown[]) => void) & {clear: () => void}}\n */\nexport function debounce(cb, delay = 1000) {\n    /** @type{number | null} */\n    let timeoutId = null;\n    const debounced = (/** @type {unknown[]} */ ...args) => {\n        if (timeoutId) {\n            window.clearTimeout(timeoutId);\n        }\n        timeoutId = window.setTimeout(() => {\n          cb(...args);\n        }, delay);\n    };\n    debounced.clear = () => {\n        if (!timeoutId) {\n            return;\n        }\n        window.clearTimeout(timeoutId);\n        timeoutId = null;\n    };\n    return debounced;\n}\n\n/**\n * @param {HTMLElement} elem\n * @param {...string} classNames\n */\nexport function toggleClass(elem, ...classNames) {\n    const classList = elem.classList;\n    classNames.forEach(name => {\n        if (classList.contains(name)) {\n            classList.remove(name);\n        } else {\n            classList.add(name);\n        }\n    });\n}"],"names":["evalInContext","ctx","expr","keepFns","listArgs","listVals","Object","keys","forEach","key","push","Function","evaluator","base","url","trim","toLowerCase","startsWith","pathJoin","editor","coreStr","async","widgetTemplate","silent","mergevars","translations","get_strings","component","userWidgetFilter","createFilterFunction","notificationManager","open","text","type","timeout","handleFilterResult","res","out","msg","setContent","filteredResult","getContent","then","catch","err","console","error","name","replace","str","def","Math","floor","RegExp","exec","val","parseInt","isNaN","ex","cb","delay","timeoutId","debounced","args","window","clearTimeout","setTimeout","clear","varname","listVars","found","len","length","k","random","toString","substring","s","h","l","i","charCodeAt","abs","str1","needle","indexOf","transformStr","Builder","color","alpha","sep","a","split","slice","hex","alpha2","toFixed","result","r","g","b","elem","classList","classNames","contains","remove","add","Transformers","toUpperCase","txt","ytId","match","vimeoId","serveGDrive","removeHTML","escapeHTML","encodeHTML","encodeURIComponent","escapeQuotes","transSeq","constructor","parts","j","lenj","prts","transfunc","reduce","this","filterCode","endsWith","performCasting","value","parsed","parseFloat","JSON","stringify","xor","replaceStrPart","replacement","indices","getValueFromRegex","regexExpr","capturingGroupCount","bindingFactory","$e","methods","hasClass","className","query","neg","find","getValue","Boolean","setValue","bool","addClass","removeClass","notHasClass","classRegex","classExpr","castTo","ret","classes","attr","clazz","cl","c","newCls","attrName","attrValue","attrVal","hasAttr","removeAttr","notHasAttr","attrRegex","_elem$attr2","oldValue","newValue","hasStyle","sty","styValue","styName","pValue","prop","getPropertyValue","undefined","css","removeProperty","style","cssText","notHasStyle","styleRegex","st","currentVal","includes","definition","bindFn","v","get","set"],"mappings":"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"}