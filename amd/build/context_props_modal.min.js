define("tiny_widgethub/context_props_modal",["exports","./modal","core/modal_factory","core/modal_events","./uiParams","./util"],(function(_exports,_modal,_modal_factory,_modal_events,_uiParams,_util){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Tiny WidgetHub plugin.
   *
   * @module      tiny_widgethub/plugin
   * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_modal_factory=_interopRequireDefault(_modal_factory),_modal_events=_interopRequireDefault(_modal_events);return _exports.default=class{#editor;#modal;constructor(editor){this.#editor=editor}async show(currentContext){const widget=currentContext.widget,hostId=this.#editor.id,elem=currentContext.elem;if(!elem||null==widget||!widget.hasBindings())return void console.error("Invalid genericEditor widget definition ",widget);const bindingsDOM={},paramValues={};widget.parameters.filter((param=>null!=param.bind)).forEach((param=>{if(!param.bind)return;const binding=(0,_util.createBinding)(param.bind,elem,typeof param.value);binding&&(bindingsDOM[param.name]=binding,paramValues[param.name]=binding.getValue())}));const controls=[];widget.parameters.filter((param=>param.bind)).forEach((param=>{controls.push((0,_uiParams.createControlHTML)(hostId,param,paramValues[param.name]))}));const data={name:widget.name,controls:controls};this.#modal=await _modal_factory.default.create({type:_modal.IBContextModal.TYPE,templateContext:data,large:!0}),this.#modal.getRoot().on(_modal_events.default.hidden,(()=>{this.#modal.destroy()})),(0,_uiParams.attachImagePickers)(this.#editor,this.#modal.body),(0,_uiParams.applyFieldWatchers)(this.#modal.body,paramValues,widget,!1),this.#modal.footer.find("button.btn-secondary").on("click",(()=>{this.#modal.destroy()})),this.#modal.footer.find("button.btn-primary").on("click",(()=>{const form=this.#modal.body.find("form"),updatedValues=(0,_uiParams.getParametersFromForm)(widget,form,null);this.#modal.destroy(),Object.keys(bindingsDOM).forEach((key=>{bindingsDOM[key].setValue(updatedValues[key])}))})),this.#modal.show()}close(){this.#modal.destroy()}},_exports.default}));

//# sourceMappingURL=context_props_modal.min.js.map