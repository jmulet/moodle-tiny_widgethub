{"version":3,"file":"templateSrv.min.js","sources":["../../src/service/templateSrv.js"],"sourcesContent":["/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport { evalInContext, genID } from '../util';\n\n\n/**\n * @param {string} text\n * @param {Object.<string, any>} ctx2\n * @returns {string}\n */\nconst defineVar = function (text, ctx2) {\n    const pos = text.indexOf(\"=\");\n    const varname = text.substring(0, pos).trim();\n    const varvalue = evalInContext(ctx2, text.substring(pos + 1).trim());\n    ctx2[varname] = varvalue;\n    return varname;\n};\n\nexport default class TemplateSrv {\n    /**\n     *\n     * @param {import('../container').DIContainer} container\n     */\n    constructor({ mustache, ejsLoader }) {\n        this.mustache = mustache;\n        this.ejsLoader = ejsLoader;\n    }\n    /**\n     * @param {string} template\n     * @param {Object.<string, any>} context\n     * @param {Object.<string, Object.<string, string>>=} translations\n     * @returns {string} The interpolated template given a context and translations map\n     */\n    renderMustache(template, context, translations) {\n        const ctx = { ...context };\n        Object.keys(ctx).forEach(key => {\n            if (ctx[key] === \"$RND\") {\n                ctx[key] = genID();\n            }\n        });\n        this.applyMustacheHelpers(ctx, translations ?? {});\n        // @ts-ignore\n        return this.mustache.render(template, ctx);\n    }\n\n    /**\n     * @param {string} template\n     * @param {Object.<string, any>} context\n     * @param {Object.<string, Object.<string, any>>} translations\n     * @returns {Promise<string>} The interpolated template given a context and translations map\n     */\n    async rendererEJS(template, context, translations) {\n        /** @type {Object.<string, any>} */\n        const ctx = { ...context, I18n: {} };\n        Object.keys(ctx).forEach(key => {\n            if (ctx[key] === \"$RND\") {\n                ctx[key] = genID();\n            }\n        });\n        const lang = ctx[\"LANG\"];\n        for (let wordKey in translations) {\n            const dict = translations[wordKey];\n            ctx[\"I18n\"][wordKey] = dict[lang] || dict[\"en\"] || dict[\"es\"] || wordKey;\n        }\n        try {\n            const ejsResolved = await this.ejsLoader();\n            return ejsResolved.render(template, ctx);\n        } catch (ex) {\n            console.error(ex);\n            return \"\";\n        }\n    }\n\n    /**\n     * @param {string} template\n     * @param {Object.<string, any>} context\n     * @param {Object.<string, Object.<string, any>>} translations\n     * @param {string=} engine - (ejs | mustache) optional\n     * @returns {Promise<string>} - The interpolated template given a context and translations map\n     */\n    render(template, context, translations, engine) {\n        if (!engine) {\n            engine = template.includes(\"<%\") ? \"ejs\" : \"mustache\";\n        }\n        if (engine === \"ejs\") {\n            return this.rendererEJS(template, context, translations);\n        }\n        // Default to Mustache\n        const tmpl = this.renderMustache(template, context, translations);\n        return Promise.resolve(tmpl);\n    }\n\n    /**\n     * Extends Mustache templates with some helpers\n     * @param {Object.<string, any>} ctx\n     * @param {Record<string, Record<string, string>>} translations\n     */\n    applyMustacheHelpers(ctx, translations) {\n        ctx[\"if\"] = () =>\n            /**\n             * @param {string} text\n             * @param {Mustache.render} render\n             */\n            function (text, render) {\n                const pos = text.indexOf(\"]\");\n                const condition = text.substring(0, pos).trim().substring(1);\n                const show = evalInContext(ctx, condition);\n                if (show) {\n                    // @ts-ignore\n                    return render(text.substring(pos + 1).trim());\n                }\n                return \"\";\n            };\n        ctx[\"var\"] = () =>\n            /**\n             * @param {string} text\n             */\n            function (text) {\n                defineVar(text, ctx);\n            };\n        ctx[\"eval\"] = () =>\n            /**\n             * @param {string} text\n             */\n            function (text) {\n                return evalInContext(ctx, text) + \"\";\n            };\n        ctx[\"I18n\"] = () =>\n            /**\n             * @param {string} text\n             * @param {Mustache.render} render\n             */\n            function (text, render) {\n                // @ts-ignore\n                const key = render(text).trim();\n                const dict = translations[key] || {};\n                return dict[ctx[\"LANG\"]] || dict[\"en\"] || dict[\"ca\"] || key;\n            };\n        ctx[\"each\"] = () =>\n            /**\n             * @param {string} text\n             */\n            function (text) {\n                const pos = text.indexOf(\"]\");\n                const cond = text.substring(0, pos).trim().substring(1);\n                const components = cond.split(\",\");\n                const dim = components.length;\n                const maxValues = new Array(dim);\n                const loopVars = new Array(dim);\n                let total = 1;\n                const cc = 'i'.charCodeAt(0);\n                components.forEach((def, i) => {\n                    const parts = def.split(\"=\");\n                    if (parts.length === 1) {\n                        parts.unshift(String.fromCharCode(cc + i));\n                    }\n                    const cname = parts[0].trim();\n                    loopVars[i] = cname;\n                    const dm = evalInContext(ctx, parts[1]);\n                    total = total * dm;\n                    maxValues[i] = dm;\n                    ctx[cname] = 1;\n                });\n                let output = [];\n                for (let _ei = 0; _ei < total; _ei++) {\n                    // @ts-ignore\n                    output.push(this.mustache.render(text.substring(pos + 1), ctx));\n                    let currentDim = dim - 1;\n                    let incrUp;\n                    do {\n                        const oldValue = ctx[loopVars[currentDim]] - 1;\n                        const newValue = (oldValue + 1) % maxValues[currentDim] + 1;\n                        ctx[loopVars[currentDim]] = newValue;\n                        incrUp = newValue < oldValue;\n                        currentDim--;\n                    } while (currentDim >= 0 && incrUp);\n                }\n                return output.join('');\n            };\n        ctx[\"for\"] = () =>\n            /**\n             * @param {string} text\n             */\n            function (text) {\n                const pos = text.indexOf(\"]\");\n                const condition = text.substring(0, pos).trim().substring(1);\n                const parts = condition.split(\";\");\n                const loopvar = defineVar(parts[0], ctx);\n                let output = \"\";\n                let maxIter = 0; // Prevent infinite loop imposing a limit of 1000\n                while (evalInContext(ctx, parts[1]) && maxIter < 1000) {\n                    // @ts-ignore\n                    output += this.mustache.render(text.substring(pos + 1), ctx);\n                    if (parts.length === 3 && parts[2].trim()) {\n                        defineVar(loopvar + \"=\" + parts[2], ctx);\n                    } else {\n                        ctx[loopvar] = ctx[loopvar] + 1;\n                    }\n                    maxIter++;\n                }\n                return output;\n            };\n    }\n}"],"names":["defineVar","text","ctx2","pos","indexOf","varname","substring","trim","varvalue","constructor","mustache","ejsLoader","renderMustache","template","context","translations","ctx","Object","keys","forEach","key","applyMustacheHelpers","this","render","I18n","lang","wordKey","dict","ex","console","error","engine","includes","rendererEJS","tmpl","Promise","resolve","condition","components","split","dim","length","maxValues","Array","loopVars","total","cc","charCodeAt","def","i","parts","unshift","String","fromCharCode","cname","dm","output","_ei","push","incrUp","currentDim","oldValue","newValue","join","loopvar","maxIter"],"mappings":";;;;;;;;MAgCMA,UAAY,SAAUC,KAAMC,YACxBC,IAAMF,KAAKG,QAAQ,KACnBC,QAAUJ,KAAKK,UAAU,EAAGH,KAAKI,OACjCC,UAAW,uBAAcN,KAAMD,KAAKK,UAAUH,IAAM,GAAGI,eAC7DL,KAAKG,SAAWG,SACTH,uCAQPI,sBAAYC,SAAEA,SAAFC,UAAYA,qBACfD,SAAWA,cACXC,UAAYA,UAQrBC,eAAeC,SAAUC,QAASC,oBACxBC,IAAM,IAAKF,gBACjBG,OAAOC,KAAKF,KAAKG,SAAQC,MACJ,SAAbJ,IAAII,OACJJ,IAAII,MAAO,0BAGdC,qBAAqBL,IAAKD,cAAgB,IAExCO,KAAKZ,SAASa,OAAOV,SAAUG,uBASxBH,SAAUC,QAASC,oBAE3BC,IAAM,IAAKF,QAASU,KAAM,IAChCP,OAAOC,KAAKF,KAAKG,SAAQC,MACJ,SAAbJ,IAAII,OACJJ,IAAII,MAAO,2BAGbK,KAAOT,IAAG,SACX,IAAIU,WAAWX,aAAc,OACxBY,KAAOZ,aAAaW,SAC1BV,IAAG,KAASU,SAAWC,KAAKF,OAASE,KAAI,IAAUA,KAAI,IAAUD,yBAGvCJ,KAAKX,aACZY,OAAOV,SAAUG,KACtC,MAAOY,WACLC,QAAQC,MAAMF,IACP,IAWfL,OAAOV,SAAUC,QAASC,aAAcgB,WAC/BA,SACDA,OAASlB,SAASmB,SAAS,MAAQ,MAAQ,YAEhC,QAAXD,cACOT,KAAKW,YAAYpB,SAAUC,QAASC,oBAGzCmB,KAAOZ,KAAKV,eAAeC,SAAUC,QAASC,qBAC7CoB,QAAQC,QAAQF,MAQ3Bb,qBAAqBL,IAAKD,cACtBC,IAAG,GAAS,IAKR,SAAUf,KAAMsB,cACNpB,IAAMF,KAAKG,QAAQ,KACnBiC,UAAYpC,KAAKK,UAAU,EAAGH,KAAKI,OAAOD,UAAU,UAC7C,uBAAcU,IAAKqB,WAGrBd,OAAOtB,KAAKK,UAAUH,IAAM,GAAGI,QAEnC,IAEfS,IAAG,IAAU,IAIT,SAAUf,MACND,UAAUC,KAAMe,MAExBA,IAAG,KAAW,IAIV,SAAUf,aACC,uBAAce,IAAKf,MAAQ,IAE1Ce,IAAG,KAAW,IAKV,SAAUf,KAAMsB,cAENH,IAAMG,OAAOtB,MAAMM,OACnBoB,KAAOZ,aAAaK,MAAQ,UAC3BO,KAAKX,IAAG,OAAaW,KAAI,IAAUA,KAAI,IAAUP,KAEhEJ,IAAG,KAAW,IAIV,SAAUf,YACAE,IAAMF,KAAKG,QAAQ,KAEnBkC,WADOrC,KAAKK,UAAU,EAAGH,KAAKI,OAAOD,UAAU,GAC7BiC,MAAM,KACxBC,IAAMF,WAAWG,OACjBC,UAAY,IAAIC,MAAMH,KACtBI,SAAW,IAAID,MAAMH,SACvBK,MAAQ,QACNC,GAAK,IAAIC,WAAW,GAC1BT,WAAWnB,SAAQ,CAAC6B,IAAKC,WACfC,MAAQF,IAAIT,MAAM,KACH,IAAjBW,MAAMT,QACNS,MAAMC,QAAQC,OAAOC,aAAaP,GAAKG,UAErCK,MAAQJ,MAAM,GAAG3C,OACvBqC,SAASK,GAAKK,YACRC,IAAK,uBAAcvC,IAAKkC,MAAM,IACpCL,OAAgBU,GAChBb,UAAUO,GAAKM,GACfvC,IAAIsC,OAAS,SAEbE,OAAS,OACR,IAAIC,IAAM,EAAGA,IAAMZ,MAAOY,MAAO,CAElCD,OAAOE,KAAKpC,KAAKZ,SAASa,OAAOtB,KAAKK,UAAUH,IAAM,GAAIa,UAEtD2C,OADAC,WAAapB,IAAM,IAEpB,OACOqB,SAAW7C,IAAI4B,SAASgB,aAAe,EACvCE,UAAYD,SAAW,GAAKnB,UAAUkB,YAAc,EAC1D5C,IAAI4B,SAASgB,aAAeE,SAC5BH,OAASG,SAAWD,SACpBD,mBACKA,YAAc,GAAKD,eAEzBH,OAAOO,KAAK,KAE3B/C,IAAG,IAAU,IAIT,SAAUf,YACAE,IAAMF,KAAKG,QAAQ,KAEnB8C,MADYjD,KAAKK,UAAU,EAAGH,KAAKI,OAAOD,UAAU,GAClCiC,MAAM,KACxByB,QAAUhE,UAAUkD,MAAM,GAAIlC,SAChCwC,OAAS,GACTS,QAAU,QACP,uBAAcjD,IAAKkC,MAAM,KAAOe,QAAU,KAE7CT,QAAUlC,KAAKZ,SAASa,OAAOtB,KAAKK,UAAUH,IAAM,GAAIa,KACnC,IAAjBkC,MAAMT,QAAgBS,MAAM,GAAG3C,OAC/BP,UAAUgE,QAAU,IAAMd,MAAM,GAAIlC,KAEpCA,IAAIgD,SAAWhD,IAAIgD,SAAW,EAElCC,iBAEGT"}