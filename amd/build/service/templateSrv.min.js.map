{"version":3,"file":"templateSrv.min.js","sources":["../../src/service/templateSrv.js"],"sourcesContent":["/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport mustache from 'core/mustache';\nimport {evalInContext, genID} from '../util';\n\n\n/**\n * @param {string} text\n * @param {Object.<string, any>} ctx2\n * @returns {string}\n */\nconst defineVar = function (text, ctx2) {\n    const pos = text.indexOf(\"=\");\n    const varname = text.substring(0, pos).trim();\n    const varvalue = evalInContext(ctx2, text.substring(pos + 1).trim());\n    ctx2[varname] = varvalue;\n    return varname;\n};\n\nexport class TemplateSrv {\n    /**\n     * @param {*} mustache\n     * @param {() => Promise<EJS>} ejsLoader\n     */\n    constructor(mustache, ejsLoader) {\n        this.mustache = mustache;\n        /** @type {() => Promise<EJS>} */\n        this.ejsLoader = ejsLoader;\n    }\n    /**\n     * @param {string} template\n     * @param {Object.<string, any>} context\n     * @param {Object.<string, Object.<string, string>>=} translations\n     * @returns {string} The interpolated template given a context and translations map\n     */\n    renderMustache(template, context, translations) {\n        const ctx = {...context};\n        Object.keys(ctx).forEach(key => {\n            if (ctx[key] === \"$RND\") {\n                ctx[key] = genID();\n            }\n        });\n        this.applyMustacheHelpers(ctx, translations ?? {});\n        // @ts-ignore\n        return this.mustache.render(template, ctx);\n    }\n\n    /**\n     * @param {string} template\n     * @param {Object.<string, any>} context\n     * @param {Object.<string, Object.<string, any>>} translations\n     * @returns {Promise<string>} The interpolated template given a context and translations map\n     */\n    async renderEJS(template, context, translations) {\n        /** @type {Object.<string, any>} */\n        const ctx = {...context, I18n: {}};\n        Object.keys(ctx).forEach(key => {\n            if (ctx[key] === \"$RND\") {\n                ctx[key] = genID();\n            }\n        });\n        const lang = ctx.LANG;\n        for (let wordKey in translations) {\n            const dict = translations[wordKey];\n            ctx.I18n[wordKey] = dict[lang] || dict.en || dict.es || wordKey;\n        }\n        try {\n            const ejsResolved = await this.ejsLoader();\n            return ejsResolved.render(template, ctx);\n        } catch (ex) {\n            console.error(ex);\n            return \"\";\n        }\n    }\n\n    /**\n     * @param {string} template\n     * @param {Object.<string, any>} context\n     * @param {Object.<string, Object.<string, any>>} translations\n     * @param {string=} engine - (ejs | mustache) optional\n     * @returns {Promise<string>} - The interpolated template given a context and translations map\n     */\n    render(template, context, translations, engine) {\n        if (!engine) {\n            engine = template.includes(\"<%\") ? \"ejs\" : \"mustache\";\n        }\n        if (engine === \"ejs\") {\n            return this.renderEJS(template, context, translations);\n        }\n        // Default to Mustache\n        const tmpl = this.renderMustache(template, context, translations);\n        return Promise.resolve(tmpl);\n    }\n\n    /**\n     * Extends Mustache templates with some helpers\n     * @param {Object.<string, any>} ctx\n     * @param {Record<string, Record<string, string>>} translations\n     */\n    applyMustacheHelpers(ctx, translations) {\n        const self = this;\n        ctx.if = () =>\n            /**\n             * @param {string} text\n             * @param {Mustache.render} render\n             */\n            function (text, render) {\n                const pos = text.indexOf(\"]\");\n                const condition = text.substring(0, pos).trim().substring(1);\n                const show = evalInContext(ctx, condition);\n                if (show) {\n                    // @ts-ignore\n                    return render(text.substring(pos + 1).trim());\n                }\n                return \"\";\n            };\n        ctx.var = () =>\n            /**\n             * @param {string} text\n             */\n            function (text) {\n                defineVar(text, ctx);\n            };\n        ctx.eval = () =>\n            /**\n             * @param {string} text\n             */\n            function (text) {\n                return evalInContext(ctx, text) + \"\";\n            };\n        ctx.I18n = () =>\n            /**\n             * @param {string} text\n             * @param {Mustache.render} render\n             */\n            function (text, render) {\n                // @ts-ignore\n                const key = render(text).trim();\n                const dict = translations[key] || {};\n                return dict[ctx.LANG] || dict.en || dict.ca || key;\n            };\n        ctx.each = () =>\n            /**\n             * @param {string} text\n             */\n            function (text) {\n                const pos = text.indexOf(\"]\");\n                const cond = text.substring(0, pos).trim().substring(1);\n                const components = cond.split(\",\");\n                const dim = components.length;\n                const maxValues = new Array(dim);\n                const loopVars = new Array(dim);\n                let total = 1;\n                const cc = 'i'.charCodeAt(0);\n                components.forEach((def, i) => {\n                    const parts = def.split(\"=\");\n                    if (parts.length === 1) {\n                        parts.unshift(String.fromCharCode(cc + i));\n                    }\n                    const cname = parts[0].trim();\n                    loopVars[i] = cname;\n                    const dm = evalInContext(ctx, parts[1]);\n                    total = total * dm;\n                    maxValues[i] = dm;\n                    ctx[cname] = 1;\n                });\n                let output = [];\n                for (let _ei = 0; _ei < total; _ei++) {\n                    // @ts-ignore\n                    output.push(self.mustache.render(text.substring(pos + 1), ctx));\n                    let currentDim = dim - 1;\n                    let incrUp;\n                    do {\n                        const oldValue = ctx[loopVars[currentDim]] - 1;\n                        const newValue = (oldValue + 1) % maxValues[currentDim] + 1;\n                        ctx[loopVars[currentDim]] = newValue;\n                        incrUp = newValue < oldValue;\n                        currentDim--;\n                    } while (currentDim >= 0 && incrUp);\n                }\n                return output.join('');\n            };\n        ctx.for = () =>\n            /**\n             * @param {string} text\n             */\n            function (text) {\n                const pos = text.indexOf(\"]\");\n                const condition = text.substring(0, pos).trim().substring(1);\n                const parts = condition.split(\";\");\n                const loopvar = defineVar(parts[0], ctx);\n                let output = \"\";\n                let maxIter = 0; // Prevent infinite loop imposing a limit of 1000\n                while (evalInContext(ctx, parts[1]) && maxIter < 1000) {\n                    // @ts-ignore\n                    output += self.mustache.render(text.substring(pos + 1), ctx);\n                    if (parts.length === 3 && parts[2].trim()) {\n                        defineVar(loopvar + \"=\" + parts[2], ctx);\n                    } else {\n                        ctx[loopvar] = ctx[loopvar] + 1;\n                    }\n                    maxIter++;\n                }\n                return output;\n            };\n    }\n}\n\n/**\n * Load on demand the template engine EJS\n * @typedef {Object} EJS\n * @property {(template: string, ctx: Object.<string,any>) => string} render\n */\n/** @type {EJS | undefined} */\nlet _ejs;\nconst ejsLoader = () => {\n    if (_ejs) {\n        return Promise.resolve(_ejs);\n    }\n    return new Promise((resolve, reject) => {\n        // @ts-ignore\n        window.require(['tiny_widgethub/libs/ejs-lazy'], (ejsModule) => {\n            _ejs = ejsModule;\n            if (_ejs) {\n                resolve(_ejs);\n            } else {\n                reject();\n            }\n        }, reject);\n    });\n};\n\n/** @type {TemplateSrv | undefined} */\nlet instanceSrv;\n/**\n * @returns {TemplateSrv}\n */\nexport function getTemplateSrv() {\n    if (!instanceSrv) {\n        instanceSrv = new TemplateSrv(mustache, ejsLoader);\n    }\n    return instanceSrv;\n}"],"names":["instanceSrv","TemplateSrv","mustache","ejsLoader","defineVar","text","ctx2","pos","indexOf","varname","substring","trim","varvalue","constructor","renderMustache","template","context","translations","ctx","Object","keys","forEach","key","applyMustacheHelpers","this","render","I18n","lang","LANG","wordKey","dict","en","es","ex","console","error","engine","includes","renderEJS","tmpl","Promise","resolve","self","if","condition","var","eval","ca","each","components","split","dim","length","maxValues","Array","loopVars","total","cc","charCodeAt","def","i","parts","unshift","String","fromCharCode","cname","dm","output","_ei","push","incrUp","currentDim","oldValue","newValue","join","for","loopvar","maxIter","_ejs","reject","window","require","ejsModule"],"mappings":"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"}