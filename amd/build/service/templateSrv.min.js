define("tiny_widgethub/service/templateSrv",["exports","../util"],(function(_exports,_util){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.TemplateSrv=void 0;
/**
   * Tiny WidgetHub plugin.
   *
   * @module      tiny_widgethub/plugin
   * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
const defineVar=function(text,ctx2){const pos=text.indexOf("="),varname=text.substring(0,pos).trim(),varvalue=(0,_util.evalInContext)(ctx2,text.substring(pos+1).trim());return ctx2[varname]=varvalue,varname};_exports.TemplateSrv=class{constructor(mustache,ejsLoader){this.mustache=mustache,this.ejsLoader=ejsLoader}renderMustache(template,context,translations){const ctx={...context};return Object.keys(ctx).forEach((key=>{"$RND"===ctx[key]&&(ctx[key]=(0,_util.genID)())})),this.applyMustacheHelpers(ctx,translations??{}),this.mustache.render(template,ctx)}async rendererEJS(template,context,translations){const ctx={...context,I18n:{}};Object.keys(ctx).forEach((key=>{"$RND"===ctx[key]&&(ctx[key]=(0,_util.genID)())}));const lang=ctx.LANG;for(let wordKey in translations){const dict=translations[wordKey];ctx.I18n[wordKey]=dict[lang]||dict.en||dict.es||wordKey}try{return(await this.ejsLoader()).render(template,ctx)}catch(ex){return console.error(ex),""}}render(template,context,translations,engine){if(engine||(engine=template.includes("<%")?"ejs":"mustache"),"ejs"===engine)return this.rendererEJS(template,context,translations);const tmpl=this.renderMustache(template,context,translations);return Promise.resolve(tmpl)}applyMustacheHelpers(ctx,translations){ctx.if=()=>function(text,render){const pos=text.indexOf("]"),condition=text.substring(0,pos).trim().substring(1);return(0,_util.evalInContext)(ctx,condition)?render(text.substring(pos+1).trim()):""},ctx.var=()=>function(text){defineVar(text,ctx)},ctx.eval=()=>function(text){return(0,_util.evalInContext)(ctx,text)+""},ctx.I18n=()=>function(text,render){const key=render(text).trim(),dict=translations[key]||{};return dict[ctx.LANG]||dict.en||dict.ca||key},ctx.each=()=>function(text){const pos=text.indexOf("]"),components=text.substring(0,pos).trim().substring(1).split(","),dim=components.length,maxValues=new Array(dim),loopVars=new Array(dim);let total=1;const cc="i".charCodeAt(0);components.forEach(((def,i)=>{const parts=def.split("=");1===parts.length&&parts.unshift(String.fromCharCode(cc+i));const cname=parts[0].trim();loopVars[i]=cname;const dm=(0,_util.evalInContext)(ctx,parts[1]);total*=dm,maxValues[i]=dm,ctx[cname]=1}));let output=[];for(let _ei=0;_ei<total;_ei++){output.push(this.mustache.render(text.substring(pos+1),ctx));let incrUp,currentDim=dim-1;do{const oldValue=ctx[loopVars[currentDim]]-1,newValue=(oldValue+1)%maxValues[currentDim]+1;ctx[loopVars[currentDim]]=newValue,incrUp=newValue<oldValue,currentDim--}while(currentDim>=0&&incrUp)}return output.join("")},ctx.for=()=>function(text){const pos=text.indexOf("]"),parts=text.substring(0,pos).trim().substring(1).split(";"),loopvar=defineVar(parts[0],ctx);let output="",maxIter=0;for(;(0,_util.evalInContext)(ctx,parts[1])&&maxIter<1e3;)output+=this.mustache.render(text.substring(pos+1),ctx),3===parts.length&&parts[2].trim()?defineVar(loopvar+"="+parts[2],ctx):ctx[loopvar]=ctx[loopvar]+1,maxIter++;return output}}}}));

//# sourceMappingURL=templateSrv.min.js.map