{"version":3,"file":"modal_service.min.js","sources":["../../src/service/modal_service.js"],"sourcesContent":["/* eslint-disable max-len */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Modal from 'core/modal';\nimport ModalRegistry from 'core/modal_registry';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\n\n/**\n * Tracks event listeners for cleanup. Can auto-attach or just register.\n */\nclass ModalTracker extends Modal {\n    /**\n     * @param {HTMLElement} root\n     */\n    constructor(root) {\n        super(root);\n        /** @type {[Element, string, EventListener][]} */\n        this._twhListeners = [];\n    }\n\n    destroy() {\n        this._twhRemoveListeners();\n        super.destroy();\n    }\n\n  /**\n   * Add a listener and optionally attach it immediately.\n   * @param {Element} el The DOM element\n   * @param {string} event The event type\n   * @param {EventListener} handler The listener function\n   */\n  twhRegisterListener(el, event, handler) {\n    // Avoid duplicates\n    if (!this._twhListeners.some(([e, ev, h]) => e === el && ev === event && h === handler)) {\n      this._twhListeners.push([el, event, handler]);\n      el.addEventListener(event, handler);\n    }\n  }\n\n  /**\n   * Add a listener by selector inside a container.\n   * @param {Element} container The parent container\n   * @param {string} selector CSS selector for target element\n   * @param {string} event Event type\n   * @param {EventListener} handler Listener function\n   */\n  twhRegisterListenerBySelector(container, selector, event, handler) {\n    const el = container.querySelector(selector);\n    if (el) {\n        this.twhRegisterListener(el, event, handler);\n    }\n  }\n\n  /** Remove all tracked listeners */\n  _twhRemoveListeners() {\n    this._twhListeners.forEach(([el, event, handler]) => el.removeEventListener(event, handler));\n    this._twhListeners = [];\n  }\n}\n\n\nclass IBPickerModal extends ModalTracker {\n    static TYPE = 'tiny_widgethub/picker_modal';\n    static TEMPLATE = 'tiny_widgethub/picker_modal';\n\n    registerEventListeners() {\n        // Call the parent registration.\n        super.registerEventListeners();\n    }\n}\n\nModalRegistry.register(IBPickerModal.TYPE, IBPickerModal, IBPickerModal.TEMPLATE);\n\n\n\nclass IBParamsModal extends ModalTracker {\n    static TYPE = 'tiny_widgethub/params_modal';\n    static TEMPLATE = 'tiny_widgethub/params_modal';\n\n    registerEventListeners() {\n        // Call the parent registration.\n        super.registerEventListeners();\n    }\n}\n\nModalRegistry.register(IBParamsModal.TYPE, IBParamsModal, IBParamsModal.TEMPLATE);\n\n\nclass IBContextModal extends ModalTracker {\n    static TYPE = 'tiny_widgethub/context_modal';\n    static TEMPLATE = 'tiny_widgethub/context_modal';\n\n    registerEventListeners() {\n        // Call the parent registration.\n        super.registerEventListeners();\n    }\n}\n\nModalRegistry.register(IBContextModal.TYPE, IBContextModal, IBContextModal.TEMPLATE);\n\n/**\n * @typedef {(el: Element, event: string, handler: EventListener) => void} ListenerTracker\n * @typedef {JQuery<HTMLElement> & {header: JQuery<HTMLElement>, body: JQuery<HTMLElement>, footer: JQuery<HTMLElement>, destroy: () => void, show: () => void, getRoot: () => {on: () => void}, twhRegisterListener: ListenerTracker, twhRegisterListenerBySelector: (container: string, selector: string, event: string, handler: EventListener) => void }} ModalDialogue\n */\n\n/**\n * @typedef {{ destroyOnHidden: boolean | undefined}} ModalOpts\n */\n\nexport class ModalSrv {\n    /**\n     * @param {'picker' | 'params' | 'context'} name\n     * @param {object} templateContext\n     * @param {()=>void} [onHidden]\n     * @returns {Promise<ModalDialogue>}\n     */\n    async create(name, templateContext, onHidden) {\n        let cls;\n        switch (name) {\n            case ('picker'): cls = IBPickerModal; break;\n            case ('params'): cls = IBParamsModal; break;\n            case ('context'): cls = IBContextModal; break;\n        }\n        // On versions of Moodle beyond 4.3, call create directly on Modal class\n        const options = {\n            type: cls.TYPE,\n            templateContext,\n            large: true,\n        };\n        let modal;\n        if (cls.create) {\n            modal = await cls.create(options);\n        } else {\n            // @ts-ignore\n            modal = await ModalFactory.create(options);\n        }\n        // Override styles imposed by body.tox-fullscreen on modals\n        modal.modal.css({\n            'max-width': '800px',\n            'height': 'initial'\n        });\n        modal.header.css({\n            'height': '61.46px',\n            'padding': '1rem 1rem'\n        });\n        if (onHidden) {\n            // @ts-ignore\n            modal.getRoot().on(ModalEvents.hidden, () => {\n                onHidden();\n            });\n        }\n        return modal;\n    }\n}\n\n/** @type {ModalSrv | undefined} */\nlet instanceSrv;\n/**\n * @returns {ModalSrv}\n */\nexport function getModalSrv() {\n    if (!instanceSrv) {\n        instanceSrv = new ModalSrv();\n    }\n    return instanceSrv;\n}\n"],"names":["instanceSrv","ModalSrv","ModalTracker","Modal","constructor","root","_twhListeners","destroy","_twhRemoveListeners","twhRegisterListener","el","event","handler","this","some","_ref","e","ev","h","push","addEventListener","twhRegisterListenerBySelector","container","selector","querySelector","forEach","_ref2","removeEventListener","IBPickerModal","registerEventListeners","register","TYPE","TEMPLATE","IBParamsModal","IBContextModal","name","templateContext","onHidden","cls","options","type","large","modal","create","ModalFactory","css","header","getRoot","on","ModalEvents","hidden"],"mappings":";;;;;;;sHAuLSA,cACDA,YAAc,IAAIC,iBAEfD,2NA1JLE,qBAAqBC,eAIvBC,YAAYC,YACFA,WAEDC,cAAgB,GAGzBC,eACSC,4BACCD,UASZE,oBAAoBC,GAAIC,MAAOC,SAExBC,KAAKP,cAAcQ,MAAKC,WAAEC,EAAGC,GAAIC,eAAOF,IAAMN,IAAMO,KAAON,OAASO,IAAMN,kBACxEN,cAAca,KAAK,CAACT,GAAIC,MAAOC,UACpCF,GAAGU,iBAAiBT,MAAOC,UAW/BS,8BAA8BC,UAAWC,SAAUZ,MAAOC,eAClDF,GAAKY,UAAUE,cAAcD,UAC/Bb,SACKD,oBAAoBC,GAAIC,MAAOC,SAK1CJ,2BACOF,cAAcmB,SAAQC,YAAEhB,GAAIC,MAAOC,sBAAaF,GAAGiB,oBAAoBhB,MAAOC,iBAC9EN,cAAgB,UAKnBsB,sBAAsB1B,yBACV,8CACI,8BAElB2B,+BAEUA,kDAIAC,SAASF,cAAcG,KAAMH,cAAeA,cAAcI,gBAIlEC,sBAAsB/B,yBACV,8CACI,8BAElB2B,+BAEUA,kDAIAC,SAASG,cAAcF,KAAME,cAAeA,cAAcD,gBAGlEE,uBAAuBhC,yBACX,+CACI,+BAElB2B,+BAEUA,kDAIAC,SAASI,eAAeH,KAAMG,eAAgBA,eAAeF,gBAW9D/B,sBAOIkC,KAAMC,gBAAiBC,cAC5BC,WACIH,UACE,SAAWG,IAAMV,wBACjB,SAAWU,IAAML,wBACjB,UAAYK,IAAMJ,qBAGtBK,QAAU,CACZC,KAAMF,IAAIP,KACVK,gBAAAA,gBACAK,OAAO,OAEPC,aAEAA,MADAJ,IAAIK,aACUL,IAAIK,OAAOJ,eAGXK,uBAAaD,OAAOJ,SAGtCG,MAAMA,MAAMG,IAAI,aACC,eACH,YAEdH,MAAMI,OAAOD,IAAI,QACH,kBACC,cAEXR,UAEAK,MAAMK,UAAUC,GAAGC,sBAAYC,QAAQ,KACnCb,cAGDK,WAKX1C"}