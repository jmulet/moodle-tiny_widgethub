{"version":3,"file":"userStorageSrv.min.js","sources":["../../src/service/userStorageSrv.js"],"sourcesContent":["/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { getEditorOptions } from '../options';\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * @typedef {{localStorage: Storage, sessionStorage: Storage}} IStorage;\n */\n\nexport class UserStorageSrv {\n   /**\n    * @param {import('../options').EditorOptions} editorOptions\n    * @param {IStorage} iStorage\n    */\n    constructor(editorOptions, iStorage) {\n        /** @type {Storage} */\n        this.localStorage = iStorage.localStorage;\n        /** @type {Storage} */\n        this.sessionStorage = iStorage.sessionStorage;\n        /** @type {number} */\n        this.userId = editorOptions.userId;\n        /** @type {number} */\n        this.courseId = editorOptions.courseId;\n        /** @type {string} */\n        this.STORE_KEY = \"iedib-widgets_\" + editorOptions.userId;\n        /**\n         * @type {Record<string, any>}\n         */\n        this._localStore = { values: {} };\n        /**\n         * @type {Record<string, any>}\n         */\n        this._sessionStore = { searchtext: '' };\n        this.loadStore();\n    }\n\n    loadStore() {\n        if (typeof this.localStorage !== 'undefined') {\n            const json = this.localStorage.getItem(this.STORE_KEY);\n            if (json) {\n                try {\n                    this._localStore = JSON.parse(json);\n                } catch (ex) {\n                    console.error(ex);\n                }\n            }\n        }\n        // Added storage for this _course\n        // @ts-ignore\n        if (!this._localStore[\"_\" + this._courseId]) {\n            // @ts-ignore\n            this._localStore[\"_\" + this._courseId] = {};\n        }\n        if (typeof this.sessionStorage !== 'undefined') {\n            const json2 = this.sessionStorage.getItem(this.STORE_KEY);\n            if (json2) {\n                try {\n                    this._sessionStore = JSON.parse(json2);\n                } catch (ex) {\n                    console.error(ex);\n                }\n            }\n        }\n    }\n\n    /**\n     * @template T\n     * @param {string} key\n     * @param {T} defaultValue\n     * @returns {T}\n     */\n    getFromLocal(key, defaultValue) {\n        if (!this._localStore) {\n            return defaultValue;\n        }\n        // @ts-ignore\n        const MLSC = this._localStore[\"_\" + this._courseId]; // Almost everything goes here\n        const MLS = this._localStore; // Only configuration params\n        if (MLSC) {\n            // @ts-ignore\n            return MLSC[key] || MLS[key] || defaultValue;\n        } else if (MLS) {\n            // @ts-ignore\n            return MLS[key] || defaultValue;\n        }\n        return defaultValue;\n    }\n\n    /**\n     * @param {string} key\n     * @param {*} defaultValue\n     * @returns {*}\n     */\n    getFromSession(key, defaultValue) {\n        return ((this._sessionStore[key] ?? null) !== null ? this._sessionStore[key] : defaultValue);\n    }\n\n    /**\n     * @param {'local' | 'session' | undefined} [type]\n     */\n    saveStore(type) {\n        if (type === 'local') {\n            this.localStorage.setItem(this.STORE_KEY, JSON.stringify(this._localStore));\n        } else if (type === 'session') {\n            this.sessionStorage.setItem(this.STORE_KEY, JSON.stringify(this._sessionStore));\n        } else if (type === null || type === undefined) {\n            this.localStorage.setItem(this.STORE_KEY, JSON.stringify(this._localStore));\n            this.sessionStorage.setItem(this.STORE_KEY, JSON.stringify(this._sessionStore));\n        }\n    }\n    /**\n     * @template T\n     * @param {string} key\n     * @param {T} value\n     * @param {boolean=} persist\n     * @returns {void}\n     */\n    setToLocal(key, value, persist) {\n        // @ts-ignore\n        const MLSC = this._localStore[\"_\" + this._courseId]; // Almost everything goes here\n        const MLS = this._localStore; // Only configuration params\n\n        // @ts-ignore\n        if (typeof (theValueMap) === 'object') {\n            if (MLSC && key === 'saveall_data' || key === 'values') {\n                MLSC[key] = MLSC[key] || {};\n            } else {\n                // @ts-ignore\n                MLS[key] = MLS[key] || {};\n            }\n            // @ts-ignore\n            const keys = Object.keys(value);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const theKey = keys[i];\n                // @ts-ignore\n                const val = value[theKey];\n                if (MLSC && key === 'saveall_data' || key === 'values') {\n                    MLSC[key][theKey] = val;\n                } else {\n                    // @ts-ignore\n                    MLS[key][theKey] = val;\n                }\n            }\n        } else {\n            // @ts-ignore\n            MLS[key] = value;\n        }\n        if (persist) {\n            this.saveStore(\"local\");\n        }\n    }\n    /**\n     * @template T\n     * @param {string} key\n     * @param {T} value\n     * @param {boolean=} persist\n     * @returns {void}\n     */\n    setToSession(key, value, persist) {\n        if (typeof (value) === 'object') {\n            // @ts-ignore\n            this._sessionStore[key] = this._sessionStore[key] || {};\n            // @ts-ignore\n            const keys = Object.keys(value);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                const theKey = keys[i];\n                // @ts-ignore\n                const val = value[theKey];\n                // @ts-ignore\n                this._sessionStore[key][theKey] = val;\n            }\n        } else {\n            // @ts-ignore\n            this._sessionStore[key] = value;\n        }\n        if (persist) {\n            this.saveStore(\"session\");\n        }\n    }\n}\n\n\nconst userStorageInstances = new Map();\n/**\n * @param {import('../plugin').TinyMCE} editor\n * @returns {UserStorageSrv}\n */\nexport function getUserStorage(editor) {\n    let instance = userStorageInstances.get(editor);\n    if (!instance) {\n        const iStorage = {localStorage, sessionStorage};\n        instance = new UserStorageSrv(getEditorOptions(editor), iStorage);\n        userStorageInstances.set(editor, instance);\n    }\n    return instance;\n}\n"],"names":["editor","instance","userStorageInstances","get","iStorage","localStorage","sessionStorage","UserStorageSrv","set","constructor","editorOptions","userId","courseId","STORE_KEY","_localStore","values","_sessionStore","searchtext","loadStore","this","json","getItem","JSON","parse","ex","console","error","_courseId","json2","getFromLocal","key","defaultValue","MLSC","MLS","getFromSession","saveStore","type","setItem","stringify","setToLocal","value","persist","theValueMap","keys","Object","i","len","length","theKey","val","setToSession","Map"],"mappings":"6NAgN+BA,YACvBC,SAAWC,qBAAqBC,IAAIH,YACnCC,SAAU,OACLG,SAAW,CAACC,aAAAA,aAAcC,eAAAA,gBAChCL,SAAW,IAAIM,gBAAe,6BAAiBP,QAASI,UACxDF,qBAAqBM,IAAIR,OAAQC,iBAE9BA;;;;;;;;MAzLEM,eAKTE,YAAYC,cAAeN,eAElBC,aAAeD,SAASC,kBAExBC,eAAiBF,SAASE,oBAE1BK,OAASD,cAAcC,YAEvBC,SAAWF,cAAcE,cAEzBC,UAAY,iBAAmBH,cAAcC,YAI7CG,YAAc,CAAEC,OAAQ,SAIxBC,cAAgB,CAAEC,WAAY,SAC9BC,YAGTA,oBACqC,IAAtBC,KAAKd,aAA8B,OACpCe,KAAOD,KAAKd,aAAagB,QAAQF,KAAKN,cACxCO,cAESN,YAAcQ,KAAKC,MAAMH,MAChC,MAAOI,IACLC,QAAQC,MAAMF,QAMrBL,KAAKL,YAAY,IAAMK,KAAKQ,kBAExBb,YAAY,IAAMK,KAAKQ,WAAa,SAEV,IAAxBR,KAAKb,eAAgC,OACtCsB,MAAQT,KAAKb,eAAee,QAAQF,KAAKN,cAC3Ce,eAESZ,cAAgBM,KAAKC,MAAMK,OAClC,MAAOJ,IACLC,QAAQC,MAAMF,MAY9BK,aAAaC,IAAKC,kBACTZ,KAAKL,mBACCiB,mBAGLC,KAAOb,KAAKL,YAAY,IAAMK,KAAKQ,WACnCM,IAAMd,KAAKL,mBACbkB,KAEOA,KAAKF,MAAQG,IAAIH,MAAQC,aACzBE,KAEAA,IAAIH,MAERC,aAQXG,eAAeJ,IAAKC,qBAC8B,QAArCZ,KAAKH,cAAcc,MAAQ,MAAiBX,KAAKH,cAAcc,KAAOC,aAMnFI,UAAUC,MACO,UAATA,UACK/B,aAAagC,QAAQlB,KAAKN,UAAWS,KAAKgB,UAAUnB,KAAKL,cAC9C,YAATsB,UACF9B,eAAe+B,QAAQlB,KAAKN,UAAWS,KAAKgB,UAAUnB,KAAKH,gBACzDoB,MAAAA,YACF/B,aAAagC,QAAQlB,KAAKN,UAAWS,KAAKgB,UAAUnB,KAAKL,mBACzDR,eAAe+B,QAAQlB,KAAKN,UAAWS,KAAKgB,UAAUnB,KAAKH,iBAUxEuB,WAAWT,IAAKU,MAAOC,eAEbT,KAAOb,KAAKL,YAAY,IAAMK,KAAKQ,WACnCM,IAAMd,KAAKL,eAGY,iBAAjB4B,YAA2B,CAC/BV,MAAgB,iBAARF,KAAkC,WAARA,IAClCE,KAAKF,KAAOE,KAAKF,MAAQ,GAGzBG,IAAIH,KAAOG,IAAIH,MAAQ,SAGrBa,KAAOC,OAAOD,KAAKH,WACpB,IAAIK,EAAI,EAAGC,IAAMH,KAAKI,OAAQF,EAAIC,IAAKD,IAAK,OACvCG,OAASL,KAAKE,GAEdI,IAAMT,MAAMQ,QACdhB,MAAgB,iBAARF,KAAkC,WAARA,IAClCE,KAAKF,KAAKkB,QAAUC,IAGpBhB,IAAIH,KAAKkB,QAAUC,UAK3BhB,IAAIH,KAAOU,MAEXC,cACKN,UAAU,SAUvBe,aAAapB,IAAKU,MAAOC,YACE,iBAAXD,MAAqB,MAExBxB,cAAcc,KAAOX,KAAKH,cAAcc,MAAQ,SAE/Ca,KAAOC,OAAOD,KAAKH,WACpB,IAAIK,EAAI,EAAGC,IAAMH,KAAKI,OAAQF,EAAIC,IAAKD,IAAK,OACvCG,OAASL,KAAKE,GAEdI,IAAMT,MAAMQ,aAEbhC,cAAcc,KAAKkB,QAAUC,eAIjCjC,cAAcc,KAAOU,MAE1BC,cACKN,UAAU,yDAMrBjC,qBAAuB,IAAIiD"}