define("tiny_widgethub/service/userstorage_service",["exports","../options"],(function(_exports,_options){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.UserStorageSrv=void 0,_exports.getUserStorage=function(editor){let instance=userStorageInstances.get(editor);if(!instance){const iStorage={localStorage:localStorage,sessionStorage:sessionStorage};instance=new UserStorageSrv((0,_options.getEditorOptions)(editor),iStorage),userStorageInstances.set(editor,instance)}return instance};
/**
   * Tiny WidgetHub plugin.
   *
   * @module      tiny_widgethub/plugin
   * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
class UserStorageSrv{constructor(editorOptions,iStorage){this.localStorage=iStorage.localStorage,this.sessionStorage=iStorage.sessionStorage,this.userId=editorOptions.userId,this.courseId=editorOptions.courseId,this.STORE_KEY="iedib-widgets_"+editorOptions.userId,this._localStore={values:{}},this._sessionStore={searchtext:""},this.loadStore()}loadStore(){if(void 0!==this.localStorage){const json=this.localStorage.getItem(this.STORE_KEY);if(json)try{this._localStore=JSON.parse(json)}catch(ex){console.error(ex)}}if(this._localStore["_"+this._courseId]||(this._localStore["_"+this._courseId]={}),void 0!==this.sessionStorage){const json2=this.sessionStorage.getItem(this.STORE_KEY);if(json2)try{this._sessionStore=JSON.parse(json2)}catch(ex){console.error(ex)}}}getFromLocal(key,defaultValue){if(!this._localStore)return defaultValue;const MLSC=this._localStore["_"+this._courseId],MLS=this._localStore;return MLSC?MLSC[key]||MLS[key]||defaultValue:MLS&&MLS[key]||defaultValue}getFromSession(key,defaultValue){return null!==(this._sessionStore[key]??null)?this._sessionStore[key]:defaultValue}saveStore(type){"local"===type?this.localStorage.setItem(this.STORE_KEY,JSON.stringify(this._localStore)):"session"===type?this.sessionStorage.setItem(this.STORE_KEY,JSON.stringify(this._sessionStore)):null==type&&(this.localStorage.setItem(this.STORE_KEY,JSON.stringify(this._localStore)),this.sessionStorage.setItem(this.STORE_KEY,JSON.stringify(this._sessionStore)))}setToLocal(key,value,persist){const MLSC=this._localStore["_"+this._courseId],MLS=this._localStore;if("object"==typeof value){MLSC&&"saveall_data"===key||"values"===key?MLSC[key]=MLSC[key]||{}:MLS[key]=MLS[key]||{};const keys=Object.keys(value);for(let i=0,len=keys.length;i<len;i++){const theKey=keys[i],val=value[theKey];MLSC&&"saveall_data"===key||"values"===key?MLSC[key][theKey]=val:MLS[key][theKey]=val}}else MLS[key]=value;persist&&this.saveStore("local")}setToSession(key,value,persist){if("object"==typeof value){this._sessionStore[key]=this._sessionStore[key]||{};const keys=Object.keys(value);for(let i=0,len=keys.length;i<len;i++){const theKey=keys[i],val=value[theKey];this._sessionStore[key][theKey]=val}}else this._sessionStore[key]=value;persist&&this.saveStore("session")}getRecentUsed(){let recentList=[];try{recentList=JSON.parse(this.getFromSession("recent","[]"))}catch(ex){console.error("Cannot parse recent",ex)}return recentList}}_exports.UserStorageSrv=UserStorageSrv;const userStorageInstances=new Map}));

//# sourceMappingURL=userstorage_service.min.js.map