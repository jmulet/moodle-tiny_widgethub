{"version":3,"file":"extension.min.js","sources":["../src/extension.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/** @typedef {'onInit' | 'contentSet' | 'widgetInserted' | 'widgetRemoved' | 'ctxAction'} EventName */\n/** @type {Map<string, ((editor: import('./plugin').TinyMCE, ...args: any[]) => void)[]>}> */\nconst _listeners = new Map();\n\n/** @type {((ctx: import('./contextInit').ItemMenuContext) => import('./extension/contextactions').UserDefinedItem)[]} */\nconst _menuItems = [];\n/**\n * @param {EventName} eventName\n * @param {(editor: import('./plugin').TinyMCE, ...args: any[]) => void} listener\n */\nexport function subscribe(eventName, listener) {\n    let lst = _listeners.get(eventName);\n    if (!lst) {\n        lst = [];\n        _listeners.set(eventName, lst);\n    }\n    lst.push(listener);\n}\n\n/**\n * @param {EventName} eventName\n * @returns {((editor: import('./plugin').TinyMCE, ...args: any[]) => void)[]}\n */\nexport function getListeners(eventName) {\n    return _listeners.get(eventName) ?? [];\n}\n\n/**\n * @param {(ctx: import('./contextInit').ItemMenuContext) =>import('./extension/contextactions').UserDefinedItem} menuItem\n */\nexport function registerMenuItem(menuItem) {\n    _menuItems.push(menuItem);\n}\n/**\n * @returns {((ctx: import('./contextInit').ItemMenuContext) => import('./extension/contextactions').UserDefinedItem)[]}\n */\nexport function getExtendedMenuItems() {\n    return _menuItems;\n}\n"],"names":["_menuItems","eventName","_listeners","get","menuItem","push","listener","lst","set","Map"],"mappings":"0KA4DWA,2CAdkBC,kBAClBC,WAAWC,IAAIF,YAAc,uCAMPG,UAC7BJ,WAAWK,KAAKD,uCArBMH,UAAWK,cAC7BC,IAAML,WAAWC,IAAIF,WACpBM,MACDA,IAAM,GACNL,WAAWM,IAAIP,UAAWM,MAE9BA,IAAIF,KAAKC;;;;;;;;MAdPJ,WAAa,IAAIO,IAGjBT,WAAa"}