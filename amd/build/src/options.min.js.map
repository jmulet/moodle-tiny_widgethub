{"version":3,"file":"options.min.js","sources":["../../src/src/options.js"],"sourcesContent":["/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2024 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getPluginOptionName} from 'editor_tiny/options';\nimport Common from './common';\nconst pluginName = Common.pluginName;\n\nconst showPlugin = getPluginOptionName(pluginName, 'showplugin');\nconst userId = getPluginOptionName(pluginName, 'userid');\nconst courseId = getPluginOptionName(pluginName, 'courseid');\nconst widgetList = getPluginOptionName(pluginName, 'widgetlist');\n\nconst shareStyles = getPluginOptionName(pluginName, 'sharestyles');\nconst additionalCss = getPluginOptionName(pluginName, 'additionalcss');\nconst globalConfig = getPluginOptionName(pluginName, 'cfg');\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n */\nexport const register = (editor) => {\n    const registerOption = editor.options.register;\n\n    registerOption(showPlugin, {\n        processor: 'boolean',\n        \"default\": true,\n    });\n\n    registerOption(userId, {\n        processor: 'string',\n        \"default\": \"-1\",\n    });\n\n    registerOption(courseId, {\n        processor: 'string',\n        \"default\": \"-1\",\n    });\n\n    registerOption(widgetList, {\n        processor: 'array',\n        \"default\": [],\n    });\n\n    registerOption(shareStyles, {\n        processor: 'boolean',\n        \"default\": true,\n    });\n\n    registerOption(additionalCss, {\n        processor: 'string',\n        \"default\": \"\",\n    });\n\n    registerOption(globalConfig, {\n        processor: 'object',\n        \"default\": {},\n    });\n};\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @returns {boolean} - are the plugin buttons visible?\n */\nexport const isPluginVisible = (editor) => editor.options.get(showPlugin);\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @returns {string} - additional css that must be included in a <style> tag in editor's iframe\n */\nexport const getAdditionalCss = (editor) => {\n    return editor.options.get(additionalCss);\n};\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @param {string} key\n * @param {string} defaultValue\n * @returns {string} - An object with the key/value properties\n */\nexport const getGlobalConfig = (editor, key, defaultValue) => {\n    const dict = editor.options.get(globalConfig) ?? {};\n    console.log(\"getGlobalConfig\", key, defaultValue, dict);\n    return dict[key] ?? defaultValue;\n};\n\n/**\n * Wrapper version of the snippet definitions shared among all editors in page\n * @type {Record<string, Widget> | undefined}\n * */\nlet _widgetDict;\n\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @returns {Record<string, Widget>} - The available list of widgets\n */\nexport const getWidgetDict = (editor) => {\n    if (_widgetDict) {\n        return _widgetDict;\n    }\n    /** @type {RawWidget[]} */\n    let rawWidgets = editor.options.get(widgetList) ?? [];\n    _widgetDict = {};\n    // Partials is a special widget that is used to define common parameters shared by other widgets\n    /** @type {RawWidget | undefined} */\n    let partials = rawWidgets.filter(e => e.key === 'partials')[0];\n    if (partials) {\n        rawWidgets = rawWidgets.filter(e => e.key !== 'partials');\n    }\n    // Create a wrapper for the widget to handle operations\n    const wrappedWidgets = rawWidgets\n        .map(w => new Widget(w, partials || {}));\n\n    // Remove those buttons that aren't usable for the current user\n    const id = editor.options.get(userId);\n    wrappedWidgets.filter(w => w.isFor(id)).forEach(w => {\n        if (_widgetDict) {\n            _widgetDict[w.key] = w;\n        }\n    });\n    return _widgetDict;\n};\n\nexport class EditorOptions {\n    /**\n     * @param {import('./plugin').TinyMCE} editor\n     */\n    constructor(editor) {\n        this.editor = editor;\n    }\n\n    /**\n     * @returns {number} - an integer with the id of the current user\n     */\n    get userId() {\n        return parseInt(this.editor.options.get(userId));\n    }\n\n    /**\n     * @returns {number} - an integer with the id of the current course\n     */\n    get courseId() {\n        return parseInt(this.editor.options.get(courseId));\n    }\n\n    /**\n     * @returns {Object.<string, Widget>} - a dictionary of \"usable\" widgets for the current userId\n     */\n    get widgetDict() {\n       return getWidgetDict(this.editor);\n    }\n}\n\n/**\n * @typedef {object} Shared\n * @property {string} currentScope\n */\nexport const Shared = {\n    // In which type of activity the editor is being used\n    currentScope: document.querySelector('body')?.id ?? '',\n};\n\n/**\n * Add missing properties in the param definition\n * that can be derived from existing data.\n * @param {Param} param\n */\nexport function fixMissingParamProperties(param) {\n    if (!param.type) {\n        if (param.options) {\n            param.type = 'select';\n        } else if (typeof param.value === \"boolean\") {\n            // Infer type from value\n            param.type = 'checkbox';\n        } else if (typeof param.value === \"number\") {\n            param.type = 'numeric';\n        } else if (typeof param.value === \"string\") {\n            param.type = param.options ? 'select' : 'textfield';\n        }\n    }\n    if (!param.value) {\n        switch (param.type) {\n            case ('checkbox'):\n                param.value = false; break;\n            case ('numeric'):\n                param.value = 0; break;\n            case ('select'):\n                param.value = param.options?.[0];\n                if (typeof (param.value) === 'object') {\n                    param.value = param.value.v;\n                }\n                break;\n            case ('color'):\n                param.value = '#ffffff'; break;\n            default:\n                param.value = '';\n        }\n    }\n}\n\n/**\n * @param {*} obj - The object to expand\n * @param {Record<string, *>} partials - The dictionary with partials\n * @returns {*} The modified object\n */\nexport function expandPartial(obj, partials) {\n    if ((obj ?? null) === null) {\n        return obj;\n    }\n    let partialKey;\n    if (typeof obj === 'string' && obj.startsWith('__') && obj.endsWith('__')) {\n        partialKey = obj;\n        obj = {};\n    } else if (typeof obj === 'object' && obj.partial) {\n        partialKey = obj.partial;\n        delete obj.partial;\n    }\n    if (partialKey) {\n        partialKey = partialKey.replace(/__/g, '');\n        if (!partials[partialKey]) {\n            console.error(`Cannot find partial for ${partialKey}`);\n        } else {\n            // Override with passed properties.\n            obj = {...partials[partialKey], ...obj};\n        }\n    }\n    return obj;\n}\n\n/**\n * Partials are variables that start with @ which\n * can be expanded in different parts of the widget\n * definition.\n * @param {RawWidget} widget\n * @param {Record<string, *>} partials\n * @returns {void} The same widget with partials expanded\n */\nexport function applyPartials(widget, partials) {\n    // Expand partials in template.\n    const regex = /__([\\w\\d]+)__/g;\n    if (widget.template) {\n        widget.template = widget.template.replace(regex, (s0, s1) => {\n            return partials[s1] ?? s0;\n        });\n    }\n\n    // Expand partials in parameters.\n    const parameters = widget.parameters;\n    if (parameters) {\n        parameters.forEach((/** @type {*} */ param, i) => {\n            param = expandPartial(param, partials);\n            parameters[i] = param;\n            // Treat inner partials\n            let prop = expandPartial(param.bind, partials);\n            if (prop) {\n                param.bind = prop;\n            }\n            prop = expandPartial(param.transform, partials);\n            if (prop) {\n                param.transform = prop;\n            }\n            // Do some fixes on parameters.\n            fixMissingParamProperties(param);\n        });\n    }\n}\n\n/**\n * @typedef {Object} ParamOption\n * @property {string} l\n * @property {string} v\n * @property {{to: string, content: string}} [a]\n */\n/**\n * @typedef {Object} Param\n * @property {string=} partial\n * @property {string} name\n * @property {string} title\n * @property {'textfield' | 'numeric' | 'checkbox' | 'select' | 'textarea' | 'image' | 'color'} [type]\n * @property {(ParamOption | string)[]} [options]\n * @property {any} value\n * @property {string=} tip\n * @property {string=} tooltip\n * @property {number=} min\n * @property {number=} max\n * @property {string=} transform\n * @property {string | {get: string, set: string} } [bind]\n * @property {string=} when\n * @property {boolean} [hidden]\n * @property {boolean} [editable]\n * @property {string} [for]\n */\n/**\n * @typedef {Object} Action\n * @property {string} predicate\n * @property {string} actions\n */\n/**\n * @typedef {Object} RawWidget\n * @property {number} id\n * @property {string} key\n * @property {string} name\n * @property {string} category\n * @property {string} [scope] - Regex for idenfying allowed body ids\n * @property {string} [instructions]\n * @property {'mustache' | 'ejs'} [engine]\n * @property {string} [template]\n * @property {string} [filter]\n * @property {Param[]} [parameters]\n * @property {Object.<string, Object<string, string>>} [I18n]\n * @property {string | string[]} [selectors]\n * @property {string} [insertquery]\n * @property {string} [unwrap]\n * @property {string} [for]\n * @property {string} version\n * @property {string} author\n * @property {string[]} [requires]\n * @property {boolean} [hidden]\n * @property {number} [stars]\n * @property {Action[]} [contextmenu]\n * @property {Action[]} [contexttoolbar]\n */\n/**\n * @class\n * @classdesc Wrapper for Widget definition\n */\nexport class Widget {\n    #widget;\n    #instructionsParsed = false;\n\n    /**\n     * @param {RawWidget} widget\n     * @param {Object.<string, any>=} partials\n     */\n    constructor(widget, partials) {\n        partials = partials ?? {};\n        applyPartials(widget, partials);\n        this.#widget = widget;\n    }\n    /**\n     * @returns {string}\n     */\n    get name() {\n        return this.#widget.name;\n    }\n    /**\n     * @returns {string}\n     */\n    get key() {\n        return this.#widget.key;\n    }\n    /**\n     * @returns {Record<string, Record<string, string>>}\n     */\n    get I18n() {\n        return this.#widget.I18n || {};\n    }\n    /**\n     * @returns {string}\n     */\n    get template() {\n        return this.#widget.template ?? this.#widget.filter ?? '';\n    }\n    /**\n     * @returns {string}\n     */\n    get category() {\n        return this.#widget.category ?? \"MISC\";\n    }\n    /**\n     * @returns {string=}\n     */\n    get insertquery() {\n        return this.#widget.insertquery;\n    }\n    /**\n     * @returns {string | string[] =}\n     */\n    get selectors() {\n        return this.#widget.selectors;\n    }\n    /**\n     * @returns {string=}\n     */\n    get unwrap() {\n        return this.#widget.unwrap;\n    }\n    /**\n     * @returns {string}\n     */\n    get version() {\n        return this.#widget.version || \"1.0.0\";\n    }\n    /**\n     * @returns {string}\n     */\n    get instructions() {\n        if (this.#widget.instructions && !this.#instructionsParsed) {\n            this.#widget.instructions = decodeURIComponent(this.#widget.instructions);\n            this.#instructionsParsed = true;\n        }\n        return this.#widget.instructions ?? '';\n    }\n    /**\n     * @returns {Param[]}\n     */\n    get parameters() {\n        return this.#widget.parameters ?? [];\n    }\n    /**\n     * @returns {Object.<string, any>}\n     */\n    get defaults() {\n        /** @type {Object.<string, any> } */\n        const obj = {};\n        (this.#widget.parameters ?? []).forEach((param) => {\n            obj[param.name] = param.value;\n        });\n        return obj;\n    }\n    /**\n     * @param {number} userId\n     * @returns {boolean}\n     */\n    isFor(userId) {\n        if (this.#widget.hidden === true) {\n            return false;\n        }\n        let grantStr = (this.#widget.for || '').trim();\n        if (grantStr === '' || grantStr === '*') {\n            return true;\n        }\n        let allowMode = true;\n        if (grantStr.startsWith('-')) {\n            allowMode = false;\n        }\n        grantStr = grantStr.replace(/[+\\- ]/g, '');\n        const grantList = grantStr.split(\",\");\n        const isAllowed = (allowMode && grantList.indexOf(userId + \"\") >= 0) ||\n                         (!allowMode && grantList.indexOf(userId + \"\") < 0);\n        if (!isAllowed) {\n            console.warn(`Widget ${this.#widget.key} not allowed to user ${userId}: ${grantList}`);\n        }\n        return isAllowed;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isFilter() {\n        return this.#widget.template === undefined && this.#widget.filter !== undefined;\n    }\n\n    /**\n     * @param {string=} scope\n     * @returns {boolean}\n     */\n    isUsableInScope(scope) {\n        scope = scope ?? Shared.currentScope ?? '';\n        const widgetScopes = this.#widget.scope;\n        if (!scope || !widgetScopes || widgetScopes === \"*\") {\n            return true;\n        }\n        const regex = new RegExp(widgetScopes);\n        return (regex.exec(scope) ?? null) !== null;\n    }\n    /**\n     * @returns {boolean}\n     */\n    hasBindings() {\n        return (this.#widget.parameters ?? []).some(param => param.bind !== undefined);\n    }\n    /**\n     * Recovers the property value named name of the original definition\n     * @param {string} name\n     * @returns {*}\n     */\n    prop(name) {\n        // @ts-ignore\n        return this.#widget[name];\n    }\n}\n\n\nconst editorOptionsInstances = new Map();\n/**\n * @param {import('./plugin').TinyMCE} editor\n * @returns {EditorOptions}\n */\nexport function getEditorOptions(editor) {\n    let instance = editorOptionsInstances.get(editor);\n    if (!instance) {\n        instance = new EditorOptions(editor);\n        editorOptionsInstances.set(editor, instance);\n    }\n    return instance;\n}"],"names":["editor","instance","editorOptionsInstances","get","EditorOptions","set","pluginName","showPlugin","userId","courseId","widgetList","shareStyles","additionalCss","globalConfig","registerOption","options","register","processor","_widgetDict","key","defaultValue","dict","console","log","getWidgetDict","rawWidgets","partials","filter","e","wrappedWidgets","map","w","Widget","id","isFor","forEach","constructor","parseInt","this","widgetDict","Shared","currentScope","document","querySelector","fixMissingParamProperties","param","type","value","_param$options","v","expandPartial","obj","partialKey","startsWith","endsWith","partial","replace","error","applyPartials","widget","regex","template","s0","s1","parameters","i","prop","bind","transform","name","I18n","category","insertquery","selectors","unwrap","version","instructions","instructionsParsed","decodeURIComponent","defaults","hidden","grantStr","for","trim","allowMode","grantList","split","isAllowed","indexOf","warn","isFilter","undefined","isUsableInScope","scope","widgetScopes","RegExp","exec","hasBindings","some","Map"],"mappings":"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"}