{"version":3,"file":"widget_settings.min.js","sources":["../../src/src/widget_settings.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-alert */\nimport jQuery from 'jquery';\nimport CodeProEditor from './libs/cm6pro-lazy';\nimport {load, dump} from './libs/js_yaml-lazy';\nimport {get_strings as getStrings} from 'core/str';\nimport {getTemplateSrv} from './service/templateSrv';\n\nconst templateSrv = getTemplateSrv();\n\n/**\n * @class\n * @member {any[]} presetdata\n * */\nexport default {\n    /**\n     * @param {number} id\n     * @returns {{\n     *     $ymlArea: JQuery<HTMLElement>,\n     *     $jsonArea: JQuery<HTMLElement>,\n     * }}\n     */\n    getAreas: function(id) {\n        /** @type {*} */\n        const $ymlArea = jQuery(`#id_s_tiny_widgethub_defyml_${id}`);\n        const $jsonArea = jQuery(`#id_s_tiny_widgethub_def_${id}`);\n        return {\n            $ymlArea, $jsonArea\n        };\n    },\n    /**\n     * @param {number} id\n     * @param {*} codeProEditor\n     * @returns\n     */\n    updateYaml: function(id, codeProEditor) {\n        const {$jsonArea} = this.getAreas(id);\n        const json = (($jsonArea.val() ?? '') + '').trim();\n        if (!json) {\n            codeProEditor.setValue('');\n            return;\n        }\n        try {\n            const obj = JSON.parse(json);\n            const yml = dump(obj, {});\n            codeProEditor.setValue(yml);\n        } catch (ex) {\n            console.error(ex);\n            $jsonArea.val('');\n            codeProEditor.setValue('');\n        }\n    },\n    /**\n     * @param {string} yml\n     * @param {{id: number, keys: string[], partials: any}} opts\n     * @returns {Promise<{msg: string, json?: string, html?: string}>}\n     */\n    validate: async function(yml, opts) {\n        /**\n         * @type {{\n         *     msg: string,\n         *  html: string,\n         *  json: string | undefined\n         * }}\n         * */\n        const validation = {msg: '', html: '', json: undefined};\n        try {\n            // Check if the code is a valid Yaml\n            /** @type {import('./options').RawWidget | undefined} */\n            let jsonObj;\n            try {\n                jsonObj = load(yml, null) ?? {};\n            } catch (ex) {\n                validation.msg = \"Yaml syntax error:: \" + ex;\n            }\n            validation.json = JSON.stringify(jsonObj, null, 0);\n\n            // Check if the structure is correct\n            if (!jsonObj?.key) {\n                validation.msg = \"Yaml file must contain a 'key' property. \";\n            } else if (jsonObj.key === \"partials\") {\n                return validation;\n            } else if (jsonObj.key !== 'partials' && (!jsonObj.name || !jsonObj.template)) {\n                validation.msg += \"Widgets must have 'name' and 'template' properties. \";\n            }\n            // Check for duplicated keys\n            if (opts.id === 0 && jsonObj?.key) {\n                const keys = opts.keys || [];\n                if (keys.includes(jsonObj.key)) {\n                    validation.msg += `Key ${jsonObj.key} is already in use. Please rename it. `;\n                }\n            }\n            // Handle partials in parameters\n            const partials = opts.partials;\n            const paramsCopy = (jsonObj?.parameters || []).map(param => {\n                let pc = {...param};\n                if (pc.partial && partials[pc.partial]) {\n                    pc = Object.assign(pc, partials[pc.partial]);\n                }\n                return pc;\n            });\n            // Try to parse the template with the correct renderer\n            const translations = jsonObj?.I18n || {};\n            /** @type {Object.<string, any>} */\n            const ctx = {};\n            paramsCopy.forEach(param => {\n                ctx[param.name] = param.value;\n            });\n            const engine = jsonObj?.engine;\n            const html = await templateSrv.render(jsonObj?.template || '', ctx, translations, engine);\n            validation.html = html;\n        } catch (ex) {\n            validation.msg = \"Renderer error:: \" + ex;\n        }\n        return validation;\n    },\n\n    /**\n     * Load all widgets\n     * @param {{id: number, keys: string[], partials: any}} opts\n     * @returns\n     */\n    init: async function(opts) {\n        console.info(\"Init AMD called with opts \", JSON.stringify(opts));\n        const i18n = await getStrings([\n            {key: 'preview', component: 'tiny_widgethub'},\n            {key: 'delete', component: 'tiny_widgethub'},\n            {key: 'savechanges', component: 'tiny_widgethub'}\n        ]);\n\n        const {$ymlArea, $jsonArea} = this.getAreas(opts.id);\n\n        // Hide the control that handles JSON and it is actually saved\n        $jsonArea.css(\"display\", \"none\");\n        const $target = $jsonArea.parent();\n        const $form = $jsonArea.closest(\"form\");\n        // Hide any submit button if found\n        $form.find('button[type=\"submit\"], input[type=\"submit\"]').hide();\n        // Add submit buttons and manually trigger form submit.\n        const $formButtons = jQuery(`<div class=\"row\"><div class=\"form-buttons offset-sm-3 col-sm-3\">\n            <button type=\"button\" class=\"btn btn-primary form-submit\">${i18n[2]}</button></div></div>`);\n        $form.append($formButtons);\n        const $saveBtn = $formButtons.find(\"button\");\n\n        // Create a preview panel\n        const $previewPanel = jQuery(`<div id=\"tiny_widgethub_pp_${opts.id}\" class=\"tiny_widgethub-previewpanel d-none\"></div>`);\n        $target.append($previewPanel);\n\n        const $previewBtn = jQuery(`<button type=\"button\" class=\"btn btn-secondary m-1\">\n            <i class=\"fas fa fa-magnifying-glass\"></i> ${i18n[0]}</button>`);\n        $previewBtn.on('click', async() => {\n            const yml = codeProEditor.getValue();\n            const validation = await this.validate(yml, opts);\n            if (validation.msg) {\n                alert(validation.msg);\n            } else if (validation.html) {\n                $previewPanel.removeClass('d-none');\n                $jsonArea.trigger('focusin');\n                $jsonArea.val(validation.json ?? '');\n                $jsonArea.trigger('change');\n                $previewPanel.html(validation.html);\n            }\n        });\n        $target.append($previewBtn);\n\n        if (opts.id > 0) {\n            // Only show delete button on saved widgets (id=0 is reserved for new ones)\n            const $deleteBtn = jQuery(`<button type=\"button\" class=\"btn btn-danger m-1\">\n                <i class=\"fas fa fa-trash\"></i> ${i18n[1]}</button>`);\n            $deleteBtn.on('click', async() => {\n                // Ask confirmation\n                const answer = confirm('Do you want to delete this widget?');\n                if (!answer) {\n                    return;\n                }\n                // Clear all the controls\n                $jsonArea.trigger('focusin');\n                $jsonArea.val('');\n                $jsonArea.trigger('change');\n                $ymlArea.html('');\n                $previewPanel.html('');\n                // Send form by skipping validation\n                $form.trigger('submit');\n            });\n            $target.append($deleteBtn);\n        }\n\n        const codeProEditor = new CodeProEditor($ymlArea[0]);\n\n        $saveBtn.on(\"click\",\n            async() => {\n            // Must update the content from the Yaml control\n            const yml = codeProEditor.getValue();\n            // First validate the definition of the widget\n            const validation = await this.validate(yml, opts);\n            if (validation.msg) {\n                alert(validation.msg);\n            } else {\n                // Ensure that there is a change in the form value to force\n                // the set_updatedcallback to be called\n                $jsonArea.trigger('focusin');\n                $jsonArea.val((validation.json ?? '') + ' ');\n                $jsonArea.trigger('change');\n                // Submit form\n                $form.trigger('submit');\n            }\n        });\n\n        this.updateYaml(opts.id, codeProEditor);\n    }\n};\n"],"names":["templateSrv","getAreas","id","$ymlArea","$jsonArea","updateYaml","codeProEditor","this","json","val","trim","obj","JSON","parse","yml","setValue","ex","console","error","validate","async","opts","validation","msg","html","undefined","jsonObj","stringify","_jsonObj","key","name","template","_jsonObj2","keys","includes","partials","paramsCopy","parameters","map","param","pc","partial","Object","assign","translations","I18n","ctx","forEach","value","engine","_jsonObj5","render","init","info","i18n","component","css","$target","parent","$form","closest","find","hide","$formButtons","append","$saveBtn","$previewPanel","$previewBtn","on","getValue","alert","removeClass","trigger","$deleteBtn","confirm","CodeProEditor"],"mappings":"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"}