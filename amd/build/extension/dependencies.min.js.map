{"version":3,"file":"dependencies.min.js","sources":["../../src/extension/dependencies.js"],"sourcesContent":["/* eslint-disable no-console */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny WidgetHub plugin.\n *\n * @module      tiny_widgethub/plugin\n * @copyright   2025 Josep Mulet Pol <pep.mulet@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {getGlobalConfig} from \"../options\";\nimport {subscribe} from \"../extension\";\nimport {getWidgetDict} from \"../options\";\nimport {evalInContext, addBaseToUrl} from \"../util\";\nimport Common from '../common';\nconst {jsAreaClassname, jsURL} = Common;\n/**\n/**\n * Adds the required scripts defined in the list\n * @param {import(\"../plugin\").TinyMCE} editor\n * @param {string[] | undefined} requireList\n * @returns {number}\n */\nexport function addRequires(editor, requireList) {\n    const imgBaseUrl = getGlobalConfig(editor, 'imgBaseUrl', jsURL);\n    const jsBaseUrl = getGlobalConfig(editor, 'jsBaseUrl', imgBaseUrl);\n\n    let dependenciesUpdated = 0;\n    try {\n        const jsareaSelector = `div.${jsAreaClassname}`;\n        const affectedWidgets = Object.values(getWidgetDict(editor)).filter(w => w.selectors && w.prop('requires'));\n\n        const tiny = editor.getBody();\n        let jsArea = tiny.querySelector(jsareaSelector);\n\n        // If no requireList is passed, then analyze the page and add requires that must be there!\n        if (!requireList) {\n            requireList = [];\n            affectedWidgets.forEach(w => {\n                if (anyMatchesSelectors(tiny, w.selectors || [])) {\n                    requireList?.push(w.prop('requires')?.trim());\n                }\n            });\n        }\n\n        // Clear unused requires first\n        cleanUnusedRequires(editor, affectedWidgets);\n        jsArea = tiny.querySelector(jsareaSelector);\n\n        // Check the existence of script area\n        if (!jsArea && requireList.length > 0) {\n            const spacer = editor.dom.create('p', {}, '<br>');\n            jsArea = editor.dom.create('div', {\"class\": jsAreaClassname});\n            tiny.append(spacer);\n            tiny.append(jsArea);\n        }\n\n        // Check which scripts must be created\n        const scriptsToInsert = requireList.filter((scriptUrl) => {\n            if (!scriptUrl.endsWith(\".js\")) {\n                return false;\n            }\n            // Does the page already contain this dependency?\n            const realSrc = addBaseToUrl(jsBaseUrl, scriptUrl);\n            return jsArea?.querySelector(`script[src=\"${realSrc}\"]`) === null;\n        });\n\n        if (jsArea && scriptsToInsert.length > 0) {\n            // Insert the scripts in the area\n            scriptsToInsert.forEach(scriptUrl => {\n                const realSrc = addBaseToUrl(jsBaseUrl, scriptUrl);\n                const scriptNode = editor.dom.create(\"script\",\n                    {src: realSrc, type: \"mce-no/type\", \"data-mce-src\": realSrc});\n                jsArea.append(scriptNode);\n                dependenciesUpdated++;\n            });\n        }\n    } catch (ex) {\n        console.error(\"A problem occurred adding dependencies:\", ex);\n    }\n    return dependenciesUpdated;\n}\n\n/**\n * Removes those scripts that are not longer required\n * @param {HTMLElement} tiny\n * @param {string | string[]} selectors\n * @returns {boolean}\n */\nfunction anyMatchesSelectors(tiny, selectors) {\n    if (typeof (selectors) === 'string') {\n        selectors = [selectors];\n    }\n    let anyFound = false;\n    try {\n        anyFound = [...tiny.querySelectorAll(selectors[0] ?? '')].some(e => {\n            if (selectors.length === 1) {\n                return true;\n            }\n            // Matches all other conditions\n            let match = true;\n            for (let i = 1; i < selectors.length; i++) {\n                match = match && e.querySelector(selectors[i]) !== null;\n                if (!match) {\n                    break;\n                }\n            }\n            return match;\n        });\n    } catch (ex) {\n        console.error(\"Error in anyMatchesSelectors:\", ex);\n    }\n    return anyFound;\n}\n\n/**\n * Removes those scripts that are not longer required\n * @param {import(\"../plugin\").TinyMCE} editor\n * @param {import(\"../options\").Widget[]} [affectedWidgets]\n * @returns {number}\n */\nexport function cleanUnusedRequires(editor, affectedWidgets) {\n    let changes = 0;\n    try {\n        const tiny = editor.getBody();\n        const jsArea = tiny.querySelector(`div.${jsAreaClassname}`);\n        if (!jsArea) {\n            return 0;\n        }\n\n        if (!affectedWidgets) {\n            affectedWidgets = Object.values(getWidgetDict(editor)).filter(w => w.selectors && w.prop('requires'));\n        }\n        const imgBaseUrl = getGlobalConfig(editor, 'imgBaseUrl', jsURL);\n        const jsBaseUrl = getGlobalConfig(editor, 'jsBaseUrl', imgBaseUrl);\n\n        // All scripts in jsArea\n        /** @type {NodeListOf<HTMLScriptElement>} */\n        const allScripts = jsArea.querySelectorAll(\"script\");\n        allScripts.forEach((scriptElem) => {\n            const src = (scriptElem.src || '').trim();\n            if (!src) {\n                // Remove scripts without src\n                scriptElem.remove();\n                changes++;\n                return;\n            }\n\n            // Match the widget with this src\n            // @ts-ignore\n            const widgetFound = affectedWidgets.find(w => {\n                const realSrc = addBaseToUrl(jsBaseUrl, w.prop('requires')?.trim() || '');\n                return realSrc === src;\n            });\n            if (!widgetFound) {\n                // No widget has this src.\n                scriptElem.remove();\n                changes++;\n                return;\n            }\n            const anyInstancesFound = anyMatchesSelectors(tiny, widgetFound.selectors ?? []);\n            if (!anyInstancesFound) {\n                // Script no longer needed\n                scriptElem.remove();\n                changes++;\n            }\n        });\n        // Get rid of jsArea if no scripts are left\n        if (!jsArea.querySelectorAll(\"script\").length) {\n            jsArea.remove();\n            changes++;\n        }\n    } catch (ex) {\n        console.error(\"Error while removing unused dependencies:\", ex);\n    }\n    return changes;\n}\n/**\n * @param {import(\"../plugin\").TinyMCE} editor\n * @param {import(\"../options\").Widget} widget\n * @param {Record<string, any>} ctxFromDialogue\n */\nfunction widgetInserted(editor, widget, ctxFromDialogue) {\n\n    // Determine if should add any requires\n    const requireList = [];\n    // Treat the case of requires being an object (keys are the conditions to be met)\n    if (widget.prop('requires')) {\n        const parts = widget.prop('requires').split(\"|\");\n        let conditionFullfilled = true;\n        if (parts.length > 1) {\n            conditionFullfilled = evalInContext(ctxFromDialogue, parts[1]);\n        }\n        if (conditionFullfilled) {\n            requireList.push(parts[0]?.trim());\n        }\n    }\n    let changes = 0;\n    if (requireList.length > 0) {\n        // Now handle the filtered list of requires\n        changes += addRequires(editor, requireList);\n    } else {\n        // Always try to remove unused requires\n        changes += cleanUnusedRequires(editor);\n    }\n    if (changes > 0) {\n        editor.setDirty(true);\n    }\n}\n\n/**\n *\n * @param {*} fn\n * @returns\n */\nfunction withErrorHandling(fn) {\n    return function(/** @type {any[]} */...args) {\n        try {\n            return fn(...args);\n        } catch (err) {\n            console.error(err);\n            // Optionally rethrow or return a default value\n            return null;\n        }\n    };\n}\n\nsubscribe('contentSet', withErrorHandling(addRequires));\nsubscribe('widgetInserted', withErrorHandling(widgetInserted));\nsubscribe('widgetRemoved', withErrorHandling(cleanUnusedRequires));\nsubscribe('ctxAction', withErrorHandling(cleanUnusedRequires));\n"],"names":["jsAreaClassname","jsURL","Common","addRequires","editor","requireList","imgBaseUrl","jsBaseUrl","dependenciesUpdated","jsareaSelector","affectedWidgets","Object","values","filter","w","selectors","prop","tiny","getBody","jsArea","querySelector","forEach","anyMatchesSelectors","push","_w$prop","trim","cleanUnusedRequires","length","spacer","dom","create","append","scriptsToInsert","scriptUrl","endsWith","realSrc","scriptNode","src","type","ex","console","error","anyFound","querySelectorAll","some","e","match","i","changes","scriptElem","remove","widgetFound","find","withErrorHandling","fn","err","widget","ctxFromDialogue","parts","split","conditionFullfilled","_parts$","setDirty"],"mappings":"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"}